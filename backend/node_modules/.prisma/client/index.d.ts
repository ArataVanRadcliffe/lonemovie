
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model bookmark
 * 
 */
export type bookmark = $Result.DefaultSelection<Prisma.$bookmarkPayload>
/**
 * Model comment
 * 
 */
export type comment = $Result.DefaultSelection<Prisma.$commentPayload>
/**
 * Model content
 * 
 */
export type content = $Result.DefaultSelection<Prisma.$contentPayload>
/**
 * Model contentgenre
 * 
 */
export type contentgenre = $Result.DefaultSelection<Prisma.$contentgenrePayload>
/**
 * Model episode
 * 
 */
export type episode = $Result.DefaultSelection<Prisma.$episodePayload>
/**
 * Model genre
 * 
 */
export type genre = $Result.DefaultSelection<Prisma.$genrePayload>
/**
 * Model notification
 * 
 */
export type notification = $Result.DefaultSelection<Prisma.$notificationPayload>
/**
 * Model rating
 * 
 */
export type rating = $Result.DefaultSelection<Prisma.$ratingPayload>
/**
 * Model reportcontent
 * 
 */
export type reportcontent = $Result.DefaultSelection<Prisma.$reportcontentPayload>
/**
 * Model searchlog
 * 
 */
export type searchlog = $Result.DefaultSelection<Prisma.$searchlogPayload>
/**
 * Model season
 * 
 */
export type season = $Result.DefaultSelection<Prisma.$seasonPayload>
/**
 * Model subtitle
 * 
 */
export type subtitle = $Result.DefaultSelection<Prisma.$subtitlePayload>
/**
 * Model trendingcontent
 * 
 */
export type trendingcontent = $Result.DefaultSelection<Prisma.$trendingcontentPayload>
/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model watchhistory
 * 
 */
export type watchhistory = $Result.DefaultSelection<Prisma.$watchhistoryPayload>
/**
 * Model episodesource
 * 
 */
export type episodesource = $Result.DefaultSelection<Prisma.$episodesourcePayload>
/**
 * Model episodesourcequality
 * 
 */
export type episodesourcequality = $Result.DefaultSelection<Prisma.$episodesourcequalityPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const notification_type: {
  new_episode: 'new_episode',
  recommendation: 'recommendation',
  general: 'general'
};

export type notification_type = (typeof notification_type)[keyof typeof notification_type]


export const content_type: {
  movie: 'movie',
  series: 'series',
  anime: 'anime'
};

export type content_type = (typeof content_type)[keyof typeof content_type]


export const user_role: {
  member: 'member',
  admin: 'admin'
};

export type user_role = (typeof user_role)[keyof typeof user_role]


export const content_season_name: {
  spring: 'spring',
  summer: 'summer',
  fall: 'fall',
  winter: 'winter'
};

export type content_season_name = (typeof content_season_name)[keyof typeof content_season_name]

}

export type notification_type = $Enums.notification_type

export const notification_type: typeof $Enums.notification_type

export type content_type = $Enums.content_type

export const content_type: typeof $Enums.content_type

export type user_role = $Enums.user_role

export const user_role: typeof $Enums.user_role

export type content_season_name = $Enums.content_season_name

export const content_season_name: typeof $Enums.content_season_name

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Bookmarks
 * const bookmarks = await prisma.bookmark.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Bookmarks
   * const bookmarks = await prisma.bookmark.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.bookmark`: Exposes CRUD operations for the **bookmark** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bookmarks
    * const bookmarks = await prisma.bookmark.findMany()
    * ```
    */
  get bookmark(): Prisma.bookmarkDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.commentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.content`: Exposes CRUD operations for the **content** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contents
    * const contents = await prisma.content.findMany()
    * ```
    */
  get content(): Prisma.contentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contentgenre`: Exposes CRUD operations for the **contentgenre** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contentgenres
    * const contentgenres = await prisma.contentgenre.findMany()
    * ```
    */
  get contentgenre(): Prisma.contentgenreDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.episode`: Exposes CRUD operations for the **episode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Episodes
    * const episodes = await prisma.episode.findMany()
    * ```
    */
  get episode(): Prisma.episodeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.genre`: Exposes CRUD operations for the **genre** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Genres
    * const genres = await prisma.genre.findMany()
    * ```
    */
  get genre(): Prisma.genreDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.notificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rating`: Exposes CRUD operations for the **rating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ratings
    * const ratings = await prisma.rating.findMany()
    * ```
    */
  get rating(): Prisma.ratingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reportcontent`: Exposes CRUD operations for the **reportcontent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reportcontents
    * const reportcontents = await prisma.reportcontent.findMany()
    * ```
    */
  get reportcontent(): Prisma.reportcontentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.searchlog`: Exposes CRUD operations for the **searchlog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Searchlogs
    * const searchlogs = await prisma.searchlog.findMany()
    * ```
    */
  get searchlog(): Prisma.searchlogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.season`: Exposes CRUD operations for the **season** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Seasons
    * const seasons = await prisma.season.findMany()
    * ```
    */
  get season(): Prisma.seasonDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subtitle`: Exposes CRUD operations for the **subtitle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subtitles
    * const subtitles = await prisma.subtitle.findMany()
    * ```
    */
  get subtitle(): Prisma.subtitleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.trendingcontent`: Exposes CRUD operations for the **trendingcontent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trendingcontents
    * const trendingcontents = await prisma.trendingcontent.findMany()
    * ```
    */
  get trendingcontent(): Prisma.trendingcontentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.watchhistory`: Exposes CRUD operations for the **watchhistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Watchhistories
    * const watchhistories = await prisma.watchhistory.findMany()
    * ```
    */
  get watchhistory(): Prisma.watchhistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.episodesource`: Exposes CRUD operations for the **episodesource** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Episodesources
    * const episodesources = await prisma.episodesource.findMany()
    * ```
    */
  get episodesource(): Prisma.episodesourceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.episodesourcequality`: Exposes CRUD operations for the **episodesourcequality** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Episodesourcequalities
    * const episodesourcequalities = await prisma.episodesourcequality.findMany()
    * ```
    */
  get episodesourcequality(): Prisma.episodesourcequalityDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.11.1
   * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    bookmark: 'bookmark',
    comment: 'comment',
    content: 'content',
    contentgenre: 'contentgenre',
    episode: 'episode',
    genre: 'genre',
    notification: 'notification',
    rating: 'rating',
    reportcontent: 'reportcontent',
    searchlog: 'searchlog',
    season: 'season',
    subtitle: 'subtitle',
    trendingcontent: 'trendingcontent',
    user: 'user',
    watchhistory: 'watchhistory',
    episodesource: 'episodesource',
    episodesourcequality: 'episodesourcequality'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "bookmark" | "comment" | "content" | "contentgenre" | "episode" | "genre" | "notification" | "rating" | "reportcontent" | "searchlog" | "season" | "subtitle" | "trendingcontent" | "user" | "watchhistory" | "episodesource" | "episodesourcequality"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      bookmark: {
        payload: Prisma.$bookmarkPayload<ExtArgs>
        fields: Prisma.bookmarkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.bookmarkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bookmarkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.bookmarkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bookmarkPayload>
          }
          findFirst: {
            args: Prisma.bookmarkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bookmarkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.bookmarkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bookmarkPayload>
          }
          findMany: {
            args: Prisma.bookmarkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bookmarkPayload>[]
          }
          create: {
            args: Prisma.bookmarkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bookmarkPayload>
          }
          createMany: {
            args: Prisma.bookmarkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.bookmarkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bookmarkPayload>
          }
          update: {
            args: Prisma.bookmarkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bookmarkPayload>
          }
          deleteMany: {
            args: Prisma.bookmarkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.bookmarkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.bookmarkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bookmarkPayload>
          }
          aggregate: {
            args: Prisma.BookmarkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBookmark>
          }
          groupBy: {
            args: Prisma.bookmarkGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookmarkGroupByOutputType>[]
          }
          count: {
            args: Prisma.bookmarkCountArgs<ExtArgs>
            result: $Utils.Optional<BookmarkCountAggregateOutputType> | number
          }
        }
      }
      comment: {
        payload: Prisma.$commentPayload<ExtArgs>
        fields: Prisma.commentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.commentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.commentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentPayload>
          }
          findFirst: {
            args: Prisma.commentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.commentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentPayload>
          }
          findMany: {
            args: Prisma.commentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentPayload>[]
          }
          create: {
            args: Prisma.commentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentPayload>
          }
          createMany: {
            args: Prisma.commentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.commentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentPayload>
          }
          update: {
            args: Prisma.commentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentPayload>
          }
          deleteMany: {
            args: Prisma.commentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.commentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.commentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.commentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.commentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      content: {
        payload: Prisma.$contentPayload<ExtArgs>
        fields: Prisma.contentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.contentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.contentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentPayload>
          }
          findFirst: {
            args: Prisma.contentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.contentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentPayload>
          }
          findMany: {
            args: Prisma.contentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentPayload>[]
          }
          create: {
            args: Prisma.contentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentPayload>
          }
          createMany: {
            args: Prisma.contentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.contentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentPayload>
          }
          update: {
            args: Prisma.contentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentPayload>
          }
          deleteMany: {
            args: Prisma.contentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.contentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.contentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentPayload>
          }
          aggregate: {
            args: Prisma.ContentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContent>
          }
          groupBy: {
            args: Prisma.contentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContentGroupByOutputType>[]
          }
          count: {
            args: Prisma.contentCountArgs<ExtArgs>
            result: $Utils.Optional<ContentCountAggregateOutputType> | number
          }
        }
      }
      contentgenre: {
        payload: Prisma.$contentgenrePayload<ExtArgs>
        fields: Prisma.contentgenreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.contentgenreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentgenrePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.contentgenreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentgenrePayload>
          }
          findFirst: {
            args: Prisma.contentgenreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentgenrePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.contentgenreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentgenrePayload>
          }
          findMany: {
            args: Prisma.contentgenreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentgenrePayload>[]
          }
          create: {
            args: Prisma.contentgenreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentgenrePayload>
          }
          createMany: {
            args: Prisma.contentgenreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.contentgenreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentgenrePayload>
          }
          update: {
            args: Prisma.contentgenreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentgenrePayload>
          }
          deleteMany: {
            args: Prisma.contentgenreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.contentgenreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.contentgenreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentgenrePayload>
          }
          aggregate: {
            args: Prisma.ContentgenreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContentgenre>
          }
          groupBy: {
            args: Prisma.contentgenreGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContentgenreGroupByOutputType>[]
          }
          count: {
            args: Prisma.contentgenreCountArgs<ExtArgs>
            result: $Utils.Optional<ContentgenreCountAggregateOutputType> | number
          }
        }
      }
      episode: {
        payload: Prisma.$episodePayload<ExtArgs>
        fields: Prisma.episodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.episodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.episodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodePayload>
          }
          findFirst: {
            args: Prisma.episodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.episodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodePayload>
          }
          findMany: {
            args: Prisma.episodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodePayload>[]
          }
          create: {
            args: Prisma.episodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodePayload>
          }
          createMany: {
            args: Prisma.episodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.episodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodePayload>
          }
          update: {
            args: Prisma.episodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodePayload>
          }
          deleteMany: {
            args: Prisma.episodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.episodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.episodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodePayload>
          }
          aggregate: {
            args: Prisma.EpisodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEpisode>
          }
          groupBy: {
            args: Prisma.episodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<EpisodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.episodeCountArgs<ExtArgs>
            result: $Utils.Optional<EpisodeCountAggregateOutputType> | number
          }
        }
      }
      genre: {
        payload: Prisma.$genrePayload<ExtArgs>
        fields: Prisma.genreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.genreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$genrePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.genreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$genrePayload>
          }
          findFirst: {
            args: Prisma.genreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$genrePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.genreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$genrePayload>
          }
          findMany: {
            args: Prisma.genreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$genrePayload>[]
          }
          create: {
            args: Prisma.genreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$genrePayload>
          }
          createMany: {
            args: Prisma.genreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.genreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$genrePayload>
          }
          update: {
            args: Prisma.genreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$genrePayload>
          }
          deleteMany: {
            args: Prisma.genreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.genreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.genreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$genrePayload>
          }
          aggregate: {
            args: Prisma.GenreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGenre>
          }
          groupBy: {
            args: Prisma.genreGroupByArgs<ExtArgs>
            result: $Utils.Optional<GenreGroupByOutputType>[]
          }
          count: {
            args: Prisma.genreCountArgs<ExtArgs>
            result: $Utils.Optional<GenreCountAggregateOutputType> | number
          }
        }
      }
      notification: {
        payload: Prisma.$notificationPayload<ExtArgs>
        fields: Prisma.notificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.notificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.notificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload>
          }
          findFirst: {
            args: Prisma.notificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.notificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload>
          }
          findMany: {
            args: Prisma.notificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload>[]
          }
          create: {
            args: Prisma.notificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload>
          }
          createMany: {
            args: Prisma.notificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.notificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload>
          }
          update: {
            args: Prisma.notificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload>
          }
          deleteMany: {
            args: Prisma.notificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.notificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.notificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.notificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.notificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      rating: {
        payload: Prisma.$ratingPayload<ExtArgs>
        fields: Prisma.ratingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ratingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ratingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ratingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ratingPayload>
          }
          findFirst: {
            args: Prisma.ratingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ratingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ratingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ratingPayload>
          }
          findMany: {
            args: Prisma.ratingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ratingPayload>[]
          }
          create: {
            args: Prisma.ratingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ratingPayload>
          }
          createMany: {
            args: Prisma.ratingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ratingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ratingPayload>
          }
          update: {
            args: Prisma.ratingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ratingPayload>
          }
          deleteMany: {
            args: Prisma.ratingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ratingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ratingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ratingPayload>
          }
          aggregate: {
            args: Prisma.RatingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRating>
          }
          groupBy: {
            args: Prisma.ratingGroupByArgs<ExtArgs>
            result: $Utils.Optional<RatingGroupByOutputType>[]
          }
          count: {
            args: Prisma.ratingCountArgs<ExtArgs>
            result: $Utils.Optional<RatingCountAggregateOutputType> | number
          }
        }
      }
      reportcontent: {
        payload: Prisma.$reportcontentPayload<ExtArgs>
        fields: Prisma.reportcontentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.reportcontentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportcontentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.reportcontentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportcontentPayload>
          }
          findFirst: {
            args: Prisma.reportcontentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportcontentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.reportcontentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportcontentPayload>
          }
          findMany: {
            args: Prisma.reportcontentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportcontentPayload>[]
          }
          create: {
            args: Prisma.reportcontentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportcontentPayload>
          }
          createMany: {
            args: Prisma.reportcontentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.reportcontentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportcontentPayload>
          }
          update: {
            args: Prisma.reportcontentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportcontentPayload>
          }
          deleteMany: {
            args: Prisma.reportcontentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.reportcontentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.reportcontentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reportcontentPayload>
          }
          aggregate: {
            args: Prisma.ReportcontentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReportcontent>
          }
          groupBy: {
            args: Prisma.reportcontentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportcontentGroupByOutputType>[]
          }
          count: {
            args: Prisma.reportcontentCountArgs<ExtArgs>
            result: $Utils.Optional<ReportcontentCountAggregateOutputType> | number
          }
        }
      }
      searchlog: {
        payload: Prisma.$searchlogPayload<ExtArgs>
        fields: Prisma.searchlogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.searchlogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$searchlogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.searchlogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$searchlogPayload>
          }
          findFirst: {
            args: Prisma.searchlogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$searchlogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.searchlogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$searchlogPayload>
          }
          findMany: {
            args: Prisma.searchlogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$searchlogPayload>[]
          }
          create: {
            args: Prisma.searchlogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$searchlogPayload>
          }
          createMany: {
            args: Prisma.searchlogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.searchlogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$searchlogPayload>
          }
          update: {
            args: Prisma.searchlogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$searchlogPayload>
          }
          deleteMany: {
            args: Prisma.searchlogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.searchlogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.searchlogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$searchlogPayload>
          }
          aggregate: {
            args: Prisma.SearchlogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSearchlog>
          }
          groupBy: {
            args: Prisma.searchlogGroupByArgs<ExtArgs>
            result: $Utils.Optional<SearchlogGroupByOutputType>[]
          }
          count: {
            args: Prisma.searchlogCountArgs<ExtArgs>
            result: $Utils.Optional<SearchlogCountAggregateOutputType> | number
          }
        }
      }
      season: {
        payload: Prisma.$seasonPayload<ExtArgs>
        fields: Prisma.seasonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.seasonFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seasonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.seasonFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seasonPayload>
          }
          findFirst: {
            args: Prisma.seasonFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seasonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.seasonFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seasonPayload>
          }
          findMany: {
            args: Prisma.seasonFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seasonPayload>[]
          }
          create: {
            args: Prisma.seasonCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seasonPayload>
          }
          createMany: {
            args: Prisma.seasonCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.seasonDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seasonPayload>
          }
          update: {
            args: Prisma.seasonUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seasonPayload>
          }
          deleteMany: {
            args: Prisma.seasonDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.seasonUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.seasonUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seasonPayload>
          }
          aggregate: {
            args: Prisma.SeasonAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSeason>
          }
          groupBy: {
            args: Prisma.seasonGroupByArgs<ExtArgs>
            result: $Utils.Optional<SeasonGroupByOutputType>[]
          }
          count: {
            args: Prisma.seasonCountArgs<ExtArgs>
            result: $Utils.Optional<SeasonCountAggregateOutputType> | number
          }
        }
      }
      subtitle: {
        payload: Prisma.$subtitlePayload<ExtArgs>
        fields: Prisma.subtitleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.subtitleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subtitlePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.subtitleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subtitlePayload>
          }
          findFirst: {
            args: Prisma.subtitleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subtitlePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.subtitleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subtitlePayload>
          }
          findMany: {
            args: Prisma.subtitleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subtitlePayload>[]
          }
          create: {
            args: Prisma.subtitleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subtitlePayload>
          }
          createMany: {
            args: Prisma.subtitleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.subtitleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subtitlePayload>
          }
          update: {
            args: Prisma.subtitleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subtitlePayload>
          }
          deleteMany: {
            args: Prisma.subtitleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.subtitleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.subtitleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subtitlePayload>
          }
          aggregate: {
            args: Prisma.SubtitleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubtitle>
          }
          groupBy: {
            args: Prisma.subtitleGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubtitleGroupByOutputType>[]
          }
          count: {
            args: Prisma.subtitleCountArgs<ExtArgs>
            result: $Utils.Optional<SubtitleCountAggregateOutputType> | number
          }
        }
      }
      trendingcontent: {
        payload: Prisma.$trendingcontentPayload<ExtArgs>
        fields: Prisma.trendingcontentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.trendingcontentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trendingcontentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.trendingcontentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trendingcontentPayload>
          }
          findFirst: {
            args: Prisma.trendingcontentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trendingcontentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.trendingcontentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trendingcontentPayload>
          }
          findMany: {
            args: Prisma.trendingcontentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trendingcontentPayload>[]
          }
          create: {
            args: Prisma.trendingcontentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trendingcontentPayload>
          }
          createMany: {
            args: Prisma.trendingcontentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.trendingcontentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trendingcontentPayload>
          }
          update: {
            args: Prisma.trendingcontentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trendingcontentPayload>
          }
          deleteMany: {
            args: Prisma.trendingcontentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.trendingcontentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.trendingcontentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trendingcontentPayload>
          }
          aggregate: {
            args: Prisma.TrendingcontentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrendingcontent>
          }
          groupBy: {
            args: Prisma.trendingcontentGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrendingcontentGroupByOutputType>[]
          }
          count: {
            args: Prisma.trendingcontentCountArgs<ExtArgs>
            result: $Utils.Optional<TrendingcontentCountAggregateOutputType> | number
          }
        }
      }
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      watchhistory: {
        payload: Prisma.$watchhistoryPayload<ExtArgs>
        fields: Prisma.watchhistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.watchhistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$watchhistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.watchhistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$watchhistoryPayload>
          }
          findFirst: {
            args: Prisma.watchhistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$watchhistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.watchhistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$watchhistoryPayload>
          }
          findMany: {
            args: Prisma.watchhistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$watchhistoryPayload>[]
          }
          create: {
            args: Prisma.watchhistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$watchhistoryPayload>
          }
          createMany: {
            args: Prisma.watchhistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.watchhistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$watchhistoryPayload>
          }
          update: {
            args: Prisma.watchhistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$watchhistoryPayload>
          }
          deleteMany: {
            args: Prisma.watchhistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.watchhistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.watchhistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$watchhistoryPayload>
          }
          aggregate: {
            args: Prisma.WatchhistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWatchhistory>
          }
          groupBy: {
            args: Prisma.watchhistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<WatchhistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.watchhistoryCountArgs<ExtArgs>
            result: $Utils.Optional<WatchhistoryCountAggregateOutputType> | number
          }
        }
      }
      episodesource: {
        payload: Prisma.$episodesourcePayload<ExtArgs>
        fields: Prisma.episodesourceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.episodesourceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodesourcePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.episodesourceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodesourcePayload>
          }
          findFirst: {
            args: Prisma.episodesourceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodesourcePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.episodesourceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodesourcePayload>
          }
          findMany: {
            args: Prisma.episodesourceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodesourcePayload>[]
          }
          create: {
            args: Prisma.episodesourceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodesourcePayload>
          }
          createMany: {
            args: Prisma.episodesourceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.episodesourceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodesourcePayload>
          }
          update: {
            args: Prisma.episodesourceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodesourcePayload>
          }
          deleteMany: {
            args: Prisma.episodesourceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.episodesourceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.episodesourceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodesourcePayload>
          }
          aggregate: {
            args: Prisma.EpisodesourceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEpisodesource>
          }
          groupBy: {
            args: Prisma.episodesourceGroupByArgs<ExtArgs>
            result: $Utils.Optional<EpisodesourceGroupByOutputType>[]
          }
          count: {
            args: Prisma.episodesourceCountArgs<ExtArgs>
            result: $Utils.Optional<EpisodesourceCountAggregateOutputType> | number
          }
        }
      }
      episodesourcequality: {
        payload: Prisma.$episodesourcequalityPayload<ExtArgs>
        fields: Prisma.episodesourcequalityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.episodesourcequalityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodesourcequalityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.episodesourcequalityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodesourcequalityPayload>
          }
          findFirst: {
            args: Prisma.episodesourcequalityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodesourcequalityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.episodesourcequalityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodesourcequalityPayload>
          }
          findMany: {
            args: Prisma.episodesourcequalityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodesourcequalityPayload>[]
          }
          create: {
            args: Prisma.episodesourcequalityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodesourcequalityPayload>
          }
          createMany: {
            args: Prisma.episodesourcequalityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.episodesourcequalityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodesourcequalityPayload>
          }
          update: {
            args: Prisma.episodesourcequalityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodesourcequalityPayload>
          }
          deleteMany: {
            args: Prisma.episodesourcequalityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.episodesourcequalityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.episodesourcequalityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$episodesourcequalityPayload>
          }
          aggregate: {
            args: Prisma.EpisodesourcequalityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEpisodesourcequality>
          }
          groupBy: {
            args: Prisma.episodesourcequalityGroupByArgs<ExtArgs>
            result: $Utils.Optional<EpisodesourcequalityGroupByOutputType>[]
          }
          count: {
            args: Prisma.episodesourcequalityCountArgs<ExtArgs>
            result: $Utils.Optional<EpisodesourcequalityCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    bookmark?: bookmarkOmit
    comment?: commentOmit
    content?: contentOmit
    contentgenre?: contentgenreOmit
    episode?: episodeOmit
    genre?: genreOmit
    notification?: notificationOmit
    rating?: ratingOmit
    reportcontent?: reportcontentOmit
    searchlog?: searchlogOmit
    season?: seasonOmit
    subtitle?: subtitleOmit
    trendingcontent?: trendingcontentOmit
    user?: userOmit
    watchhistory?: watchhistoryOmit
    episodesource?: episodesourceOmit
    episodesourcequality?: episodesourcequalityOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ContentCountOutputType
   */

  export type ContentCountOutputType = {
    bookmark: number
    comment: number
    contentgenre: number
    episode: number
    rating: number
    reportcontent: number
    season: number
    subtitle: number
    trendingcontent: number
    watchhistory: number
  }

  export type ContentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookmark?: boolean | ContentCountOutputTypeCountBookmarkArgs
    comment?: boolean | ContentCountOutputTypeCountCommentArgs
    contentgenre?: boolean | ContentCountOutputTypeCountContentgenreArgs
    episode?: boolean | ContentCountOutputTypeCountEpisodeArgs
    rating?: boolean | ContentCountOutputTypeCountRatingArgs
    reportcontent?: boolean | ContentCountOutputTypeCountReportcontentArgs
    season?: boolean | ContentCountOutputTypeCountSeasonArgs
    subtitle?: boolean | ContentCountOutputTypeCountSubtitleArgs
    trendingcontent?: boolean | ContentCountOutputTypeCountTrendingcontentArgs
    watchhistory?: boolean | ContentCountOutputTypeCountWatchhistoryArgs
  }

  // Custom InputTypes
  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentCountOutputType
     */
    select?: ContentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeCountBookmarkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: bookmarkWhereInput
  }

  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeCountCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: commentWhereInput
  }

  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeCountContentgenreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: contentgenreWhereInput
  }

  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeCountEpisodeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: episodeWhereInput
  }

  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeCountRatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ratingWhereInput
  }

  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeCountReportcontentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reportcontentWhereInput
  }

  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeCountSeasonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: seasonWhereInput
  }

  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeCountSubtitleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: subtitleWhereInput
  }

  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeCountTrendingcontentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: trendingcontentWhereInput
  }

  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeCountWatchhistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: watchhistoryWhereInput
  }


  /**
   * Count Type EpisodeCountOutputType
   */

  export type EpisodeCountOutputType = {
    comment: number
    episodesource: number
    reportcontent: number
    subtitle: number
    watchhistory: number
  }

  export type EpisodeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comment?: boolean | EpisodeCountOutputTypeCountCommentArgs
    episodesource?: boolean | EpisodeCountOutputTypeCountEpisodesourceArgs
    reportcontent?: boolean | EpisodeCountOutputTypeCountReportcontentArgs
    subtitle?: boolean | EpisodeCountOutputTypeCountSubtitleArgs
    watchhistory?: boolean | EpisodeCountOutputTypeCountWatchhistoryArgs
  }

  // Custom InputTypes
  /**
   * EpisodeCountOutputType without action
   */
  export type EpisodeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EpisodeCountOutputType
     */
    select?: EpisodeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EpisodeCountOutputType without action
   */
  export type EpisodeCountOutputTypeCountCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: commentWhereInput
  }

  /**
   * EpisodeCountOutputType without action
   */
  export type EpisodeCountOutputTypeCountEpisodesourceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: episodesourceWhereInput
  }

  /**
   * EpisodeCountOutputType without action
   */
  export type EpisodeCountOutputTypeCountReportcontentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reportcontentWhereInput
  }

  /**
   * EpisodeCountOutputType without action
   */
  export type EpisodeCountOutputTypeCountSubtitleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: subtitleWhereInput
  }

  /**
   * EpisodeCountOutputType without action
   */
  export type EpisodeCountOutputTypeCountWatchhistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: watchhistoryWhereInput
  }


  /**
   * Count Type GenreCountOutputType
   */

  export type GenreCountOutputType = {
    contentgenre: number
  }

  export type GenreCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contentgenre?: boolean | GenreCountOutputTypeCountContentgenreArgs
  }

  // Custom InputTypes
  /**
   * GenreCountOutputType without action
   */
  export type GenreCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenreCountOutputType
     */
    select?: GenreCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GenreCountOutputType without action
   */
  export type GenreCountOutputTypeCountContentgenreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: contentgenreWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    bookmark: number
    comment: number
    notification: number
    rating: number
    reportcontent: number
    searchlog: number
    watchhistory: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookmark?: boolean | UserCountOutputTypeCountBookmarkArgs
    comment?: boolean | UserCountOutputTypeCountCommentArgs
    notification?: boolean | UserCountOutputTypeCountNotificationArgs
    rating?: boolean | UserCountOutputTypeCountRatingArgs
    reportcontent?: boolean | UserCountOutputTypeCountReportcontentArgs
    searchlog?: boolean | UserCountOutputTypeCountSearchlogArgs
    watchhistory?: boolean | UserCountOutputTypeCountWatchhistoryArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBookmarkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: bookmarkWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: commentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: notificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ratingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReportcontentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reportcontentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSearchlogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: searchlogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWatchhistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: watchhistoryWhereInput
  }


  /**
   * Count Type EpisodesourceCountOutputType
   */

  export type EpisodesourceCountOutputType = {
    qualities: number
  }

  export type EpisodesourceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    qualities?: boolean | EpisodesourceCountOutputTypeCountQualitiesArgs
  }

  // Custom InputTypes
  /**
   * EpisodesourceCountOutputType without action
   */
  export type EpisodesourceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EpisodesourceCountOutputType
     */
    select?: EpisodesourceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EpisodesourceCountOutputType without action
   */
  export type EpisodesourceCountOutputTypeCountQualitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: episodesourcequalityWhereInput
  }


  /**
   * Models
   */

  /**
   * Model bookmark
   */

  export type AggregateBookmark = {
    _count: BookmarkCountAggregateOutputType | null
    _avg: BookmarkAvgAggregateOutputType | null
    _sum: BookmarkSumAggregateOutputType | null
    _min: BookmarkMinAggregateOutputType | null
    _max: BookmarkMaxAggregateOutputType | null
  }

  export type BookmarkAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    content_id: number | null
  }

  export type BookmarkSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    content_id: number | null
  }

  export type BookmarkMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    content_id: number | null
    created_at: Date | null
  }

  export type BookmarkMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    content_id: number | null
    created_at: Date | null
  }

  export type BookmarkCountAggregateOutputType = {
    id: number
    user_id: number
    content_id: number
    created_at: number
    _all: number
  }


  export type BookmarkAvgAggregateInputType = {
    id?: true
    user_id?: true
    content_id?: true
  }

  export type BookmarkSumAggregateInputType = {
    id?: true
    user_id?: true
    content_id?: true
  }

  export type BookmarkMinAggregateInputType = {
    id?: true
    user_id?: true
    content_id?: true
    created_at?: true
  }

  export type BookmarkMaxAggregateInputType = {
    id?: true
    user_id?: true
    content_id?: true
    created_at?: true
  }

  export type BookmarkCountAggregateInputType = {
    id?: true
    user_id?: true
    content_id?: true
    created_at?: true
    _all?: true
  }

  export type BookmarkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which bookmark to aggregate.
     */
    where?: bookmarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bookmarks to fetch.
     */
    orderBy?: bookmarkOrderByWithRelationInput | bookmarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: bookmarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bookmarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bookmarks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned bookmarks
    **/
    _count?: true | BookmarkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookmarkAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookmarkSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookmarkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookmarkMaxAggregateInputType
  }

  export type GetBookmarkAggregateType<T extends BookmarkAggregateArgs> = {
        [P in keyof T & keyof AggregateBookmark]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookmark[P]>
      : GetScalarType<T[P], AggregateBookmark[P]>
  }




  export type bookmarkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: bookmarkWhereInput
    orderBy?: bookmarkOrderByWithAggregationInput | bookmarkOrderByWithAggregationInput[]
    by: BookmarkScalarFieldEnum[] | BookmarkScalarFieldEnum
    having?: bookmarkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookmarkCountAggregateInputType | true
    _avg?: BookmarkAvgAggregateInputType
    _sum?: BookmarkSumAggregateInputType
    _min?: BookmarkMinAggregateInputType
    _max?: BookmarkMaxAggregateInputType
  }

  export type BookmarkGroupByOutputType = {
    id: number
    user_id: number
    content_id: number
    created_at: Date
    _count: BookmarkCountAggregateOutputType | null
    _avg: BookmarkAvgAggregateOutputType | null
    _sum: BookmarkSumAggregateOutputType | null
    _min: BookmarkMinAggregateOutputType | null
    _max: BookmarkMaxAggregateOutputType | null
  }

  type GetBookmarkGroupByPayload<T extends bookmarkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookmarkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookmarkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookmarkGroupByOutputType[P]>
            : GetScalarType<T[P], BookmarkGroupByOutputType[P]>
        }
      >
    >


  export type bookmarkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    content_id?: boolean
    created_at?: boolean
    content?: boolean | contentDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookmark"]>



  export type bookmarkSelectScalar = {
    id?: boolean
    user_id?: boolean
    content_id?: boolean
    created_at?: boolean
  }

  export type bookmarkOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "content_id" | "created_at", ExtArgs["result"]["bookmark"]>
  export type bookmarkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    content?: boolean | contentDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $bookmarkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "bookmark"
    objects: {
      content: Prisma.$contentPayload<ExtArgs>
      user: Prisma.$userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      content_id: number
      created_at: Date
    }, ExtArgs["result"]["bookmark"]>
    composites: {}
  }

  type bookmarkGetPayload<S extends boolean | null | undefined | bookmarkDefaultArgs> = $Result.GetResult<Prisma.$bookmarkPayload, S>

  type bookmarkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<bookmarkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BookmarkCountAggregateInputType | true
    }

  export interface bookmarkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['bookmark'], meta: { name: 'bookmark' } }
    /**
     * Find zero or one Bookmark that matches the filter.
     * @param {bookmarkFindUniqueArgs} args - Arguments to find a Bookmark
     * @example
     * // Get one Bookmark
     * const bookmark = await prisma.bookmark.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends bookmarkFindUniqueArgs>(args: SelectSubset<T, bookmarkFindUniqueArgs<ExtArgs>>): Prisma__bookmarkClient<$Result.GetResult<Prisma.$bookmarkPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Bookmark that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {bookmarkFindUniqueOrThrowArgs} args - Arguments to find a Bookmark
     * @example
     * // Get one Bookmark
     * const bookmark = await prisma.bookmark.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends bookmarkFindUniqueOrThrowArgs>(args: SelectSubset<T, bookmarkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__bookmarkClient<$Result.GetResult<Prisma.$bookmarkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bookmark that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bookmarkFindFirstArgs} args - Arguments to find a Bookmark
     * @example
     * // Get one Bookmark
     * const bookmark = await prisma.bookmark.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends bookmarkFindFirstArgs>(args?: SelectSubset<T, bookmarkFindFirstArgs<ExtArgs>>): Prisma__bookmarkClient<$Result.GetResult<Prisma.$bookmarkPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bookmark that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bookmarkFindFirstOrThrowArgs} args - Arguments to find a Bookmark
     * @example
     * // Get one Bookmark
     * const bookmark = await prisma.bookmark.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends bookmarkFindFirstOrThrowArgs>(args?: SelectSubset<T, bookmarkFindFirstOrThrowArgs<ExtArgs>>): Prisma__bookmarkClient<$Result.GetResult<Prisma.$bookmarkPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Bookmarks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bookmarkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bookmarks
     * const bookmarks = await prisma.bookmark.findMany()
     * 
     * // Get first 10 Bookmarks
     * const bookmarks = await prisma.bookmark.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookmarkWithIdOnly = await prisma.bookmark.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends bookmarkFindManyArgs>(args?: SelectSubset<T, bookmarkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bookmarkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Bookmark.
     * @param {bookmarkCreateArgs} args - Arguments to create a Bookmark.
     * @example
     * // Create one Bookmark
     * const Bookmark = await prisma.bookmark.create({
     *   data: {
     *     // ... data to create a Bookmark
     *   }
     * })
     * 
     */
    create<T extends bookmarkCreateArgs>(args: SelectSubset<T, bookmarkCreateArgs<ExtArgs>>): Prisma__bookmarkClient<$Result.GetResult<Prisma.$bookmarkPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Bookmarks.
     * @param {bookmarkCreateManyArgs} args - Arguments to create many Bookmarks.
     * @example
     * // Create many Bookmarks
     * const bookmark = await prisma.bookmark.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends bookmarkCreateManyArgs>(args?: SelectSubset<T, bookmarkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Bookmark.
     * @param {bookmarkDeleteArgs} args - Arguments to delete one Bookmark.
     * @example
     * // Delete one Bookmark
     * const Bookmark = await prisma.bookmark.delete({
     *   where: {
     *     // ... filter to delete one Bookmark
     *   }
     * })
     * 
     */
    delete<T extends bookmarkDeleteArgs>(args: SelectSubset<T, bookmarkDeleteArgs<ExtArgs>>): Prisma__bookmarkClient<$Result.GetResult<Prisma.$bookmarkPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Bookmark.
     * @param {bookmarkUpdateArgs} args - Arguments to update one Bookmark.
     * @example
     * // Update one Bookmark
     * const bookmark = await prisma.bookmark.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends bookmarkUpdateArgs>(args: SelectSubset<T, bookmarkUpdateArgs<ExtArgs>>): Prisma__bookmarkClient<$Result.GetResult<Prisma.$bookmarkPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Bookmarks.
     * @param {bookmarkDeleteManyArgs} args - Arguments to filter Bookmarks to delete.
     * @example
     * // Delete a few Bookmarks
     * const { count } = await prisma.bookmark.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends bookmarkDeleteManyArgs>(args?: SelectSubset<T, bookmarkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookmarks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bookmarkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bookmarks
     * const bookmark = await prisma.bookmark.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends bookmarkUpdateManyArgs>(args: SelectSubset<T, bookmarkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Bookmark.
     * @param {bookmarkUpsertArgs} args - Arguments to update or create a Bookmark.
     * @example
     * // Update or create a Bookmark
     * const bookmark = await prisma.bookmark.upsert({
     *   create: {
     *     // ... data to create a Bookmark
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bookmark we want to update
     *   }
     * })
     */
    upsert<T extends bookmarkUpsertArgs>(args: SelectSubset<T, bookmarkUpsertArgs<ExtArgs>>): Prisma__bookmarkClient<$Result.GetResult<Prisma.$bookmarkPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Bookmarks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bookmarkCountArgs} args - Arguments to filter Bookmarks to count.
     * @example
     * // Count the number of Bookmarks
     * const count = await prisma.bookmark.count({
     *   where: {
     *     // ... the filter for the Bookmarks we want to count
     *   }
     * })
    **/
    count<T extends bookmarkCountArgs>(
      args?: Subset<T, bookmarkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookmarkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bookmark.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookmarkAggregateArgs>(args: Subset<T, BookmarkAggregateArgs>): Prisma.PrismaPromise<GetBookmarkAggregateType<T>>

    /**
     * Group by Bookmark.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bookmarkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends bookmarkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: bookmarkGroupByArgs['orderBy'] }
        : { orderBy?: bookmarkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, bookmarkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookmarkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the bookmark model
   */
  readonly fields: bookmarkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for bookmark.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__bookmarkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    content<T extends contentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, contentDefaultArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the bookmark model
   */
  interface bookmarkFieldRefs {
    readonly id: FieldRef<"bookmark", 'Int'>
    readonly user_id: FieldRef<"bookmark", 'Int'>
    readonly content_id: FieldRef<"bookmark", 'Int'>
    readonly created_at: FieldRef<"bookmark", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * bookmark findUnique
   */
  export type bookmarkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bookmark
     */
    select?: bookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bookmark
     */
    omit?: bookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bookmarkInclude<ExtArgs> | null
    /**
     * Filter, which bookmark to fetch.
     */
    where: bookmarkWhereUniqueInput
  }

  /**
   * bookmark findUniqueOrThrow
   */
  export type bookmarkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bookmark
     */
    select?: bookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bookmark
     */
    omit?: bookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bookmarkInclude<ExtArgs> | null
    /**
     * Filter, which bookmark to fetch.
     */
    where: bookmarkWhereUniqueInput
  }

  /**
   * bookmark findFirst
   */
  export type bookmarkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bookmark
     */
    select?: bookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bookmark
     */
    omit?: bookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bookmarkInclude<ExtArgs> | null
    /**
     * Filter, which bookmark to fetch.
     */
    where?: bookmarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bookmarks to fetch.
     */
    orderBy?: bookmarkOrderByWithRelationInput | bookmarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bookmarks.
     */
    cursor?: bookmarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bookmarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bookmarks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bookmarks.
     */
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * bookmark findFirstOrThrow
   */
  export type bookmarkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bookmark
     */
    select?: bookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bookmark
     */
    omit?: bookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bookmarkInclude<ExtArgs> | null
    /**
     * Filter, which bookmark to fetch.
     */
    where?: bookmarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bookmarks to fetch.
     */
    orderBy?: bookmarkOrderByWithRelationInput | bookmarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bookmarks.
     */
    cursor?: bookmarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bookmarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bookmarks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bookmarks.
     */
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * bookmark findMany
   */
  export type bookmarkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bookmark
     */
    select?: bookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bookmark
     */
    omit?: bookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bookmarkInclude<ExtArgs> | null
    /**
     * Filter, which bookmarks to fetch.
     */
    where?: bookmarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bookmarks to fetch.
     */
    orderBy?: bookmarkOrderByWithRelationInput | bookmarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing bookmarks.
     */
    cursor?: bookmarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bookmarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bookmarks.
     */
    skip?: number
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * bookmark create
   */
  export type bookmarkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bookmark
     */
    select?: bookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bookmark
     */
    omit?: bookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bookmarkInclude<ExtArgs> | null
    /**
     * The data needed to create a bookmark.
     */
    data: XOR<bookmarkCreateInput, bookmarkUncheckedCreateInput>
  }

  /**
   * bookmark createMany
   */
  export type bookmarkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many bookmarks.
     */
    data: bookmarkCreateManyInput | bookmarkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * bookmark update
   */
  export type bookmarkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bookmark
     */
    select?: bookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bookmark
     */
    omit?: bookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bookmarkInclude<ExtArgs> | null
    /**
     * The data needed to update a bookmark.
     */
    data: XOR<bookmarkUpdateInput, bookmarkUncheckedUpdateInput>
    /**
     * Choose, which bookmark to update.
     */
    where: bookmarkWhereUniqueInput
  }

  /**
   * bookmark updateMany
   */
  export type bookmarkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update bookmarks.
     */
    data: XOR<bookmarkUpdateManyMutationInput, bookmarkUncheckedUpdateManyInput>
    /**
     * Filter which bookmarks to update
     */
    where?: bookmarkWhereInput
    /**
     * Limit how many bookmarks to update.
     */
    limit?: number
  }

  /**
   * bookmark upsert
   */
  export type bookmarkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bookmark
     */
    select?: bookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bookmark
     */
    omit?: bookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bookmarkInclude<ExtArgs> | null
    /**
     * The filter to search for the bookmark to update in case it exists.
     */
    where: bookmarkWhereUniqueInput
    /**
     * In case the bookmark found by the `where` argument doesn't exist, create a new bookmark with this data.
     */
    create: XOR<bookmarkCreateInput, bookmarkUncheckedCreateInput>
    /**
     * In case the bookmark was found with the provided `where` argument, update it with this data.
     */
    update: XOR<bookmarkUpdateInput, bookmarkUncheckedUpdateInput>
  }

  /**
   * bookmark delete
   */
  export type bookmarkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bookmark
     */
    select?: bookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bookmark
     */
    omit?: bookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bookmarkInclude<ExtArgs> | null
    /**
     * Filter which bookmark to delete.
     */
    where: bookmarkWhereUniqueInput
  }

  /**
   * bookmark deleteMany
   */
  export type bookmarkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which bookmarks to delete
     */
    where?: bookmarkWhereInput
    /**
     * Limit how many bookmarks to delete.
     */
    limit?: number
  }

  /**
   * bookmark without action
   */
  export type bookmarkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bookmark
     */
    select?: bookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bookmark
     */
    omit?: bookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bookmarkInclude<ExtArgs> | null
  }


  /**
   * Model comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    content_id: number | null
    episode_id: number | null
  }

  export type CommentSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    content_id: number | null
    episode_id: number | null
  }

  export type CommentMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    content_id: number | null
    episode_id: number | null
    comment: string | null
    created_at: Date | null
  }

  export type CommentMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    content_id: number | null
    episode_id: number | null
    comment: string | null
    created_at: Date | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    user_id: number
    content_id: number
    episode_id: number
    comment: number
    created_at: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    id?: true
    user_id?: true
    content_id?: true
    episode_id?: true
  }

  export type CommentSumAggregateInputType = {
    id?: true
    user_id?: true
    content_id?: true
    episode_id?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    user_id?: true
    content_id?: true
    episode_id?: true
    comment?: true
    created_at?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    user_id?: true
    content_id?: true
    episode_id?: true
    comment?: true
    created_at?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    user_id?: true
    content_id?: true
    episode_id?: true
    comment?: true
    created_at?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which comment to aggregate.
     */
    where?: commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: commentOrderByWithRelationInput | commentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type commentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: commentWhereInput
    orderBy?: commentOrderByWithAggregationInput | commentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: commentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: number
    user_id: number
    content_id: number
    episode_id: number
    comment: string
    created_at: Date
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends commentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type commentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    content_id?: boolean
    episode_id?: boolean
    comment?: boolean
    created_at?: boolean
    content?: boolean | contentDefaultArgs<ExtArgs>
    episode?: boolean | episodeDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>



  export type commentSelectScalar = {
    id?: boolean
    user_id?: boolean
    content_id?: boolean
    episode_id?: boolean
    comment?: boolean
    created_at?: boolean
  }

  export type commentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "content_id" | "episode_id" | "comment" | "created_at", ExtArgs["result"]["comment"]>
  export type commentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    content?: boolean | contentDefaultArgs<ExtArgs>
    episode?: boolean | episodeDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $commentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "comment"
    objects: {
      content: Prisma.$contentPayload<ExtArgs>
      episode: Prisma.$episodePayload<ExtArgs>
      user: Prisma.$userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      content_id: number
      episode_id: number
      comment: string
      created_at: Date
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type commentGetPayload<S extends boolean | null | undefined | commentDefaultArgs> = $Result.GetResult<Prisma.$commentPayload, S>

  type commentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<commentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface commentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['comment'], meta: { name: 'comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {commentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends commentFindUniqueArgs>(args: SelectSubset<T, commentFindUniqueArgs<ExtArgs>>): Prisma__commentClient<$Result.GetResult<Prisma.$commentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {commentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends commentFindUniqueOrThrowArgs>(args: SelectSubset<T, commentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__commentClient<$Result.GetResult<Prisma.$commentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends commentFindFirstArgs>(args?: SelectSubset<T, commentFindFirstArgs<ExtArgs>>): Prisma__commentClient<$Result.GetResult<Prisma.$commentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends commentFindFirstOrThrowArgs>(args?: SelectSubset<T, commentFindFirstOrThrowArgs<ExtArgs>>): Prisma__commentClient<$Result.GetResult<Prisma.$commentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends commentFindManyArgs>(args?: SelectSubset<T, commentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$commentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Comment.
     * @param {commentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends commentCreateArgs>(args: SelectSubset<T, commentCreateArgs<ExtArgs>>): Prisma__commentClient<$Result.GetResult<Prisma.$commentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Comments.
     * @param {commentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends commentCreateManyArgs>(args?: SelectSubset<T, commentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comment.
     * @param {commentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends commentDeleteArgs>(args: SelectSubset<T, commentDeleteArgs<ExtArgs>>): Prisma__commentClient<$Result.GetResult<Prisma.$commentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Comment.
     * @param {commentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends commentUpdateArgs>(args: SelectSubset<T, commentUpdateArgs<ExtArgs>>): Prisma__commentClient<$Result.GetResult<Prisma.$commentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Comments.
     * @param {commentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends commentDeleteManyArgs>(args?: SelectSubset<T, commentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends commentUpdateManyArgs>(args: SelectSubset<T, commentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {commentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends commentUpsertArgs>(args: SelectSubset<T, commentUpsertArgs<ExtArgs>>): Prisma__commentClient<$Result.GetResult<Prisma.$commentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends commentCountArgs>(
      args?: Subset<T, commentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends commentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: commentGroupByArgs['orderBy'] }
        : { orderBy?: commentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, commentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the comment model
   */
  readonly fields: commentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__commentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    content<T extends contentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, contentDefaultArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    episode<T extends episodeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, episodeDefaultArgs<ExtArgs>>): Prisma__episodeClient<$Result.GetResult<Prisma.$episodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the comment model
   */
  interface commentFieldRefs {
    readonly id: FieldRef<"comment", 'Int'>
    readonly user_id: FieldRef<"comment", 'Int'>
    readonly content_id: FieldRef<"comment", 'Int'>
    readonly episode_id: FieldRef<"comment", 'Int'>
    readonly comment: FieldRef<"comment", 'String'>
    readonly created_at: FieldRef<"comment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * comment findUnique
   */
  export type commentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
    /**
     * Filter, which comment to fetch.
     */
    where: commentWhereUniqueInput
  }

  /**
   * comment findUniqueOrThrow
   */
  export type commentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
    /**
     * Filter, which comment to fetch.
     */
    where: commentWhereUniqueInput
  }

  /**
   * comment findFirst
   */
  export type commentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
    /**
     * Filter, which comment to fetch.
     */
    where?: commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: commentOrderByWithRelationInput | commentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for comments.
     */
    cursor?: commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * comment findFirstOrThrow
   */
  export type commentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
    /**
     * Filter, which comment to fetch.
     */
    where?: commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: commentOrderByWithRelationInput | commentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for comments.
     */
    cursor?: commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * comment findMany
   */
  export type commentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
    /**
     * Filter, which comments to fetch.
     */
    where?: commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: commentOrderByWithRelationInput | commentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing comments.
     */
    cursor?: commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * comment create
   */
  export type commentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
    /**
     * The data needed to create a comment.
     */
    data: XOR<commentCreateInput, commentUncheckedCreateInput>
  }

  /**
   * comment createMany
   */
  export type commentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many comments.
     */
    data: commentCreateManyInput | commentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * comment update
   */
  export type commentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
    /**
     * The data needed to update a comment.
     */
    data: XOR<commentUpdateInput, commentUncheckedUpdateInput>
    /**
     * Choose, which comment to update.
     */
    where: commentWhereUniqueInput
  }

  /**
   * comment updateMany
   */
  export type commentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update comments.
     */
    data: XOR<commentUpdateManyMutationInput, commentUncheckedUpdateManyInput>
    /**
     * Filter which comments to update
     */
    where?: commentWhereInput
    /**
     * Limit how many comments to update.
     */
    limit?: number
  }

  /**
   * comment upsert
   */
  export type commentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
    /**
     * The filter to search for the comment to update in case it exists.
     */
    where: commentWhereUniqueInput
    /**
     * In case the comment found by the `where` argument doesn't exist, create a new comment with this data.
     */
    create: XOR<commentCreateInput, commentUncheckedCreateInput>
    /**
     * In case the comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<commentUpdateInput, commentUncheckedUpdateInput>
  }

  /**
   * comment delete
   */
  export type commentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
    /**
     * Filter which comment to delete.
     */
    where: commentWhereUniqueInput
  }

  /**
   * comment deleteMany
   */
  export type commentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which comments to delete
     */
    where?: commentWhereInput
    /**
     * Limit how many comments to delete.
     */
    limit?: number
  }

  /**
   * comment without action
   */
  export type commentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
  }


  /**
   * Model content
   */

  export type AggregateContent = {
    _count: ContentCountAggregateOutputType | null
    _avg: ContentAvgAggregateOutputType | null
    _sum: ContentSumAggregateOutputType | null
    _min: ContentMinAggregateOutputType | null
    _max: ContentMaxAggregateOutputType | null
  }

  export type ContentAvgAggregateOutputType = {
    id: number | null
    release_year: number | null
    score: number | null
    duration_minutes: number | null
    num_seasons: number | null
    num_episodes: number | null
  }

  export type ContentSumAggregateOutputType = {
    id: number | null
    release_year: number | null
    score: number | null
    duration_minutes: number | null
    num_seasons: number | null
    num_episodes: number | null
  }

  export type ContentMinAggregateOutputType = {
    id: number | null
    title: string | null
    slug: string | null
    title_english: string | null
    title_japanese: string | null
    description: string | null
    type: $Enums.content_type | null
    release_year: number | null
    season_name: $Enums.content_season_name | null
    studios: string | null
    actor: string | null
    score: number | null
    thumbnail_url: string | null
    backdrop_url: string | null
    video_url: string | null
    created_at: Date | null
    duration_minutes: number | null
    num_seasons: number | null
    num_episodes: number | null
  }

  export type ContentMaxAggregateOutputType = {
    id: number | null
    title: string | null
    slug: string | null
    title_english: string | null
    title_japanese: string | null
    description: string | null
    type: $Enums.content_type | null
    release_year: number | null
    season_name: $Enums.content_season_name | null
    studios: string | null
    actor: string | null
    score: number | null
    thumbnail_url: string | null
    backdrop_url: string | null
    video_url: string | null
    created_at: Date | null
    duration_minutes: number | null
    num_seasons: number | null
    num_episodes: number | null
  }

  export type ContentCountAggregateOutputType = {
    id: number
    title: number
    slug: number
    title_english: number
    title_japanese: number
    description: number
    type: number
    release_year: number
    season_name: number
    studios: number
    actor: number
    score: number
    thumbnail_url: number
    backdrop_url: number
    video_url: number
    created_at: number
    duration_minutes: number
    num_seasons: number
    num_episodes: number
    _all: number
  }


  export type ContentAvgAggregateInputType = {
    id?: true
    release_year?: true
    score?: true
    duration_minutes?: true
    num_seasons?: true
    num_episodes?: true
  }

  export type ContentSumAggregateInputType = {
    id?: true
    release_year?: true
    score?: true
    duration_minutes?: true
    num_seasons?: true
    num_episodes?: true
  }

  export type ContentMinAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    title_english?: true
    title_japanese?: true
    description?: true
    type?: true
    release_year?: true
    season_name?: true
    studios?: true
    actor?: true
    score?: true
    thumbnail_url?: true
    backdrop_url?: true
    video_url?: true
    created_at?: true
    duration_minutes?: true
    num_seasons?: true
    num_episodes?: true
  }

  export type ContentMaxAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    title_english?: true
    title_japanese?: true
    description?: true
    type?: true
    release_year?: true
    season_name?: true
    studios?: true
    actor?: true
    score?: true
    thumbnail_url?: true
    backdrop_url?: true
    video_url?: true
    created_at?: true
    duration_minutes?: true
    num_seasons?: true
    num_episodes?: true
  }

  export type ContentCountAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    title_english?: true
    title_japanese?: true
    description?: true
    type?: true
    release_year?: true
    season_name?: true
    studios?: true
    actor?: true
    score?: true
    thumbnail_url?: true
    backdrop_url?: true
    video_url?: true
    created_at?: true
    duration_minutes?: true
    num_seasons?: true
    num_episodes?: true
    _all?: true
  }

  export type ContentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which content to aggregate.
     */
    where?: contentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contents to fetch.
     */
    orderBy?: contentOrderByWithRelationInput | contentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: contentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned contents
    **/
    _count?: true | ContentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContentMaxAggregateInputType
  }

  export type GetContentAggregateType<T extends ContentAggregateArgs> = {
        [P in keyof T & keyof AggregateContent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContent[P]>
      : GetScalarType<T[P], AggregateContent[P]>
  }




  export type contentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: contentWhereInput
    orderBy?: contentOrderByWithAggregationInput | contentOrderByWithAggregationInput[]
    by: ContentScalarFieldEnum[] | ContentScalarFieldEnum
    having?: contentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContentCountAggregateInputType | true
    _avg?: ContentAvgAggregateInputType
    _sum?: ContentSumAggregateInputType
    _min?: ContentMinAggregateInputType
    _max?: ContentMaxAggregateInputType
  }

  export type ContentGroupByOutputType = {
    id: number
    title: string
    slug: string
    title_english: string | null
    title_japanese: string | null
    description: string | null
    type: $Enums.content_type
    release_year: number | null
    season_name: $Enums.content_season_name | null
    studios: string | null
    actor: string | null
    score: number | null
    thumbnail_url: string | null
    backdrop_url: string | null
    video_url: string | null
    created_at: Date
    duration_minutes: number | null
    num_seasons: number | null
    num_episodes: number | null
    _count: ContentCountAggregateOutputType | null
    _avg: ContentAvgAggregateOutputType | null
    _sum: ContentSumAggregateOutputType | null
    _min: ContentMinAggregateOutputType | null
    _max: ContentMaxAggregateOutputType | null
  }

  type GetContentGroupByPayload<T extends contentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContentGroupByOutputType[P]>
            : GetScalarType<T[P], ContentGroupByOutputType[P]>
        }
      >
    >


  export type contentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    slug?: boolean
    title_english?: boolean
    title_japanese?: boolean
    description?: boolean
    type?: boolean
    release_year?: boolean
    season_name?: boolean
    studios?: boolean
    actor?: boolean
    score?: boolean
    thumbnail_url?: boolean
    backdrop_url?: boolean
    video_url?: boolean
    created_at?: boolean
    duration_minutes?: boolean
    num_seasons?: boolean
    num_episodes?: boolean
    bookmark?: boolean | content$bookmarkArgs<ExtArgs>
    comment?: boolean | content$commentArgs<ExtArgs>
    contentgenre?: boolean | content$contentgenreArgs<ExtArgs>
    episode?: boolean | content$episodeArgs<ExtArgs>
    rating?: boolean | content$ratingArgs<ExtArgs>
    reportcontent?: boolean | content$reportcontentArgs<ExtArgs>
    season?: boolean | content$seasonArgs<ExtArgs>
    subtitle?: boolean | content$subtitleArgs<ExtArgs>
    trendingcontent?: boolean | content$trendingcontentArgs<ExtArgs>
    watchhistory?: boolean | content$watchhistoryArgs<ExtArgs>
    _count?: boolean | ContentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["content"]>



  export type contentSelectScalar = {
    id?: boolean
    title?: boolean
    slug?: boolean
    title_english?: boolean
    title_japanese?: boolean
    description?: boolean
    type?: boolean
    release_year?: boolean
    season_name?: boolean
    studios?: boolean
    actor?: boolean
    score?: boolean
    thumbnail_url?: boolean
    backdrop_url?: boolean
    video_url?: boolean
    created_at?: boolean
    duration_minutes?: boolean
    num_seasons?: boolean
    num_episodes?: boolean
  }

  export type contentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "slug" | "title_english" | "title_japanese" | "description" | "type" | "release_year" | "season_name" | "studios" | "actor" | "score" | "thumbnail_url" | "backdrop_url" | "video_url" | "created_at" | "duration_minutes" | "num_seasons" | "num_episodes", ExtArgs["result"]["content"]>
  export type contentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookmark?: boolean | content$bookmarkArgs<ExtArgs>
    comment?: boolean | content$commentArgs<ExtArgs>
    contentgenre?: boolean | content$contentgenreArgs<ExtArgs>
    episode?: boolean | content$episodeArgs<ExtArgs>
    rating?: boolean | content$ratingArgs<ExtArgs>
    reportcontent?: boolean | content$reportcontentArgs<ExtArgs>
    season?: boolean | content$seasonArgs<ExtArgs>
    subtitle?: boolean | content$subtitleArgs<ExtArgs>
    trendingcontent?: boolean | content$trendingcontentArgs<ExtArgs>
    watchhistory?: boolean | content$watchhistoryArgs<ExtArgs>
    _count?: boolean | ContentCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $contentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "content"
    objects: {
      bookmark: Prisma.$bookmarkPayload<ExtArgs>[]
      comment: Prisma.$commentPayload<ExtArgs>[]
      contentgenre: Prisma.$contentgenrePayload<ExtArgs>[]
      episode: Prisma.$episodePayload<ExtArgs>[]
      rating: Prisma.$ratingPayload<ExtArgs>[]
      reportcontent: Prisma.$reportcontentPayload<ExtArgs>[]
      season: Prisma.$seasonPayload<ExtArgs>[]
      subtitle: Prisma.$subtitlePayload<ExtArgs>[]
      trendingcontent: Prisma.$trendingcontentPayload<ExtArgs>[]
      watchhistory: Prisma.$watchhistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      slug: string
      title_english: string | null
      title_japanese: string | null
      description: string | null
      type: $Enums.content_type
      release_year: number | null
      season_name: $Enums.content_season_name | null
      studios: string | null
      actor: string | null
      score: number | null
      thumbnail_url: string | null
      backdrop_url: string | null
      video_url: string | null
      created_at: Date
      duration_minutes: number | null
      num_seasons: number | null
      num_episodes: number | null
    }, ExtArgs["result"]["content"]>
    composites: {}
  }

  type contentGetPayload<S extends boolean | null | undefined | contentDefaultArgs> = $Result.GetResult<Prisma.$contentPayload, S>

  type contentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<contentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContentCountAggregateInputType | true
    }

  export interface contentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['content'], meta: { name: 'content' } }
    /**
     * Find zero or one Content that matches the filter.
     * @param {contentFindUniqueArgs} args - Arguments to find a Content
     * @example
     * // Get one Content
     * const content = await prisma.content.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends contentFindUniqueArgs>(args: SelectSubset<T, contentFindUniqueArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Content that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {contentFindUniqueOrThrowArgs} args - Arguments to find a Content
     * @example
     * // Get one Content
     * const content = await prisma.content.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends contentFindUniqueOrThrowArgs>(args: SelectSubset<T, contentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Content that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contentFindFirstArgs} args - Arguments to find a Content
     * @example
     * // Get one Content
     * const content = await prisma.content.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends contentFindFirstArgs>(args?: SelectSubset<T, contentFindFirstArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Content that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contentFindFirstOrThrowArgs} args - Arguments to find a Content
     * @example
     * // Get one Content
     * const content = await prisma.content.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends contentFindFirstOrThrowArgs>(args?: SelectSubset<T, contentFindFirstOrThrowArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Contents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contents
     * const contents = await prisma.content.findMany()
     * 
     * // Get first 10 Contents
     * const contents = await prisma.content.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contentWithIdOnly = await prisma.content.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends contentFindManyArgs>(args?: SelectSubset<T, contentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Content.
     * @param {contentCreateArgs} args - Arguments to create a Content.
     * @example
     * // Create one Content
     * const Content = await prisma.content.create({
     *   data: {
     *     // ... data to create a Content
     *   }
     * })
     * 
     */
    create<T extends contentCreateArgs>(args: SelectSubset<T, contentCreateArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Contents.
     * @param {contentCreateManyArgs} args - Arguments to create many Contents.
     * @example
     * // Create many Contents
     * const content = await prisma.content.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends contentCreateManyArgs>(args?: SelectSubset<T, contentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Content.
     * @param {contentDeleteArgs} args - Arguments to delete one Content.
     * @example
     * // Delete one Content
     * const Content = await prisma.content.delete({
     *   where: {
     *     // ... filter to delete one Content
     *   }
     * })
     * 
     */
    delete<T extends contentDeleteArgs>(args: SelectSubset<T, contentDeleteArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Content.
     * @param {contentUpdateArgs} args - Arguments to update one Content.
     * @example
     * // Update one Content
     * const content = await prisma.content.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends contentUpdateArgs>(args: SelectSubset<T, contentUpdateArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Contents.
     * @param {contentDeleteManyArgs} args - Arguments to filter Contents to delete.
     * @example
     * // Delete a few Contents
     * const { count } = await prisma.content.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends contentDeleteManyArgs>(args?: SelectSubset<T, contentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contents
     * const content = await prisma.content.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends contentUpdateManyArgs>(args: SelectSubset<T, contentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Content.
     * @param {contentUpsertArgs} args - Arguments to update or create a Content.
     * @example
     * // Update or create a Content
     * const content = await prisma.content.upsert({
     *   create: {
     *     // ... data to create a Content
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Content we want to update
     *   }
     * })
     */
    upsert<T extends contentUpsertArgs>(args: SelectSubset<T, contentUpsertArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Contents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contentCountArgs} args - Arguments to filter Contents to count.
     * @example
     * // Count the number of Contents
     * const count = await prisma.content.count({
     *   where: {
     *     // ... the filter for the Contents we want to count
     *   }
     * })
    **/
    count<T extends contentCountArgs>(
      args?: Subset<T, contentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Content.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContentAggregateArgs>(args: Subset<T, ContentAggregateArgs>): Prisma.PrismaPromise<GetContentAggregateType<T>>

    /**
     * Group by Content.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends contentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: contentGroupByArgs['orderBy'] }
        : { orderBy?: contentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, contentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the content model
   */
  readonly fields: contentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for content.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__contentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bookmark<T extends content$bookmarkArgs<ExtArgs> = {}>(args?: Subset<T, content$bookmarkArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bookmarkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comment<T extends content$commentArgs<ExtArgs> = {}>(args?: Subset<T, content$commentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$commentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    contentgenre<T extends content$contentgenreArgs<ExtArgs> = {}>(args?: Subset<T, content$contentgenreArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contentgenrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    episode<T extends content$episodeArgs<ExtArgs> = {}>(args?: Subset<T, content$episodeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$episodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rating<T extends content$ratingArgs<ExtArgs> = {}>(args?: Subset<T, content$ratingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ratingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reportcontent<T extends content$reportcontentArgs<ExtArgs> = {}>(args?: Subset<T, content$reportcontentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reportcontentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    season<T extends content$seasonArgs<ExtArgs> = {}>(args?: Subset<T, content$seasonArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$seasonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    subtitle<T extends content$subtitleArgs<ExtArgs> = {}>(args?: Subset<T, content$subtitleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$subtitlePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    trendingcontent<T extends content$trendingcontentArgs<ExtArgs> = {}>(args?: Subset<T, content$trendingcontentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$trendingcontentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    watchhistory<T extends content$watchhistoryArgs<ExtArgs> = {}>(args?: Subset<T, content$watchhistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$watchhistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the content model
   */
  interface contentFieldRefs {
    readonly id: FieldRef<"content", 'Int'>
    readonly title: FieldRef<"content", 'String'>
    readonly slug: FieldRef<"content", 'String'>
    readonly title_english: FieldRef<"content", 'String'>
    readonly title_japanese: FieldRef<"content", 'String'>
    readonly description: FieldRef<"content", 'String'>
    readonly type: FieldRef<"content", 'content_type'>
    readonly release_year: FieldRef<"content", 'Int'>
    readonly season_name: FieldRef<"content", 'content_season_name'>
    readonly studios: FieldRef<"content", 'String'>
    readonly actor: FieldRef<"content", 'String'>
    readonly score: FieldRef<"content", 'Float'>
    readonly thumbnail_url: FieldRef<"content", 'String'>
    readonly backdrop_url: FieldRef<"content", 'String'>
    readonly video_url: FieldRef<"content", 'String'>
    readonly created_at: FieldRef<"content", 'DateTime'>
    readonly duration_minutes: FieldRef<"content", 'Int'>
    readonly num_seasons: FieldRef<"content", 'Int'>
    readonly num_episodes: FieldRef<"content", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * content findUnique
   */
  export type contentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the content
     */
    select?: contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the content
     */
    omit?: contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentInclude<ExtArgs> | null
    /**
     * Filter, which content to fetch.
     */
    where: contentWhereUniqueInput
  }

  /**
   * content findUniqueOrThrow
   */
  export type contentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the content
     */
    select?: contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the content
     */
    omit?: contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentInclude<ExtArgs> | null
    /**
     * Filter, which content to fetch.
     */
    where: contentWhereUniqueInput
  }

  /**
   * content findFirst
   */
  export type contentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the content
     */
    select?: contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the content
     */
    omit?: contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentInclude<ExtArgs> | null
    /**
     * Filter, which content to fetch.
     */
    where?: contentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contents to fetch.
     */
    orderBy?: contentOrderByWithRelationInput | contentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for contents.
     */
    cursor?: contentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of contents.
     */
    distinct?: ContentScalarFieldEnum | ContentScalarFieldEnum[]
  }

  /**
   * content findFirstOrThrow
   */
  export type contentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the content
     */
    select?: contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the content
     */
    omit?: contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentInclude<ExtArgs> | null
    /**
     * Filter, which content to fetch.
     */
    where?: contentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contents to fetch.
     */
    orderBy?: contentOrderByWithRelationInput | contentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for contents.
     */
    cursor?: contentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of contents.
     */
    distinct?: ContentScalarFieldEnum | ContentScalarFieldEnum[]
  }

  /**
   * content findMany
   */
  export type contentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the content
     */
    select?: contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the content
     */
    omit?: contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentInclude<ExtArgs> | null
    /**
     * Filter, which contents to fetch.
     */
    where?: contentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contents to fetch.
     */
    orderBy?: contentOrderByWithRelationInput | contentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing contents.
     */
    cursor?: contentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contents.
     */
    skip?: number
    distinct?: ContentScalarFieldEnum | ContentScalarFieldEnum[]
  }

  /**
   * content create
   */
  export type contentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the content
     */
    select?: contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the content
     */
    omit?: contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentInclude<ExtArgs> | null
    /**
     * The data needed to create a content.
     */
    data: XOR<contentCreateInput, contentUncheckedCreateInput>
  }

  /**
   * content createMany
   */
  export type contentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many contents.
     */
    data: contentCreateManyInput | contentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * content update
   */
  export type contentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the content
     */
    select?: contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the content
     */
    omit?: contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentInclude<ExtArgs> | null
    /**
     * The data needed to update a content.
     */
    data: XOR<contentUpdateInput, contentUncheckedUpdateInput>
    /**
     * Choose, which content to update.
     */
    where: contentWhereUniqueInput
  }

  /**
   * content updateMany
   */
  export type contentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update contents.
     */
    data: XOR<contentUpdateManyMutationInput, contentUncheckedUpdateManyInput>
    /**
     * Filter which contents to update
     */
    where?: contentWhereInput
    /**
     * Limit how many contents to update.
     */
    limit?: number
  }

  /**
   * content upsert
   */
  export type contentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the content
     */
    select?: contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the content
     */
    omit?: contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentInclude<ExtArgs> | null
    /**
     * The filter to search for the content to update in case it exists.
     */
    where: contentWhereUniqueInput
    /**
     * In case the content found by the `where` argument doesn't exist, create a new content with this data.
     */
    create: XOR<contentCreateInput, contentUncheckedCreateInput>
    /**
     * In case the content was found with the provided `where` argument, update it with this data.
     */
    update: XOR<contentUpdateInput, contentUncheckedUpdateInput>
  }

  /**
   * content delete
   */
  export type contentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the content
     */
    select?: contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the content
     */
    omit?: contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentInclude<ExtArgs> | null
    /**
     * Filter which content to delete.
     */
    where: contentWhereUniqueInput
  }

  /**
   * content deleteMany
   */
  export type contentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which contents to delete
     */
    where?: contentWhereInput
    /**
     * Limit how many contents to delete.
     */
    limit?: number
  }

  /**
   * content.bookmark
   */
  export type content$bookmarkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bookmark
     */
    select?: bookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bookmark
     */
    omit?: bookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bookmarkInclude<ExtArgs> | null
    where?: bookmarkWhereInput
    orderBy?: bookmarkOrderByWithRelationInput | bookmarkOrderByWithRelationInput[]
    cursor?: bookmarkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * content.comment
   */
  export type content$commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
    where?: commentWhereInput
    orderBy?: commentOrderByWithRelationInput | commentOrderByWithRelationInput[]
    cursor?: commentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * content.contentgenre
   */
  export type content$contentgenreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contentgenre
     */
    select?: contentgenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contentgenre
     */
    omit?: contentgenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentgenreInclude<ExtArgs> | null
    where?: contentgenreWhereInput
    orderBy?: contentgenreOrderByWithRelationInput | contentgenreOrderByWithRelationInput[]
    cursor?: contentgenreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContentgenreScalarFieldEnum | ContentgenreScalarFieldEnum[]
  }

  /**
   * content.episode
   */
  export type content$episodeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episode
     */
    select?: episodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the episode
     */
    omit?: episodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodeInclude<ExtArgs> | null
    where?: episodeWhereInput
    orderBy?: episodeOrderByWithRelationInput | episodeOrderByWithRelationInput[]
    cursor?: episodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EpisodeScalarFieldEnum | EpisodeScalarFieldEnum[]
  }

  /**
   * content.rating
   */
  export type content$ratingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rating
     */
    select?: ratingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rating
     */
    omit?: ratingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ratingInclude<ExtArgs> | null
    where?: ratingWhereInput
    orderBy?: ratingOrderByWithRelationInput | ratingOrderByWithRelationInput[]
    cursor?: ratingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * content.reportcontent
   */
  export type content$reportcontentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reportcontent
     */
    select?: reportcontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reportcontent
     */
    omit?: reportcontentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportcontentInclude<ExtArgs> | null
    where?: reportcontentWhereInput
    orderBy?: reportcontentOrderByWithRelationInput | reportcontentOrderByWithRelationInput[]
    cursor?: reportcontentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportcontentScalarFieldEnum | ReportcontentScalarFieldEnum[]
  }

  /**
   * content.season
   */
  export type content$seasonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the season
     */
    select?: seasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the season
     */
    omit?: seasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seasonInclude<ExtArgs> | null
    where?: seasonWhereInput
    orderBy?: seasonOrderByWithRelationInput | seasonOrderByWithRelationInput[]
    cursor?: seasonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeasonScalarFieldEnum | SeasonScalarFieldEnum[]
  }

  /**
   * content.subtitle
   */
  export type content$subtitleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subtitle
     */
    select?: subtitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subtitle
     */
    omit?: subtitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subtitleInclude<ExtArgs> | null
    where?: subtitleWhereInput
    orderBy?: subtitleOrderByWithRelationInput | subtitleOrderByWithRelationInput[]
    cursor?: subtitleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubtitleScalarFieldEnum | SubtitleScalarFieldEnum[]
  }

  /**
   * content.trendingcontent
   */
  export type content$trendingcontentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trendingcontent
     */
    select?: trendingcontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trendingcontent
     */
    omit?: trendingcontentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trendingcontentInclude<ExtArgs> | null
    where?: trendingcontentWhereInput
    orderBy?: trendingcontentOrderByWithRelationInput | trendingcontentOrderByWithRelationInput[]
    cursor?: trendingcontentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrendingcontentScalarFieldEnum | TrendingcontentScalarFieldEnum[]
  }

  /**
   * content.watchhistory
   */
  export type content$watchhistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the watchhistory
     */
    select?: watchhistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the watchhistory
     */
    omit?: watchhistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: watchhistoryInclude<ExtArgs> | null
    where?: watchhistoryWhereInput
    orderBy?: watchhistoryOrderByWithRelationInput | watchhistoryOrderByWithRelationInput[]
    cursor?: watchhistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WatchhistoryScalarFieldEnum | WatchhistoryScalarFieldEnum[]
  }

  /**
   * content without action
   */
  export type contentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the content
     */
    select?: contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the content
     */
    omit?: contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentInclude<ExtArgs> | null
  }


  /**
   * Model contentgenre
   */

  export type AggregateContentgenre = {
    _count: ContentgenreCountAggregateOutputType | null
    _avg: ContentgenreAvgAggregateOutputType | null
    _sum: ContentgenreSumAggregateOutputType | null
    _min: ContentgenreMinAggregateOutputType | null
    _max: ContentgenreMaxAggregateOutputType | null
  }

  export type ContentgenreAvgAggregateOutputType = {
    content_id: number | null
    genre_id: number | null
  }

  export type ContentgenreSumAggregateOutputType = {
    content_id: number | null
    genre_id: number | null
  }

  export type ContentgenreMinAggregateOutputType = {
    content_id: number | null
    genre_id: number | null
  }

  export type ContentgenreMaxAggregateOutputType = {
    content_id: number | null
    genre_id: number | null
  }

  export type ContentgenreCountAggregateOutputType = {
    content_id: number
    genre_id: number
    _all: number
  }


  export type ContentgenreAvgAggregateInputType = {
    content_id?: true
    genre_id?: true
  }

  export type ContentgenreSumAggregateInputType = {
    content_id?: true
    genre_id?: true
  }

  export type ContentgenreMinAggregateInputType = {
    content_id?: true
    genre_id?: true
  }

  export type ContentgenreMaxAggregateInputType = {
    content_id?: true
    genre_id?: true
  }

  export type ContentgenreCountAggregateInputType = {
    content_id?: true
    genre_id?: true
    _all?: true
  }

  export type ContentgenreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which contentgenre to aggregate.
     */
    where?: contentgenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contentgenres to fetch.
     */
    orderBy?: contentgenreOrderByWithRelationInput | contentgenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: contentgenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contentgenres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contentgenres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned contentgenres
    **/
    _count?: true | ContentgenreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContentgenreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContentgenreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContentgenreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContentgenreMaxAggregateInputType
  }

  export type GetContentgenreAggregateType<T extends ContentgenreAggregateArgs> = {
        [P in keyof T & keyof AggregateContentgenre]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContentgenre[P]>
      : GetScalarType<T[P], AggregateContentgenre[P]>
  }




  export type contentgenreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: contentgenreWhereInput
    orderBy?: contentgenreOrderByWithAggregationInput | contentgenreOrderByWithAggregationInput[]
    by: ContentgenreScalarFieldEnum[] | ContentgenreScalarFieldEnum
    having?: contentgenreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContentgenreCountAggregateInputType | true
    _avg?: ContentgenreAvgAggregateInputType
    _sum?: ContentgenreSumAggregateInputType
    _min?: ContentgenreMinAggregateInputType
    _max?: ContentgenreMaxAggregateInputType
  }

  export type ContentgenreGroupByOutputType = {
    content_id: number
    genre_id: number
    _count: ContentgenreCountAggregateOutputType | null
    _avg: ContentgenreAvgAggregateOutputType | null
    _sum: ContentgenreSumAggregateOutputType | null
    _min: ContentgenreMinAggregateOutputType | null
    _max: ContentgenreMaxAggregateOutputType | null
  }

  type GetContentgenreGroupByPayload<T extends contentgenreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContentgenreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContentgenreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContentgenreGroupByOutputType[P]>
            : GetScalarType<T[P], ContentgenreGroupByOutputType[P]>
        }
      >
    >


  export type contentgenreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    content_id?: boolean
    genre_id?: boolean
    content?: boolean | contentDefaultArgs<ExtArgs>
    genre?: boolean | genreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contentgenre"]>



  export type contentgenreSelectScalar = {
    content_id?: boolean
    genre_id?: boolean
  }

  export type contentgenreOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"content_id" | "genre_id", ExtArgs["result"]["contentgenre"]>
  export type contentgenreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    content?: boolean | contentDefaultArgs<ExtArgs>
    genre?: boolean | genreDefaultArgs<ExtArgs>
  }

  export type $contentgenrePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "contentgenre"
    objects: {
      content: Prisma.$contentPayload<ExtArgs>
      genre: Prisma.$genrePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      content_id: number
      genre_id: number
    }, ExtArgs["result"]["contentgenre"]>
    composites: {}
  }

  type contentgenreGetPayload<S extends boolean | null | undefined | contentgenreDefaultArgs> = $Result.GetResult<Prisma.$contentgenrePayload, S>

  type contentgenreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<contentgenreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContentgenreCountAggregateInputType | true
    }

  export interface contentgenreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['contentgenre'], meta: { name: 'contentgenre' } }
    /**
     * Find zero or one Contentgenre that matches the filter.
     * @param {contentgenreFindUniqueArgs} args - Arguments to find a Contentgenre
     * @example
     * // Get one Contentgenre
     * const contentgenre = await prisma.contentgenre.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends contentgenreFindUniqueArgs>(args: SelectSubset<T, contentgenreFindUniqueArgs<ExtArgs>>): Prisma__contentgenreClient<$Result.GetResult<Prisma.$contentgenrePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Contentgenre that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {contentgenreFindUniqueOrThrowArgs} args - Arguments to find a Contentgenre
     * @example
     * // Get one Contentgenre
     * const contentgenre = await prisma.contentgenre.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends contentgenreFindUniqueOrThrowArgs>(args: SelectSubset<T, contentgenreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__contentgenreClient<$Result.GetResult<Prisma.$contentgenrePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contentgenre that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contentgenreFindFirstArgs} args - Arguments to find a Contentgenre
     * @example
     * // Get one Contentgenre
     * const contentgenre = await prisma.contentgenre.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends contentgenreFindFirstArgs>(args?: SelectSubset<T, contentgenreFindFirstArgs<ExtArgs>>): Prisma__contentgenreClient<$Result.GetResult<Prisma.$contentgenrePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contentgenre that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contentgenreFindFirstOrThrowArgs} args - Arguments to find a Contentgenre
     * @example
     * // Get one Contentgenre
     * const contentgenre = await prisma.contentgenre.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends contentgenreFindFirstOrThrowArgs>(args?: SelectSubset<T, contentgenreFindFirstOrThrowArgs<ExtArgs>>): Prisma__contentgenreClient<$Result.GetResult<Prisma.$contentgenrePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Contentgenres that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contentgenreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contentgenres
     * const contentgenres = await prisma.contentgenre.findMany()
     * 
     * // Get first 10 Contentgenres
     * const contentgenres = await prisma.contentgenre.findMany({ take: 10 })
     * 
     * // Only select the `content_id`
     * const contentgenreWithContent_idOnly = await prisma.contentgenre.findMany({ select: { content_id: true } })
     * 
     */
    findMany<T extends contentgenreFindManyArgs>(args?: SelectSubset<T, contentgenreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contentgenrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Contentgenre.
     * @param {contentgenreCreateArgs} args - Arguments to create a Contentgenre.
     * @example
     * // Create one Contentgenre
     * const Contentgenre = await prisma.contentgenre.create({
     *   data: {
     *     // ... data to create a Contentgenre
     *   }
     * })
     * 
     */
    create<T extends contentgenreCreateArgs>(args: SelectSubset<T, contentgenreCreateArgs<ExtArgs>>): Prisma__contentgenreClient<$Result.GetResult<Prisma.$contentgenrePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Contentgenres.
     * @param {contentgenreCreateManyArgs} args - Arguments to create many Contentgenres.
     * @example
     * // Create many Contentgenres
     * const contentgenre = await prisma.contentgenre.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends contentgenreCreateManyArgs>(args?: SelectSubset<T, contentgenreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Contentgenre.
     * @param {contentgenreDeleteArgs} args - Arguments to delete one Contentgenre.
     * @example
     * // Delete one Contentgenre
     * const Contentgenre = await prisma.contentgenre.delete({
     *   where: {
     *     // ... filter to delete one Contentgenre
     *   }
     * })
     * 
     */
    delete<T extends contentgenreDeleteArgs>(args: SelectSubset<T, contentgenreDeleteArgs<ExtArgs>>): Prisma__contentgenreClient<$Result.GetResult<Prisma.$contentgenrePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Contentgenre.
     * @param {contentgenreUpdateArgs} args - Arguments to update one Contentgenre.
     * @example
     * // Update one Contentgenre
     * const contentgenre = await prisma.contentgenre.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends contentgenreUpdateArgs>(args: SelectSubset<T, contentgenreUpdateArgs<ExtArgs>>): Prisma__contentgenreClient<$Result.GetResult<Prisma.$contentgenrePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Contentgenres.
     * @param {contentgenreDeleteManyArgs} args - Arguments to filter Contentgenres to delete.
     * @example
     * // Delete a few Contentgenres
     * const { count } = await prisma.contentgenre.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends contentgenreDeleteManyArgs>(args?: SelectSubset<T, contentgenreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contentgenres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contentgenreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contentgenres
     * const contentgenre = await prisma.contentgenre.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends contentgenreUpdateManyArgs>(args: SelectSubset<T, contentgenreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contentgenre.
     * @param {contentgenreUpsertArgs} args - Arguments to update or create a Contentgenre.
     * @example
     * // Update or create a Contentgenre
     * const contentgenre = await prisma.contentgenre.upsert({
     *   create: {
     *     // ... data to create a Contentgenre
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contentgenre we want to update
     *   }
     * })
     */
    upsert<T extends contentgenreUpsertArgs>(args: SelectSubset<T, contentgenreUpsertArgs<ExtArgs>>): Prisma__contentgenreClient<$Result.GetResult<Prisma.$contentgenrePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Contentgenres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contentgenreCountArgs} args - Arguments to filter Contentgenres to count.
     * @example
     * // Count the number of Contentgenres
     * const count = await prisma.contentgenre.count({
     *   where: {
     *     // ... the filter for the Contentgenres we want to count
     *   }
     * })
    **/
    count<T extends contentgenreCountArgs>(
      args?: Subset<T, contentgenreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContentgenreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contentgenre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentgenreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContentgenreAggregateArgs>(args: Subset<T, ContentgenreAggregateArgs>): Prisma.PrismaPromise<GetContentgenreAggregateType<T>>

    /**
     * Group by Contentgenre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contentgenreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends contentgenreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: contentgenreGroupByArgs['orderBy'] }
        : { orderBy?: contentgenreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, contentgenreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContentgenreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the contentgenre model
   */
  readonly fields: contentgenreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for contentgenre.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__contentgenreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    content<T extends contentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, contentDefaultArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    genre<T extends genreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, genreDefaultArgs<ExtArgs>>): Prisma__genreClient<$Result.GetResult<Prisma.$genrePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the contentgenre model
   */
  interface contentgenreFieldRefs {
    readonly content_id: FieldRef<"contentgenre", 'Int'>
    readonly genre_id: FieldRef<"contentgenre", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * contentgenre findUnique
   */
  export type contentgenreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contentgenre
     */
    select?: contentgenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contentgenre
     */
    omit?: contentgenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentgenreInclude<ExtArgs> | null
    /**
     * Filter, which contentgenre to fetch.
     */
    where: contentgenreWhereUniqueInput
  }

  /**
   * contentgenre findUniqueOrThrow
   */
  export type contentgenreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contentgenre
     */
    select?: contentgenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contentgenre
     */
    omit?: contentgenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentgenreInclude<ExtArgs> | null
    /**
     * Filter, which contentgenre to fetch.
     */
    where: contentgenreWhereUniqueInput
  }

  /**
   * contentgenre findFirst
   */
  export type contentgenreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contentgenre
     */
    select?: contentgenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contentgenre
     */
    omit?: contentgenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentgenreInclude<ExtArgs> | null
    /**
     * Filter, which contentgenre to fetch.
     */
    where?: contentgenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contentgenres to fetch.
     */
    orderBy?: contentgenreOrderByWithRelationInput | contentgenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for contentgenres.
     */
    cursor?: contentgenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contentgenres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contentgenres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of contentgenres.
     */
    distinct?: ContentgenreScalarFieldEnum | ContentgenreScalarFieldEnum[]
  }

  /**
   * contentgenre findFirstOrThrow
   */
  export type contentgenreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contentgenre
     */
    select?: contentgenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contentgenre
     */
    omit?: contentgenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentgenreInclude<ExtArgs> | null
    /**
     * Filter, which contentgenre to fetch.
     */
    where?: contentgenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contentgenres to fetch.
     */
    orderBy?: contentgenreOrderByWithRelationInput | contentgenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for contentgenres.
     */
    cursor?: contentgenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contentgenres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contentgenres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of contentgenres.
     */
    distinct?: ContentgenreScalarFieldEnum | ContentgenreScalarFieldEnum[]
  }

  /**
   * contentgenre findMany
   */
  export type contentgenreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contentgenre
     */
    select?: contentgenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contentgenre
     */
    omit?: contentgenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentgenreInclude<ExtArgs> | null
    /**
     * Filter, which contentgenres to fetch.
     */
    where?: contentgenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contentgenres to fetch.
     */
    orderBy?: contentgenreOrderByWithRelationInput | contentgenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing contentgenres.
     */
    cursor?: contentgenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contentgenres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contentgenres.
     */
    skip?: number
    distinct?: ContentgenreScalarFieldEnum | ContentgenreScalarFieldEnum[]
  }

  /**
   * contentgenre create
   */
  export type contentgenreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contentgenre
     */
    select?: contentgenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contentgenre
     */
    omit?: contentgenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentgenreInclude<ExtArgs> | null
    /**
     * The data needed to create a contentgenre.
     */
    data: XOR<contentgenreCreateInput, contentgenreUncheckedCreateInput>
  }

  /**
   * contentgenre createMany
   */
  export type contentgenreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many contentgenres.
     */
    data: contentgenreCreateManyInput | contentgenreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * contentgenre update
   */
  export type contentgenreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contentgenre
     */
    select?: contentgenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contentgenre
     */
    omit?: contentgenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentgenreInclude<ExtArgs> | null
    /**
     * The data needed to update a contentgenre.
     */
    data: XOR<contentgenreUpdateInput, contentgenreUncheckedUpdateInput>
    /**
     * Choose, which contentgenre to update.
     */
    where: contentgenreWhereUniqueInput
  }

  /**
   * contentgenre updateMany
   */
  export type contentgenreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update contentgenres.
     */
    data: XOR<contentgenreUpdateManyMutationInput, contentgenreUncheckedUpdateManyInput>
    /**
     * Filter which contentgenres to update
     */
    where?: contentgenreWhereInput
    /**
     * Limit how many contentgenres to update.
     */
    limit?: number
  }

  /**
   * contentgenre upsert
   */
  export type contentgenreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contentgenre
     */
    select?: contentgenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contentgenre
     */
    omit?: contentgenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentgenreInclude<ExtArgs> | null
    /**
     * The filter to search for the contentgenre to update in case it exists.
     */
    where: contentgenreWhereUniqueInput
    /**
     * In case the contentgenre found by the `where` argument doesn't exist, create a new contentgenre with this data.
     */
    create: XOR<contentgenreCreateInput, contentgenreUncheckedCreateInput>
    /**
     * In case the contentgenre was found with the provided `where` argument, update it with this data.
     */
    update: XOR<contentgenreUpdateInput, contentgenreUncheckedUpdateInput>
  }

  /**
   * contentgenre delete
   */
  export type contentgenreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contentgenre
     */
    select?: contentgenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contentgenre
     */
    omit?: contentgenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentgenreInclude<ExtArgs> | null
    /**
     * Filter which contentgenre to delete.
     */
    where: contentgenreWhereUniqueInput
  }

  /**
   * contentgenre deleteMany
   */
  export type contentgenreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which contentgenres to delete
     */
    where?: contentgenreWhereInput
    /**
     * Limit how many contentgenres to delete.
     */
    limit?: number
  }

  /**
   * contentgenre without action
   */
  export type contentgenreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contentgenre
     */
    select?: contentgenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contentgenre
     */
    omit?: contentgenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentgenreInclude<ExtArgs> | null
  }


  /**
   * Model episode
   */

  export type AggregateEpisode = {
    _count: EpisodeCountAggregateOutputType | null
    _avg: EpisodeAvgAggregateOutputType | null
    _sum: EpisodeSumAggregateOutputType | null
    _min: EpisodeMinAggregateOutputType | null
    _max: EpisodeMaxAggregateOutputType | null
  }

  export type EpisodeAvgAggregateOutputType = {
    id: number | null
    content_id: number | null
    season: number | null
    episode_number: number | null
  }

  export type EpisodeSumAggregateOutputType = {
    id: number | null
    content_id: number | null
    season: number | null
    episode_number: number | null
  }

  export type EpisodeMinAggregateOutputType = {
    id: number | null
    content_id: number | null
    season: number | null
    episode_number: number | null
    title: string | null
    created_at: Date | null
  }

  export type EpisodeMaxAggregateOutputType = {
    id: number | null
    content_id: number | null
    season: number | null
    episode_number: number | null
    title: string | null
    created_at: Date | null
  }

  export type EpisodeCountAggregateOutputType = {
    id: number
    content_id: number
    season: number
    episode_number: number
    title: number
    created_at: number
    _all: number
  }


  export type EpisodeAvgAggregateInputType = {
    id?: true
    content_id?: true
    season?: true
    episode_number?: true
  }

  export type EpisodeSumAggregateInputType = {
    id?: true
    content_id?: true
    season?: true
    episode_number?: true
  }

  export type EpisodeMinAggregateInputType = {
    id?: true
    content_id?: true
    season?: true
    episode_number?: true
    title?: true
    created_at?: true
  }

  export type EpisodeMaxAggregateInputType = {
    id?: true
    content_id?: true
    season?: true
    episode_number?: true
    title?: true
    created_at?: true
  }

  export type EpisodeCountAggregateInputType = {
    id?: true
    content_id?: true
    season?: true
    episode_number?: true
    title?: true
    created_at?: true
    _all?: true
  }

  export type EpisodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which episode to aggregate.
     */
    where?: episodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of episodes to fetch.
     */
    orderBy?: episodeOrderByWithRelationInput | episodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: episodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` episodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` episodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned episodes
    **/
    _count?: true | EpisodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EpisodeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EpisodeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EpisodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EpisodeMaxAggregateInputType
  }

  export type GetEpisodeAggregateType<T extends EpisodeAggregateArgs> = {
        [P in keyof T & keyof AggregateEpisode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEpisode[P]>
      : GetScalarType<T[P], AggregateEpisode[P]>
  }




  export type episodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: episodeWhereInput
    orderBy?: episodeOrderByWithAggregationInput | episodeOrderByWithAggregationInput[]
    by: EpisodeScalarFieldEnum[] | EpisodeScalarFieldEnum
    having?: episodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EpisodeCountAggregateInputType | true
    _avg?: EpisodeAvgAggregateInputType
    _sum?: EpisodeSumAggregateInputType
    _min?: EpisodeMinAggregateInputType
    _max?: EpisodeMaxAggregateInputType
  }

  export type EpisodeGroupByOutputType = {
    id: number
    content_id: number
    season: number
    episode_number: number
    title: string | null
    created_at: Date
    _count: EpisodeCountAggregateOutputType | null
    _avg: EpisodeAvgAggregateOutputType | null
    _sum: EpisodeSumAggregateOutputType | null
    _min: EpisodeMinAggregateOutputType | null
    _max: EpisodeMaxAggregateOutputType | null
  }

  type GetEpisodeGroupByPayload<T extends episodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EpisodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EpisodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EpisodeGroupByOutputType[P]>
            : GetScalarType<T[P], EpisodeGroupByOutputType[P]>
        }
      >
    >


  export type episodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content_id?: boolean
    season?: boolean
    episode_number?: boolean
    title?: boolean
    created_at?: boolean
    comment?: boolean | episode$commentArgs<ExtArgs>
    content?: boolean | contentDefaultArgs<ExtArgs>
    episodesource?: boolean | episode$episodesourceArgs<ExtArgs>
    reportcontent?: boolean | episode$reportcontentArgs<ExtArgs>
    subtitle?: boolean | episode$subtitleArgs<ExtArgs>
    watchhistory?: boolean | episode$watchhistoryArgs<ExtArgs>
    _count?: boolean | EpisodeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["episode"]>



  export type episodeSelectScalar = {
    id?: boolean
    content_id?: boolean
    season?: boolean
    episode_number?: boolean
    title?: boolean
    created_at?: boolean
  }

  export type episodeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content_id" | "season" | "episode_number" | "title" | "created_at", ExtArgs["result"]["episode"]>
  export type episodeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comment?: boolean | episode$commentArgs<ExtArgs>
    content?: boolean | contentDefaultArgs<ExtArgs>
    episodesource?: boolean | episode$episodesourceArgs<ExtArgs>
    reportcontent?: boolean | episode$reportcontentArgs<ExtArgs>
    subtitle?: boolean | episode$subtitleArgs<ExtArgs>
    watchhistory?: boolean | episode$watchhistoryArgs<ExtArgs>
    _count?: boolean | EpisodeCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $episodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "episode"
    objects: {
      comment: Prisma.$commentPayload<ExtArgs>[]
      content: Prisma.$contentPayload<ExtArgs>
      episodesource: Prisma.$episodesourcePayload<ExtArgs>[]
      reportcontent: Prisma.$reportcontentPayload<ExtArgs>[]
      subtitle: Prisma.$subtitlePayload<ExtArgs>[]
      watchhistory: Prisma.$watchhistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      content_id: number
      season: number
      episode_number: number
      title: string | null
      created_at: Date
    }, ExtArgs["result"]["episode"]>
    composites: {}
  }

  type episodeGetPayload<S extends boolean | null | undefined | episodeDefaultArgs> = $Result.GetResult<Prisma.$episodePayload, S>

  type episodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<episodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EpisodeCountAggregateInputType | true
    }

  export interface episodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['episode'], meta: { name: 'episode' } }
    /**
     * Find zero or one Episode that matches the filter.
     * @param {episodeFindUniqueArgs} args - Arguments to find a Episode
     * @example
     * // Get one Episode
     * const episode = await prisma.episode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends episodeFindUniqueArgs>(args: SelectSubset<T, episodeFindUniqueArgs<ExtArgs>>): Prisma__episodeClient<$Result.GetResult<Prisma.$episodePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Episode that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {episodeFindUniqueOrThrowArgs} args - Arguments to find a Episode
     * @example
     * // Get one Episode
     * const episode = await prisma.episode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends episodeFindUniqueOrThrowArgs>(args: SelectSubset<T, episodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__episodeClient<$Result.GetResult<Prisma.$episodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Episode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {episodeFindFirstArgs} args - Arguments to find a Episode
     * @example
     * // Get one Episode
     * const episode = await prisma.episode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends episodeFindFirstArgs>(args?: SelectSubset<T, episodeFindFirstArgs<ExtArgs>>): Prisma__episodeClient<$Result.GetResult<Prisma.$episodePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Episode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {episodeFindFirstOrThrowArgs} args - Arguments to find a Episode
     * @example
     * // Get one Episode
     * const episode = await prisma.episode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends episodeFindFirstOrThrowArgs>(args?: SelectSubset<T, episodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__episodeClient<$Result.GetResult<Prisma.$episodePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Episodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {episodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Episodes
     * const episodes = await prisma.episode.findMany()
     * 
     * // Get first 10 Episodes
     * const episodes = await prisma.episode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const episodeWithIdOnly = await prisma.episode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends episodeFindManyArgs>(args?: SelectSubset<T, episodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$episodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Episode.
     * @param {episodeCreateArgs} args - Arguments to create a Episode.
     * @example
     * // Create one Episode
     * const Episode = await prisma.episode.create({
     *   data: {
     *     // ... data to create a Episode
     *   }
     * })
     * 
     */
    create<T extends episodeCreateArgs>(args: SelectSubset<T, episodeCreateArgs<ExtArgs>>): Prisma__episodeClient<$Result.GetResult<Prisma.$episodePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Episodes.
     * @param {episodeCreateManyArgs} args - Arguments to create many Episodes.
     * @example
     * // Create many Episodes
     * const episode = await prisma.episode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends episodeCreateManyArgs>(args?: SelectSubset<T, episodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Episode.
     * @param {episodeDeleteArgs} args - Arguments to delete one Episode.
     * @example
     * // Delete one Episode
     * const Episode = await prisma.episode.delete({
     *   where: {
     *     // ... filter to delete one Episode
     *   }
     * })
     * 
     */
    delete<T extends episodeDeleteArgs>(args: SelectSubset<T, episodeDeleteArgs<ExtArgs>>): Prisma__episodeClient<$Result.GetResult<Prisma.$episodePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Episode.
     * @param {episodeUpdateArgs} args - Arguments to update one Episode.
     * @example
     * // Update one Episode
     * const episode = await prisma.episode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends episodeUpdateArgs>(args: SelectSubset<T, episodeUpdateArgs<ExtArgs>>): Prisma__episodeClient<$Result.GetResult<Prisma.$episodePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Episodes.
     * @param {episodeDeleteManyArgs} args - Arguments to filter Episodes to delete.
     * @example
     * // Delete a few Episodes
     * const { count } = await prisma.episode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends episodeDeleteManyArgs>(args?: SelectSubset<T, episodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Episodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {episodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Episodes
     * const episode = await prisma.episode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends episodeUpdateManyArgs>(args: SelectSubset<T, episodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Episode.
     * @param {episodeUpsertArgs} args - Arguments to update or create a Episode.
     * @example
     * // Update or create a Episode
     * const episode = await prisma.episode.upsert({
     *   create: {
     *     // ... data to create a Episode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Episode we want to update
     *   }
     * })
     */
    upsert<T extends episodeUpsertArgs>(args: SelectSubset<T, episodeUpsertArgs<ExtArgs>>): Prisma__episodeClient<$Result.GetResult<Prisma.$episodePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Episodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {episodeCountArgs} args - Arguments to filter Episodes to count.
     * @example
     * // Count the number of Episodes
     * const count = await prisma.episode.count({
     *   where: {
     *     // ... the filter for the Episodes we want to count
     *   }
     * })
    **/
    count<T extends episodeCountArgs>(
      args?: Subset<T, episodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EpisodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Episode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EpisodeAggregateArgs>(args: Subset<T, EpisodeAggregateArgs>): Prisma.PrismaPromise<GetEpisodeAggregateType<T>>

    /**
     * Group by Episode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {episodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends episodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: episodeGroupByArgs['orderBy'] }
        : { orderBy?: episodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, episodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEpisodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the episode model
   */
  readonly fields: episodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for episode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__episodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    comment<T extends episode$commentArgs<ExtArgs> = {}>(args?: Subset<T, episode$commentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$commentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    content<T extends contentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, contentDefaultArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    episodesource<T extends episode$episodesourceArgs<ExtArgs> = {}>(args?: Subset<T, episode$episodesourceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$episodesourcePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reportcontent<T extends episode$reportcontentArgs<ExtArgs> = {}>(args?: Subset<T, episode$reportcontentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reportcontentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    subtitle<T extends episode$subtitleArgs<ExtArgs> = {}>(args?: Subset<T, episode$subtitleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$subtitlePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    watchhistory<T extends episode$watchhistoryArgs<ExtArgs> = {}>(args?: Subset<T, episode$watchhistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$watchhistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the episode model
   */
  interface episodeFieldRefs {
    readonly id: FieldRef<"episode", 'Int'>
    readonly content_id: FieldRef<"episode", 'Int'>
    readonly season: FieldRef<"episode", 'Int'>
    readonly episode_number: FieldRef<"episode", 'Int'>
    readonly title: FieldRef<"episode", 'String'>
    readonly created_at: FieldRef<"episode", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * episode findUnique
   */
  export type episodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episode
     */
    select?: episodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the episode
     */
    omit?: episodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodeInclude<ExtArgs> | null
    /**
     * Filter, which episode to fetch.
     */
    where: episodeWhereUniqueInput
  }

  /**
   * episode findUniqueOrThrow
   */
  export type episodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episode
     */
    select?: episodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the episode
     */
    omit?: episodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodeInclude<ExtArgs> | null
    /**
     * Filter, which episode to fetch.
     */
    where: episodeWhereUniqueInput
  }

  /**
   * episode findFirst
   */
  export type episodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episode
     */
    select?: episodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the episode
     */
    omit?: episodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodeInclude<ExtArgs> | null
    /**
     * Filter, which episode to fetch.
     */
    where?: episodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of episodes to fetch.
     */
    orderBy?: episodeOrderByWithRelationInput | episodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for episodes.
     */
    cursor?: episodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` episodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` episodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of episodes.
     */
    distinct?: EpisodeScalarFieldEnum | EpisodeScalarFieldEnum[]
  }

  /**
   * episode findFirstOrThrow
   */
  export type episodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episode
     */
    select?: episodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the episode
     */
    omit?: episodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodeInclude<ExtArgs> | null
    /**
     * Filter, which episode to fetch.
     */
    where?: episodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of episodes to fetch.
     */
    orderBy?: episodeOrderByWithRelationInput | episodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for episodes.
     */
    cursor?: episodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` episodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` episodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of episodes.
     */
    distinct?: EpisodeScalarFieldEnum | EpisodeScalarFieldEnum[]
  }

  /**
   * episode findMany
   */
  export type episodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episode
     */
    select?: episodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the episode
     */
    omit?: episodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodeInclude<ExtArgs> | null
    /**
     * Filter, which episodes to fetch.
     */
    where?: episodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of episodes to fetch.
     */
    orderBy?: episodeOrderByWithRelationInput | episodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing episodes.
     */
    cursor?: episodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` episodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` episodes.
     */
    skip?: number
    distinct?: EpisodeScalarFieldEnum | EpisodeScalarFieldEnum[]
  }

  /**
   * episode create
   */
  export type episodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episode
     */
    select?: episodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the episode
     */
    omit?: episodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodeInclude<ExtArgs> | null
    /**
     * The data needed to create a episode.
     */
    data: XOR<episodeCreateInput, episodeUncheckedCreateInput>
  }

  /**
   * episode createMany
   */
  export type episodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many episodes.
     */
    data: episodeCreateManyInput | episodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * episode update
   */
  export type episodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episode
     */
    select?: episodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the episode
     */
    omit?: episodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodeInclude<ExtArgs> | null
    /**
     * The data needed to update a episode.
     */
    data: XOR<episodeUpdateInput, episodeUncheckedUpdateInput>
    /**
     * Choose, which episode to update.
     */
    where: episodeWhereUniqueInput
  }

  /**
   * episode updateMany
   */
  export type episodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update episodes.
     */
    data: XOR<episodeUpdateManyMutationInput, episodeUncheckedUpdateManyInput>
    /**
     * Filter which episodes to update
     */
    where?: episodeWhereInput
    /**
     * Limit how many episodes to update.
     */
    limit?: number
  }

  /**
   * episode upsert
   */
  export type episodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episode
     */
    select?: episodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the episode
     */
    omit?: episodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodeInclude<ExtArgs> | null
    /**
     * The filter to search for the episode to update in case it exists.
     */
    where: episodeWhereUniqueInput
    /**
     * In case the episode found by the `where` argument doesn't exist, create a new episode with this data.
     */
    create: XOR<episodeCreateInput, episodeUncheckedCreateInput>
    /**
     * In case the episode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<episodeUpdateInput, episodeUncheckedUpdateInput>
  }

  /**
   * episode delete
   */
  export type episodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episode
     */
    select?: episodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the episode
     */
    omit?: episodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodeInclude<ExtArgs> | null
    /**
     * Filter which episode to delete.
     */
    where: episodeWhereUniqueInput
  }

  /**
   * episode deleteMany
   */
  export type episodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which episodes to delete
     */
    where?: episodeWhereInput
    /**
     * Limit how many episodes to delete.
     */
    limit?: number
  }

  /**
   * episode.comment
   */
  export type episode$commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
    where?: commentWhereInput
    orderBy?: commentOrderByWithRelationInput | commentOrderByWithRelationInput[]
    cursor?: commentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * episode.episodesource
   */
  export type episode$episodesourceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episodesource
     */
    select?: episodesourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the episodesource
     */
    omit?: episodesourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodesourceInclude<ExtArgs> | null
    where?: episodesourceWhereInput
    orderBy?: episodesourceOrderByWithRelationInput | episodesourceOrderByWithRelationInput[]
    cursor?: episodesourceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EpisodesourceScalarFieldEnum | EpisodesourceScalarFieldEnum[]
  }

  /**
   * episode.reportcontent
   */
  export type episode$reportcontentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reportcontent
     */
    select?: reportcontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reportcontent
     */
    omit?: reportcontentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportcontentInclude<ExtArgs> | null
    where?: reportcontentWhereInput
    orderBy?: reportcontentOrderByWithRelationInput | reportcontentOrderByWithRelationInput[]
    cursor?: reportcontentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportcontentScalarFieldEnum | ReportcontentScalarFieldEnum[]
  }

  /**
   * episode.subtitle
   */
  export type episode$subtitleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subtitle
     */
    select?: subtitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subtitle
     */
    omit?: subtitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subtitleInclude<ExtArgs> | null
    where?: subtitleWhereInput
    orderBy?: subtitleOrderByWithRelationInput | subtitleOrderByWithRelationInput[]
    cursor?: subtitleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubtitleScalarFieldEnum | SubtitleScalarFieldEnum[]
  }

  /**
   * episode.watchhistory
   */
  export type episode$watchhistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the watchhistory
     */
    select?: watchhistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the watchhistory
     */
    omit?: watchhistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: watchhistoryInclude<ExtArgs> | null
    where?: watchhistoryWhereInput
    orderBy?: watchhistoryOrderByWithRelationInput | watchhistoryOrderByWithRelationInput[]
    cursor?: watchhistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WatchhistoryScalarFieldEnum | WatchhistoryScalarFieldEnum[]
  }

  /**
   * episode without action
   */
  export type episodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episode
     */
    select?: episodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the episode
     */
    omit?: episodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodeInclude<ExtArgs> | null
  }


  /**
   * Model genre
   */

  export type AggregateGenre = {
    _count: GenreCountAggregateOutputType | null
    _avg: GenreAvgAggregateOutputType | null
    _sum: GenreSumAggregateOutputType | null
    _min: GenreMinAggregateOutputType | null
    _max: GenreMaxAggregateOutputType | null
  }

  export type GenreAvgAggregateOutputType = {
    id: number | null
  }

  export type GenreSumAggregateOutputType = {
    id: number | null
  }

  export type GenreMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type GenreMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type GenreCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type GenreAvgAggregateInputType = {
    id?: true
  }

  export type GenreSumAggregateInputType = {
    id?: true
  }

  export type GenreMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type GenreMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type GenreCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type GenreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which genre to aggregate.
     */
    where?: genreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of genres to fetch.
     */
    orderBy?: genreOrderByWithRelationInput | genreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: genreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` genres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` genres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned genres
    **/
    _count?: true | GenreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GenreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GenreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GenreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GenreMaxAggregateInputType
  }

  export type GetGenreAggregateType<T extends GenreAggregateArgs> = {
        [P in keyof T & keyof AggregateGenre]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGenre[P]>
      : GetScalarType<T[P], AggregateGenre[P]>
  }




  export type genreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: genreWhereInput
    orderBy?: genreOrderByWithAggregationInput | genreOrderByWithAggregationInput[]
    by: GenreScalarFieldEnum[] | GenreScalarFieldEnum
    having?: genreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GenreCountAggregateInputType | true
    _avg?: GenreAvgAggregateInputType
    _sum?: GenreSumAggregateInputType
    _min?: GenreMinAggregateInputType
    _max?: GenreMaxAggregateInputType
  }

  export type GenreGroupByOutputType = {
    id: number
    name: string
    _count: GenreCountAggregateOutputType | null
    _avg: GenreAvgAggregateOutputType | null
    _sum: GenreSumAggregateOutputType | null
    _min: GenreMinAggregateOutputType | null
    _max: GenreMaxAggregateOutputType | null
  }

  type GetGenreGroupByPayload<T extends genreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GenreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GenreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GenreGroupByOutputType[P]>
            : GetScalarType<T[P], GenreGroupByOutputType[P]>
        }
      >
    >


  export type genreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contentgenre?: boolean | genre$contentgenreArgs<ExtArgs>
    _count?: boolean | GenreCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["genre"]>



  export type genreSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type genreOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["genre"]>
  export type genreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contentgenre?: boolean | genre$contentgenreArgs<ExtArgs>
    _count?: boolean | GenreCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $genrePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "genre"
    objects: {
      contentgenre: Prisma.$contentgenrePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["genre"]>
    composites: {}
  }

  type genreGetPayload<S extends boolean | null | undefined | genreDefaultArgs> = $Result.GetResult<Prisma.$genrePayload, S>

  type genreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<genreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GenreCountAggregateInputType | true
    }

  export interface genreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['genre'], meta: { name: 'genre' } }
    /**
     * Find zero or one Genre that matches the filter.
     * @param {genreFindUniqueArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends genreFindUniqueArgs>(args: SelectSubset<T, genreFindUniqueArgs<ExtArgs>>): Prisma__genreClient<$Result.GetResult<Prisma.$genrePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Genre that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {genreFindUniqueOrThrowArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends genreFindUniqueOrThrowArgs>(args: SelectSubset<T, genreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__genreClient<$Result.GetResult<Prisma.$genrePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Genre that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {genreFindFirstArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends genreFindFirstArgs>(args?: SelectSubset<T, genreFindFirstArgs<ExtArgs>>): Prisma__genreClient<$Result.GetResult<Prisma.$genrePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Genre that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {genreFindFirstOrThrowArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends genreFindFirstOrThrowArgs>(args?: SelectSubset<T, genreFindFirstOrThrowArgs<ExtArgs>>): Prisma__genreClient<$Result.GetResult<Prisma.$genrePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Genres that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {genreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Genres
     * const genres = await prisma.genre.findMany()
     * 
     * // Get first 10 Genres
     * const genres = await prisma.genre.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const genreWithIdOnly = await prisma.genre.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends genreFindManyArgs>(args?: SelectSubset<T, genreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$genrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Genre.
     * @param {genreCreateArgs} args - Arguments to create a Genre.
     * @example
     * // Create one Genre
     * const Genre = await prisma.genre.create({
     *   data: {
     *     // ... data to create a Genre
     *   }
     * })
     * 
     */
    create<T extends genreCreateArgs>(args: SelectSubset<T, genreCreateArgs<ExtArgs>>): Prisma__genreClient<$Result.GetResult<Prisma.$genrePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Genres.
     * @param {genreCreateManyArgs} args - Arguments to create many Genres.
     * @example
     * // Create many Genres
     * const genre = await prisma.genre.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends genreCreateManyArgs>(args?: SelectSubset<T, genreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Genre.
     * @param {genreDeleteArgs} args - Arguments to delete one Genre.
     * @example
     * // Delete one Genre
     * const Genre = await prisma.genre.delete({
     *   where: {
     *     // ... filter to delete one Genre
     *   }
     * })
     * 
     */
    delete<T extends genreDeleteArgs>(args: SelectSubset<T, genreDeleteArgs<ExtArgs>>): Prisma__genreClient<$Result.GetResult<Prisma.$genrePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Genre.
     * @param {genreUpdateArgs} args - Arguments to update one Genre.
     * @example
     * // Update one Genre
     * const genre = await prisma.genre.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends genreUpdateArgs>(args: SelectSubset<T, genreUpdateArgs<ExtArgs>>): Prisma__genreClient<$Result.GetResult<Prisma.$genrePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Genres.
     * @param {genreDeleteManyArgs} args - Arguments to filter Genres to delete.
     * @example
     * // Delete a few Genres
     * const { count } = await prisma.genre.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends genreDeleteManyArgs>(args?: SelectSubset<T, genreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Genres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {genreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Genres
     * const genre = await prisma.genre.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends genreUpdateManyArgs>(args: SelectSubset<T, genreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Genre.
     * @param {genreUpsertArgs} args - Arguments to update or create a Genre.
     * @example
     * // Update or create a Genre
     * const genre = await prisma.genre.upsert({
     *   create: {
     *     // ... data to create a Genre
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Genre we want to update
     *   }
     * })
     */
    upsert<T extends genreUpsertArgs>(args: SelectSubset<T, genreUpsertArgs<ExtArgs>>): Prisma__genreClient<$Result.GetResult<Prisma.$genrePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Genres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {genreCountArgs} args - Arguments to filter Genres to count.
     * @example
     * // Count the number of Genres
     * const count = await prisma.genre.count({
     *   where: {
     *     // ... the filter for the Genres we want to count
     *   }
     * })
    **/
    count<T extends genreCountArgs>(
      args?: Subset<T, genreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GenreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Genre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GenreAggregateArgs>(args: Subset<T, GenreAggregateArgs>): Prisma.PrismaPromise<GetGenreAggregateType<T>>

    /**
     * Group by Genre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {genreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends genreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: genreGroupByArgs['orderBy'] }
        : { orderBy?: genreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, genreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGenreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the genre model
   */
  readonly fields: genreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for genre.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__genreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contentgenre<T extends genre$contentgenreArgs<ExtArgs> = {}>(args?: Subset<T, genre$contentgenreArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contentgenrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the genre model
   */
  interface genreFieldRefs {
    readonly id: FieldRef<"genre", 'Int'>
    readonly name: FieldRef<"genre", 'String'>
  }
    

  // Custom InputTypes
  /**
   * genre findUnique
   */
  export type genreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the genre
     */
    select?: genreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the genre
     */
    omit?: genreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: genreInclude<ExtArgs> | null
    /**
     * Filter, which genre to fetch.
     */
    where: genreWhereUniqueInput
  }

  /**
   * genre findUniqueOrThrow
   */
  export type genreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the genre
     */
    select?: genreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the genre
     */
    omit?: genreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: genreInclude<ExtArgs> | null
    /**
     * Filter, which genre to fetch.
     */
    where: genreWhereUniqueInput
  }

  /**
   * genre findFirst
   */
  export type genreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the genre
     */
    select?: genreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the genre
     */
    omit?: genreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: genreInclude<ExtArgs> | null
    /**
     * Filter, which genre to fetch.
     */
    where?: genreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of genres to fetch.
     */
    orderBy?: genreOrderByWithRelationInput | genreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for genres.
     */
    cursor?: genreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` genres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` genres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of genres.
     */
    distinct?: GenreScalarFieldEnum | GenreScalarFieldEnum[]
  }

  /**
   * genre findFirstOrThrow
   */
  export type genreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the genre
     */
    select?: genreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the genre
     */
    omit?: genreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: genreInclude<ExtArgs> | null
    /**
     * Filter, which genre to fetch.
     */
    where?: genreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of genres to fetch.
     */
    orderBy?: genreOrderByWithRelationInput | genreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for genres.
     */
    cursor?: genreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` genres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` genres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of genres.
     */
    distinct?: GenreScalarFieldEnum | GenreScalarFieldEnum[]
  }

  /**
   * genre findMany
   */
  export type genreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the genre
     */
    select?: genreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the genre
     */
    omit?: genreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: genreInclude<ExtArgs> | null
    /**
     * Filter, which genres to fetch.
     */
    where?: genreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of genres to fetch.
     */
    orderBy?: genreOrderByWithRelationInput | genreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing genres.
     */
    cursor?: genreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` genres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` genres.
     */
    skip?: number
    distinct?: GenreScalarFieldEnum | GenreScalarFieldEnum[]
  }

  /**
   * genre create
   */
  export type genreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the genre
     */
    select?: genreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the genre
     */
    omit?: genreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: genreInclude<ExtArgs> | null
    /**
     * The data needed to create a genre.
     */
    data: XOR<genreCreateInput, genreUncheckedCreateInput>
  }

  /**
   * genre createMany
   */
  export type genreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many genres.
     */
    data: genreCreateManyInput | genreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * genre update
   */
  export type genreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the genre
     */
    select?: genreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the genre
     */
    omit?: genreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: genreInclude<ExtArgs> | null
    /**
     * The data needed to update a genre.
     */
    data: XOR<genreUpdateInput, genreUncheckedUpdateInput>
    /**
     * Choose, which genre to update.
     */
    where: genreWhereUniqueInput
  }

  /**
   * genre updateMany
   */
  export type genreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update genres.
     */
    data: XOR<genreUpdateManyMutationInput, genreUncheckedUpdateManyInput>
    /**
     * Filter which genres to update
     */
    where?: genreWhereInput
    /**
     * Limit how many genres to update.
     */
    limit?: number
  }

  /**
   * genre upsert
   */
  export type genreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the genre
     */
    select?: genreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the genre
     */
    omit?: genreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: genreInclude<ExtArgs> | null
    /**
     * The filter to search for the genre to update in case it exists.
     */
    where: genreWhereUniqueInput
    /**
     * In case the genre found by the `where` argument doesn't exist, create a new genre with this data.
     */
    create: XOR<genreCreateInput, genreUncheckedCreateInput>
    /**
     * In case the genre was found with the provided `where` argument, update it with this data.
     */
    update: XOR<genreUpdateInput, genreUncheckedUpdateInput>
  }

  /**
   * genre delete
   */
  export type genreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the genre
     */
    select?: genreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the genre
     */
    omit?: genreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: genreInclude<ExtArgs> | null
    /**
     * Filter which genre to delete.
     */
    where: genreWhereUniqueInput
  }

  /**
   * genre deleteMany
   */
  export type genreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which genres to delete
     */
    where?: genreWhereInput
    /**
     * Limit how many genres to delete.
     */
    limit?: number
  }

  /**
   * genre.contentgenre
   */
  export type genre$contentgenreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contentgenre
     */
    select?: contentgenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contentgenre
     */
    omit?: contentgenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentgenreInclude<ExtArgs> | null
    where?: contentgenreWhereInput
    orderBy?: contentgenreOrderByWithRelationInput | contentgenreOrderByWithRelationInput[]
    cursor?: contentgenreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContentgenreScalarFieldEnum | ContentgenreScalarFieldEnum[]
  }

  /**
   * genre without action
   */
  export type genreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the genre
     */
    select?: genreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the genre
     */
    omit?: genreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: genreInclude<ExtArgs> | null
  }


  /**
   * Model notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    type: $Enums.notification_type | null
    message: string | null
    is_read: boolean | null
    created_at: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    type: $Enums.notification_type | null
    message: string | null
    is_read: boolean | null
    created_at: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    user_id: number
    type: number
    message: number
    is_read: number
    created_at: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    user_id?: true
    type?: true
    message?: true
    is_read?: true
    created_at?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    user_id?: true
    type?: true
    message?: true
    is_read?: true
    created_at?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    user_id?: true
    type?: true
    message?: true
    is_read?: true
    created_at?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which notification to aggregate.
     */
    where?: notificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationOrderByWithRelationInput | notificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: notificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type notificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: notificationWhereInput
    orderBy?: notificationOrderByWithAggregationInput | notificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: notificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: number
    user_id: number
    type: $Enums.notification_type
    message: string
    is_read: boolean
    created_at: Date
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends notificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type notificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    type?: boolean
    message?: boolean
    is_read?: boolean
    created_at?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>



  export type notificationSelectScalar = {
    id?: boolean
    user_id?: boolean
    type?: boolean
    message?: boolean
    is_read?: boolean
    created_at?: boolean
  }

  export type notificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "type" | "message" | "is_read" | "created_at", ExtArgs["result"]["notification"]>
  export type notificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $notificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "notification"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      type: $Enums.notification_type
      message: string
      is_read: boolean
      created_at: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type notificationGetPayload<S extends boolean | null | undefined | notificationDefaultArgs> = $Result.GetResult<Prisma.$notificationPayload, S>

  type notificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<notificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface notificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['notification'], meta: { name: 'notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {notificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends notificationFindUniqueArgs>(args: SelectSubset<T, notificationFindUniqueArgs<ExtArgs>>): Prisma__notificationClient<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {notificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends notificationFindUniqueOrThrowArgs>(args: SelectSubset<T, notificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__notificationClient<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends notificationFindFirstArgs>(args?: SelectSubset<T, notificationFindFirstArgs<ExtArgs>>): Prisma__notificationClient<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends notificationFindFirstOrThrowArgs>(args?: SelectSubset<T, notificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__notificationClient<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends notificationFindManyArgs>(args?: SelectSubset<T, notificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {notificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends notificationCreateArgs>(args: SelectSubset<T, notificationCreateArgs<ExtArgs>>): Prisma__notificationClient<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {notificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends notificationCreateManyArgs>(args?: SelectSubset<T, notificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {notificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends notificationDeleteArgs>(args: SelectSubset<T, notificationDeleteArgs<ExtArgs>>): Prisma__notificationClient<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {notificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends notificationUpdateArgs>(args: SelectSubset<T, notificationUpdateArgs<ExtArgs>>): Prisma__notificationClient<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {notificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends notificationDeleteManyArgs>(args?: SelectSubset<T, notificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends notificationUpdateManyArgs>(args: SelectSubset<T, notificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {notificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends notificationUpsertArgs>(args: SelectSubset<T, notificationUpsertArgs<ExtArgs>>): Prisma__notificationClient<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends notificationCountArgs>(
      args?: Subset<T, notificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends notificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: notificationGroupByArgs['orderBy'] }
        : { orderBy?: notificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, notificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the notification model
   */
  readonly fields: notificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__notificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the notification model
   */
  interface notificationFieldRefs {
    readonly id: FieldRef<"notification", 'Int'>
    readonly user_id: FieldRef<"notification", 'Int'>
    readonly type: FieldRef<"notification", 'notification_type'>
    readonly message: FieldRef<"notification", 'String'>
    readonly is_read: FieldRef<"notification", 'Boolean'>
    readonly created_at: FieldRef<"notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * notification findUnique
   */
  export type notificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * Filter, which notification to fetch.
     */
    where: notificationWhereUniqueInput
  }

  /**
   * notification findUniqueOrThrow
   */
  export type notificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * Filter, which notification to fetch.
     */
    where: notificationWhereUniqueInput
  }

  /**
   * notification findFirst
   */
  export type notificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * Filter, which notification to fetch.
     */
    where?: notificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationOrderByWithRelationInput | notificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for notifications.
     */
    cursor?: notificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * notification findFirstOrThrow
   */
  export type notificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * Filter, which notification to fetch.
     */
    where?: notificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationOrderByWithRelationInput | notificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for notifications.
     */
    cursor?: notificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * notification findMany
   */
  export type notificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * Filter, which notifications to fetch.
     */
    where?: notificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationOrderByWithRelationInput | notificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing notifications.
     */
    cursor?: notificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * notification create
   */
  export type notificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * The data needed to create a notification.
     */
    data: XOR<notificationCreateInput, notificationUncheckedCreateInput>
  }

  /**
   * notification createMany
   */
  export type notificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many notifications.
     */
    data: notificationCreateManyInput | notificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * notification update
   */
  export type notificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * The data needed to update a notification.
     */
    data: XOR<notificationUpdateInput, notificationUncheckedUpdateInput>
    /**
     * Choose, which notification to update.
     */
    where: notificationWhereUniqueInput
  }

  /**
   * notification updateMany
   */
  export type notificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update notifications.
     */
    data: XOR<notificationUpdateManyMutationInput, notificationUncheckedUpdateManyInput>
    /**
     * Filter which notifications to update
     */
    where?: notificationWhereInput
    /**
     * Limit how many notifications to update.
     */
    limit?: number
  }

  /**
   * notification upsert
   */
  export type notificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * The filter to search for the notification to update in case it exists.
     */
    where: notificationWhereUniqueInput
    /**
     * In case the notification found by the `where` argument doesn't exist, create a new notification with this data.
     */
    create: XOR<notificationCreateInput, notificationUncheckedCreateInput>
    /**
     * In case the notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<notificationUpdateInput, notificationUncheckedUpdateInput>
  }

  /**
   * notification delete
   */
  export type notificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * Filter which notification to delete.
     */
    where: notificationWhereUniqueInput
  }

  /**
   * notification deleteMany
   */
  export type notificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which notifications to delete
     */
    where?: notificationWhereInput
    /**
     * Limit how many notifications to delete.
     */
    limit?: number
  }

  /**
   * notification without action
   */
  export type notificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
  }


  /**
   * Model rating
   */

  export type AggregateRating = {
    _count: RatingCountAggregateOutputType | null
    _avg: RatingAvgAggregateOutputType | null
    _sum: RatingSumAggregateOutputType | null
    _min: RatingMinAggregateOutputType | null
    _max: RatingMaxAggregateOutputType | null
  }

  export type RatingAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    content_id: number | null
    rating: number | null
  }

  export type RatingSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    content_id: number | null
    rating: number | null
  }

  export type RatingMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    content_id: number | null
    rating: number | null
    comment: string | null
    created_at: Date | null
  }

  export type RatingMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    content_id: number | null
    rating: number | null
    comment: string | null
    created_at: Date | null
  }

  export type RatingCountAggregateOutputType = {
    id: number
    user_id: number
    content_id: number
    rating: number
    comment: number
    created_at: number
    _all: number
  }


  export type RatingAvgAggregateInputType = {
    id?: true
    user_id?: true
    content_id?: true
    rating?: true
  }

  export type RatingSumAggregateInputType = {
    id?: true
    user_id?: true
    content_id?: true
    rating?: true
  }

  export type RatingMinAggregateInputType = {
    id?: true
    user_id?: true
    content_id?: true
    rating?: true
    comment?: true
    created_at?: true
  }

  export type RatingMaxAggregateInputType = {
    id?: true
    user_id?: true
    content_id?: true
    rating?: true
    comment?: true
    created_at?: true
  }

  export type RatingCountAggregateInputType = {
    id?: true
    user_id?: true
    content_id?: true
    rating?: true
    comment?: true
    created_at?: true
    _all?: true
  }

  export type RatingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which rating to aggregate.
     */
    where?: ratingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ratings to fetch.
     */
    orderBy?: ratingOrderByWithRelationInput | ratingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ratingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ratings
    **/
    _count?: true | RatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RatingMaxAggregateInputType
  }

  export type GetRatingAggregateType<T extends RatingAggregateArgs> = {
        [P in keyof T & keyof AggregateRating]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRating[P]>
      : GetScalarType<T[P], AggregateRating[P]>
  }




  export type ratingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ratingWhereInput
    orderBy?: ratingOrderByWithAggregationInput | ratingOrderByWithAggregationInput[]
    by: RatingScalarFieldEnum[] | RatingScalarFieldEnum
    having?: ratingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RatingCountAggregateInputType | true
    _avg?: RatingAvgAggregateInputType
    _sum?: RatingSumAggregateInputType
    _min?: RatingMinAggregateInputType
    _max?: RatingMaxAggregateInputType
  }

  export type RatingGroupByOutputType = {
    id: number
    user_id: number
    content_id: number
    rating: number
    comment: string | null
    created_at: Date
    _count: RatingCountAggregateOutputType | null
    _avg: RatingAvgAggregateOutputType | null
    _sum: RatingSumAggregateOutputType | null
    _min: RatingMinAggregateOutputType | null
    _max: RatingMaxAggregateOutputType | null
  }

  type GetRatingGroupByPayload<T extends ratingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RatingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RatingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RatingGroupByOutputType[P]>
            : GetScalarType<T[P], RatingGroupByOutputType[P]>
        }
      >
    >


  export type ratingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    content_id?: boolean
    rating?: boolean
    comment?: boolean
    created_at?: boolean
    content?: boolean | contentDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rating"]>



  export type ratingSelectScalar = {
    id?: boolean
    user_id?: boolean
    content_id?: boolean
    rating?: boolean
    comment?: boolean
    created_at?: boolean
  }

  export type ratingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "content_id" | "rating" | "comment" | "created_at", ExtArgs["result"]["rating"]>
  export type ratingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    content?: boolean | contentDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $ratingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "rating"
    objects: {
      content: Prisma.$contentPayload<ExtArgs>
      user: Prisma.$userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      content_id: number
      rating: number
      comment: string | null
      created_at: Date
    }, ExtArgs["result"]["rating"]>
    composites: {}
  }

  type ratingGetPayload<S extends boolean | null | undefined | ratingDefaultArgs> = $Result.GetResult<Prisma.$ratingPayload, S>

  type ratingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ratingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RatingCountAggregateInputType | true
    }

  export interface ratingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['rating'], meta: { name: 'rating' } }
    /**
     * Find zero or one Rating that matches the filter.
     * @param {ratingFindUniqueArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ratingFindUniqueArgs>(args: SelectSubset<T, ratingFindUniqueArgs<ExtArgs>>): Prisma__ratingClient<$Result.GetResult<Prisma.$ratingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Rating that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ratingFindUniqueOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ratingFindUniqueOrThrowArgs>(args: SelectSubset<T, ratingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ratingClient<$Result.GetResult<Prisma.$ratingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Rating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ratingFindFirstArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ratingFindFirstArgs>(args?: SelectSubset<T, ratingFindFirstArgs<ExtArgs>>): Prisma__ratingClient<$Result.GetResult<Prisma.$ratingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Rating that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ratingFindFirstOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ratingFindFirstOrThrowArgs>(args?: SelectSubset<T, ratingFindFirstOrThrowArgs<ExtArgs>>): Prisma__ratingClient<$Result.GetResult<Prisma.$ratingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ratings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ratingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ratings
     * const ratings = await prisma.rating.findMany()
     * 
     * // Get first 10 Ratings
     * const ratings = await prisma.rating.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ratingWithIdOnly = await prisma.rating.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ratingFindManyArgs>(args?: SelectSubset<T, ratingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ratingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Rating.
     * @param {ratingCreateArgs} args - Arguments to create a Rating.
     * @example
     * // Create one Rating
     * const Rating = await prisma.rating.create({
     *   data: {
     *     // ... data to create a Rating
     *   }
     * })
     * 
     */
    create<T extends ratingCreateArgs>(args: SelectSubset<T, ratingCreateArgs<ExtArgs>>): Prisma__ratingClient<$Result.GetResult<Prisma.$ratingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ratings.
     * @param {ratingCreateManyArgs} args - Arguments to create many Ratings.
     * @example
     * // Create many Ratings
     * const rating = await prisma.rating.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ratingCreateManyArgs>(args?: SelectSubset<T, ratingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Rating.
     * @param {ratingDeleteArgs} args - Arguments to delete one Rating.
     * @example
     * // Delete one Rating
     * const Rating = await prisma.rating.delete({
     *   where: {
     *     // ... filter to delete one Rating
     *   }
     * })
     * 
     */
    delete<T extends ratingDeleteArgs>(args: SelectSubset<T, ratingDeleteArgs<ExtArgs>>): Prisma__ratingClient<$Result.GetResult<Prisma.$ratingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Rating.
     * @param {ratingUpdateArgs} args - Arguments to update one Rating.
     * @example
     * // Update one Rating
     * const rating = await prisma.rating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ratingUpdateArgs>(args: SelectSubset<T, ratingUpdateArgs<ExtArgs>>): Prisma__ratingClient<$Result.GetResult<Prisma.$ratingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ratings.
     * @param {ratingDeleteManyArgs} args - Arguments to filter Ratings to delete.
     * @example
     * // Delete a few Ratings
     * const { count } = await prisma.rating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ratingDeleteManyArgs>(args?: SelectSubset<T, ratingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ratingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ratings
     * const rating = await prisma.rating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ratingUpdateManyArgs>(args: SelectSubset<T, ratingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rating.
     * @param {ratingUpsertArgs} args - Arguments to update or create a Rating.
     * @example
     * // Update or create a Rating
     * const rating = await prisma.rating.upsert({
     *   create: {
     *     // ... data to create a Rating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rating we want to update
     *   }
     * })
     */
    upsert<T extends ratingUpsertArgs>(args: SelectSubset<T, ratingUpsertArgs<ExtArgs>>): Prisma__ratingClient<$Result.GetResult<Prisma.$ratingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ratingCountArgs} args - Arguments to filter Ratings to count.
     * @example
     * // Count the number of Ratings
     * const count = await prisma.rating.count({
     *   where: {
     *     // ... the filter for the Ratings we want to count
     *   }
     * })
    **/
    count<T extends ratingCountArgs>(
      args?: Subset<T, ratingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RatingAggregateArgs>(args: Subset<T, RatingAggregateArgs>): Prisma.PrismaPromise<GetRatingAggregateType<T>>

    /**
     * Group by Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ratingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ratingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ratingGroupByArgs['orderBy'] }
        : { orderBy?: ratingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ratingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRatingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the rating model
   */
  readonly fields: ratingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for rating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ratingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    content<T extends contentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, contentDefaultArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the rating model
   */
  interface ratingFieldRefs {
    readonly id: FieldRef<"rating", 'Int'>
    readonly user_id: FieldRef<"rating", 'Int'>
    readonly content_id: FieldRef<"rating", 'Int'>
    readonly rating: FieldRef<"rating", 'Int'>
    readonly comment: FieldRef<"rating", 'String'>
    readonly created_at: FieldRef<"rating", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * rating findUnique
   */
  export type ratingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rating
     */
    select?: ratingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rating
     */
    omit?: ratingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ratingInclude<ExtArgs> | null
    /**
     * Filter, which rating to fetch.
     */
    where: ratingWhereUniqueInput
  }

  /**
   * rating findUniqueOrThrow
   */
  export type ratingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rating
     */
    select?: ratingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rating
     */
    omit?: ratingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ratingInclude<ExtArgs> | null
    /**
     * Filter, which rating to fetch.
     */
    where: ratingWhereUniqueInput
  }

  /**
   * rating findFirst
   */
  export type ratingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rating
     */
    select?: ratingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rating
     */
    omit?: ratingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ratingInclude<ExtArgs> | null
    /**
     * Filter, which rating to fetch.
     */
    where?: ratingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ratings to fetch.
     */
    orderBy?: ratingOrderByWithRelationInput | ratingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ratings.
     */
    cursor?: ratingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ratings.
     */
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * rating findFirstOrThrow
   */
  export type ratingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rating
     */
    select?: ratingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rating
     */
    omit?: ratingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ratingInclude<ExtArgs> | null
    /**
     * Filter, which rating to fetch.
     */
    where?: ratingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ratings to fetch.
     */
    orderBy?: ratingOrderByWithRelationInput | ratingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ratings.
     */
    cursor?: ratingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ratings.
     */
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * rating findMany
   */
  export type ratingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rating
     */
    select?: ratingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rating
     */
    omit?: ratingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ratingInclude<ExtArgs> | null
    /**
     * Filter, which ratings to fetch.
     */
    where?: ratingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ratings to fetch.
     */
    orderBy?: ratingOrderByWithRelationInput | ratingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ratings.
     */
    cursor?: ratingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ratings.
     */
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * rating create
   */
  export type ratingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rating
     */
    select?: ratingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rating
     */
    omit?: ratingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ratingInclude<ExtArgs> | null
    /**
     * The data needed to create a rating.
     */
    data: XOR<ratingCreateInput, ratingUncheckedCreateInput>
  }

  /**
   * rating createMany
   */
  export type ratingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ratings.
     */
    data: ratingCreateManyInput | ratingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * rating update
   */
  export type ratingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rating
     */
    select?: ratingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rating
     */
    omit?: ratingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ratingInclude<ExtArgs> | null
    /**
     * The data needed to update a rating.
     */
    data: XOR<ratingUpdateInput, ratingUncheckedUpdateInput>
    /**
     * Choose, which rating to update.
     */
    where: ratingWhereUniqueInput
  }

  /**
   * rating updateMany
   */
  export type ratingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ratings.
     */
    data: XOR<ratingUpdateManyMutationInput, ratingUncheckedUpdateManyInput>
    /**
     * Filter which ratings to update
     */
    where?: ratingWhereInput
    /**
     * Limit how many ratings to update.
     */
    limit?: number
  }

  /**
   * rating upsert
   */
  export type ratingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rating
     */
    select?: ratingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rating
     */
    omit?: ratingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ratingInclude<ExtArgs> | null
    /**
     * The filter to search for the rating to update in case it exists.
     */
    where: ratingWhereUniqueInput
    /**
     * In case the rating found by the `where` argument doesn't exist, create a new rating with this data.
     */
    create: XOR<ratingCreateInput, ratingUncheckedCreateInput>
    /**
     * In case the rating was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ratingUpdateInput, ratingUncheckedUpdateInput>
  }

  /**
   * rating delete
   */
  export type ratingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rating
     */
    select?: ratingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rating
     */
    omit?: ratingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ratingInclude<ExtArgs> | null
    /**
     * Filter which rating to delete.
     */
    where: ratingWhereUniqueInput
  }

  /**
   * rating deleteMany
   */
  export type ratingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ratings to delete
     */
    where?: ratingWhereInput
    /**
     * Limit how many ratings to delete.
     */
    limit?: number
  }

  /**
   * rating without action
   */
  export type ratingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rating
     */
    select?: ratingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rating
     */
    omit?: ratingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ratingInclude<ExtArgs> | null
  }


  /**
   * Model reportcontent
   */

  export type AggregateReportcontent = {
    _count: ReportcontentCountAggregateOutputType | null
    _avg: ReportcontentAvgAggregateOutputType | null
    _sum: ReportcontentSumAggregateOutputType | null
    _min: ReportcontentMinAggregateOutputType | null
    _max: ReportcontentMaxAggregateOutputType | null
  }

  export type ReportcontentAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    content_id: number | null
    episode_id: number | null
  }

  export type ReportcontentSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    content_id: number | null
    episode_id: number | null
  }

  export type ReportcontentMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    content_id: number | null
    episode_id: number | null
    reason: string | null
    created_at: Date | null
  }

  export type ReportcontentMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    content_id: number | null
    episode_id: number | null
    reason: string | null
    created_at: Date | null
  }

  export type ReportcontentCountAggregateOutputType = {
    id: number
    user_id: number
    content_id: number
    episode_id: number
    reason: number
    created_at: number
    _all: number
  }


  export type ReportcontentAvgAggregateInputType = {
    id?: true
    user_id?: true
    content_id?: true
    episode_id?: true
  }

  export type ReportcontentSumAggregateInputType = {
    id?: true
    user_id?: true
    content_id?: true
    episode_id?: true
  }

  export type ReportcontentMinAggregateInputType = {
    id?: true
    user_id?: true
    content_id?: true
    episode_id?: true
    reason?: true
    created_at?: true
  }

  export type ReportcontentMaxAggregateInputType = {
    id?: true
    user_id?: true
    content_id?: true
    episode_id?: true
    reason?: true
    created_at?: true
  }

  export type ReportcontentCountAggregateInputType = {
    id?: true
    user_id?: true
    content_id?: true
    episode_id?: true
    reason?: true
    created_at?: true
    _all?: true
  }

  export type ReportcontentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which reportcontent to aggregate.
     */
    where?: reportcontentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reportcontents to fetch.
     */
    orderBy?: reportcontentOrderByWithRelationInput | reportcontentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: reportcontentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reportcontents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reportcontents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned reportcontents
    **/
    _count?: true | ReportcontentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportcontentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportcontentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportcontentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportcontentMaxAggregateInputType
  }

  export type GetReportcontentAggregateType<T extends ReportcontentAggregateArgs> = {
        [P in keyof T & keyof AggregateReportcontent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReportcontent[P]>
      : GetScalarType<T[P], AggregateReportcontent[P]>
  }




  export type reportcontentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reportcontentWhereInput
    orderBy?: reportcontentOrderByWithAggregationInput | reportcontentOrderByWithAggregationInput[]
    by: ReportcontentScalarFieldEnum[] | ReportcontentScalarFieldEnum
    having?: reportcontentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportcontentCountAggregateInputType | true
    _avg?: ReportcontentAvgAggregateInputType
    _sum?: ReportcontentSumAggregateInputType
    _min?: ReportcontentMinAggregateInputType
    _max?: ReportcontentMaxAggregateInputType
  }

  export type ReportcontentGroupByOutputType = {
    id: number
    user_id: number
    content_id: number
    episode_id: number
    reason: string
    created_at: Date
    _count: ReportcontentCountAggregateOutputType | null
    _avg: ReportcontentAvgAggregateOutputType | null
    _sum: ReportcontentSumAggregateOutputType | null
    _min: ReportcontentMinAggregateOutputType | null
    _max: ReportcontentMaxAggregateOutputType | null
  }

  type GetReportcontentGroupByPayload<T extends reportcontentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportcontentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportcontentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportcontentGroupByOutputType[P]>
            : GetScalarType<T[P], ReportcontentGroupByOutputType[P]>
        }
      >
    >


  export type reportcontentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    content_id?: boolean
    episode_id?: boolean
    reason?: boolean
    created_at?: boolean
    content?: boolean | contentDefaultArgs<ExtArgs>
    episode?: boolean | episodeDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportcontent"]>



  export type reportcontentSelectScalar = {
    id?: boolean
    user_id?: boolean
    content_id?: boolean
    episode_id?: boolean
    reason?: boolean
    created_at?: boolean
  }

  export type reportcontentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "content_id" | "episode_id" | "reason" | "created_at", ExtArgs["result"]["reportcontent"]>
  export type reportcontentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    content?: boolean | contentDefaultArgs<ExtArgs>
    episode?: boolean | episodeDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $reportcontentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "reportcontent"
    objects: {
      content: Prisma.$contentPayload<ExtArgs>
      episode: Prisma.$episodePayload<ExtArgs>
      user: Prisma.$userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      content_id: number
      episode_id: number
      reason: string
      created_at: Date
    }, ExtArgs["result"]["reportcontent"]>
    composites: {}
  }

  type reportcontentGetPayload<S extends boolean | null | undefined | reportcontentDefaultArgs> = $Result.GetResult<Prisma.$reportcontentPayload, S>

  type reportcontentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<reportcontentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReportcontentCountAggregateInputType | true
    }

  export interface reportcontentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['reportcontent'], meta: { name: 'reportcontent' } }
    /**
     * Find zero or one Reportcontent that matches the filter.
     * @param {reportcontentFindUniqueArgs} args - Arguments to find a Reportcontent
     * @example
     * // Get one Reportcontent
     * const reportcontent = await prisma.reportcontent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends reportcontentFindUniqueArgs>(args: SelectSubset<T, reportcontentFindUniqueArgs<ExtArgs>>): Prisma__reportcontentClient<$Result.GetResult<Prisma.$reportcontentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Reportcontent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {reportcontentFindUniqueOrThrowArgs} args - Arguments to find a Reportcontent
     * @example
     * // Get one Reportcontent
     * const reportcontent = await prisma.reportcontent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends reportcontentFindUniqueOrThrowArgs>(args: SelectSubset<T, reportcontentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__reportcontentClient<$Result.GetResult<Prisma.$reportcontentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Reportcontent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportcontentFindFirstArgs} args - Arguments to find a Reportcontent
     * @example
     * // Get one Reportcontent
     * const reportcontent = await prisma.reportcontent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends reportcontentFindFirstArgs>(args?: SelectSubset<T, reportcontentFindFirstArgs<ExtArgs>>): Prisma__reportcontentClient<$Result.GetResult<Prisma.$reportcontentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Reportcontent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportcontentFindFirstOrThrowArgs} args - Arguments to find a Reportcontent
     * @example
     * // Get one Reportcontent
     * const reportcontent = await prisma.reportcontent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends reportcontentFindFirstOrThrowArgs>(args?: SelectSubset<T, reportcontentFindFirstOrThrowArgs<ExtArgs>>): Prisma__reportcontentClient<$Result.GetResult<Prisma.$reportcontentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reportcontents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportcontentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reportcontents
     * const reportcontents = await prisma.reportcontent.findMany()
     * 
     * // Get first 10 Reportcontents
     * const reportcontents = await prisma.reportcontent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportcontentWithIdOnly = await prisma.reportcontent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends reportcontentFindManyArgs>(args?: SelectSubset<T, reportcontentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reportcontentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Reportcontent.
     * @param {reportcontentCreateArgs} args - Arguments to create a Reportcontent.
     * @example
     * // Create one Reportcontent
     * const Reportcontent = await prisma.reportcontent.create({
     *   data: {
     *     // ... data to create a Reportcontent
     *   }
     * })
     * 
     */
    create<T extends reportcontentCreateArgs>(args: SelectSubset<T, reportcontentCreateArgs<ExtArgs>>): Prisma__reportcontentClient<$Result.GetResult<Prisma.$reportcontentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reportcontents.
     * @param {reportcontentCreateManyArgs} args - Arguments to create many Reportcontents.
     * @example
     * // Create many Reportcontents
     * const reportcontent = await prisma.reportcontent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends reportcontentCreateManyArgs>(args?: SelectSubset<T, reportcontentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reportcontent.
     * @param {reportcontentDeleteArgs} args - Arguments to delete one Reportcontent.
     * @example
     * // Delete one Reportcontent
     * const Reportcontent = await prisma.reportcontent.delete({
     *   where: {
     *     // ... filter to delete one Reportcontent
     *   }
     * })
     * 
     */
    delete<T extends reportcontentDeleteArgs>(args: SelectSubset<T, reportcontentDeleteArgs<ExtArgs>>): Prisma__reportcontentClient<$Result.GetResult<Prisma.$reportcontentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Reportcontent.
     * @param {reportcontentUpdateArgs} args - Arguments to update one Reportcontent.
     * @example
     * // Update one Reportcontent
     * const reportcontent = await prisma.reportcontent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends reportcontentUpdateArgs>(args: SelectSubset<T, reportcontentUpdateArgs<ExtArgs>>): Prisma__reportcontentClient<$Result.GetResult<Prisma.$reportcontentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reportcontents.
     * @param {reportcontentDeleteManyArgs} args - Arguments to filter Reportcontents to delete.
     * @example
     * // Delete a few Reportcontents
     * const { count } = await prisma.reportcontent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends reportcontentDeleteManyArgs>(args?: SelectSubset<T, reportcontentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reportcontents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportcontentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reportcontents
     * const reportcontent = await prisma.reportcontent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends reportcontentUpdateManyArgs>(args: SelectSubset<T, reportcontentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reportcontent.
     * @param {reportcontentUpsertArgs} args - Arguments to update or create a Reportcontent.
     * @example
     * // Update or create a Reportcontent
     * const reportcontent = await prisma.reportcontent.upsert({
     *   create: {
     *     // ... data to create a Reportcontent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reportcontent we want to update
     *   }
     * })
     */
    upsert<T extends reportcontentUpsertArgs>(args: SelectSubset<T, reportcontentUpsertArgs<ExtArgs>>): Prisma__reportcontentClient<$Result.GetResult<Prisma.$reportcontentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reportcontents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportcontentCountArgs} args - Arguments to filter Reportcontents to count.
     * @example
     * // Count the number of Reportcontents
     * const count = await prisma.reportcontent.count({
     *   where: {
     *     // ... the filter for the Reportcontents we want to count
     *   }
     * })
    **/
    count<T extends reportcontentCountArgs>(
      args?: Subset<T, reportcontentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportcontentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reportcontent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportcontentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportcontentAggregateArgs>(args: Subset<T, ReportcontentAggregateArgs>): Prisma.PrismaPromise<GetReportcontentAggregateType<T>>

    /**
     * Group by Reportcontent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reportcontentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends reportcontentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: reportcontentGroupByArgs['orderBy'] }
        : { orderBy?: reportcontentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, reportcontentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportcontentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the reportcontent model
   */
  readonly fields: reportcontentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for reportcontent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__reportcontentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    content<T extends contentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, contentDefaultArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    episode<T extends episodeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, episodeDefaultArgs<ExtArgs>>): Prisma__episodeClient<$Result.GetResult<Prisma.$episodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the reportcontent model
   */
  interface reportcontentFieldRefs {
    readonly id: FieldRef<"reportcontent", 'Int'>
    readonly user_id: FieldRef<"reportcontent", 'Int'>
    readonly content_id: FieldRef<"reportcontent", 'Int'>
    readonly episode_id: FieldRef<"reportcontent", 'Int'>
    readonly reason: FieldRef<"reportcontent", 'String'>
    readonly created_at: FieldRef<"reportcontent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * reportcontent findUnique
   */
  export type reportcontentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reportcontent
     */
    select?: reportcontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reportcontent
     */
    omit?: reportcontentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportcontentInclude<ExtArgs> | null
    /**
     * Filter, which reportcontent to fetch.
     */
    where: reportcontentWhereUniqueInput
  }

  /**
   * reportcontent findUniqueOrThrow
   */
  export type reportcontentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reportcontent
     */
    select?: reportcontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reportcontent
     */
    omit?: reportcontentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportcontentInclude<ExtArgs> | null
    /**
     * Filter, which reportcontent to fetch.
     */
    where: reportcontentWhereUniqueInput
  }

  /**
   * reportcontent findFirst
   */
  export type reportcontentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reportcontent
     */
    select?: reportcontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reportcontent
     */
    omit?: reportcontentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportcontentInclude<ExtArgs> | null
    /**
     * Filter, which reportcontent to fetch.
     */
    where?: reportcontentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reportcontents to fetch.
     */
    orderBy?: reportcontentOrderByWithRelationInput | reportcontentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reportcontents.
     */
    cursor?: reportcontentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reportcontents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reportcontents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reportcontents.
     */
    distinct?: ReportcontentScalarFieldEnum | ReportcontentScalarFieldEnum[]
  }

  /**
   * reportcontent findFirstOrThrow
   */
  export type reportcontentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reportcontent
     */
    select?: reportcontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reportcontent
     */
    omit?: reportcontentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportcontentInclude<ExtArgs> | null
    /**
     * Filter, which reportcontent to fetch.
     */
    where?: reportcontentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reportcontents to fetch.
     */
    orderBy?: reportcontentOrderByWithRelationInput | reportcontentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reportcontents.
     */
    cursor?: reportcontentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reportcontents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reportcontents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reportcontents.
     */
    distinct?: ReportcontentScalarFieldEnum | ReportcontentScalarFieldEnum[]
  }

  /**
   * reportcontent findMany
   */
  export type reportcontentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reportcontent
     */
    select?: reportcontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reportcontent
     */
    omit?: reportcontentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportcontentInclude<ExtArgs> | null
    /**
     * Filter, which reportcontents to fetch.
     */
    where?: reportcontentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reportcontents to fetch.
     */
    orderBy?: reportcontentOrderByWithRelationInput | reportcontentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing reportcontents.
     */
    cursor?: reportcontentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reportcontents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reportcontents.
     */
    skip?: number
    distinct?: ReportcontentScalarFieldEnum | ReportcontentScalarFieldEnum[]
  }

  /**
   * reportcontent create
   */
  export type reportcontentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reportcontent
     */
    select?: reportcontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reportcontent
     */
    omit?: reportcontentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportcontentInclude<ExtArgs> | null
    /**
     * The data needed to create a reportcontent.
     */
    data: XOR<reportcontentCreateInput, reportcontentUncheckedCreateInput>
  }

  /**
   * reportcontent createMany
   */
  export type reportcontentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many reportcontents.
     */
    data: reportcontentCreateManyInput | reportcontentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * reportcontent update
   */
  export type reportcontentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reportcontent
     */
    select?: reportcontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reportcontent
     */
    omit?: reportcontentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportcontentInclude<ExtArgs> | null
    /**
     * The data needed to update a reportcontent.
     */
    data: XOR<reportcontentUpdateInput, reportcontentUncheckedUpdateInput>
    /**
     * Choose, which reportcontent to update.
     */
    where: reportcontentWhereUniqueInput
  }

  /**
   * reportcontent updateMany
   */
  export type reportcontentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update reportcontents.
     */
    data: XOR<reportcontentUpdateManyMutationInput, reportcontentUncheckedUpdateManyInput>
    /**
     * Filter which reportcontents to update
     */
    where?: reportcontentWhereInput
    /**
     * Limit how many reportcontents to update.
     */
    limit?: number
  }

  /**
   * reportcontent upsert
   */
  export type reportcontentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reportcontent
     */
    select?: reportcontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reportcontent
     */
    omit?: reportcontentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportcontentInclude<ExtArgs> | null
    /**
     * The filter to search for the reportcontent to update in case it exists.
     */
    where: reportcontentWhereUniqueInput
    /**
     * In case the reportcontent found by the `where` argument doesn't exist, create a new reportcontent with this data.
     */
    create: XOR<reportcontentCreateInput, reportcontentUncheckedCreateInput>
    /**
     * In case the reportcontent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<reportcontentUpdateInput, reportcontentUncheckedUpdateInput>
  }

  /**
   * reportcontent delete
   */
  export type reportcontentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reportcontent
     */
    select?: reportcontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reportcontent
     */
    omit?: reportcontentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportcontentInclude<ExtArgs> | null
    /**
     * Filter which reportcontent to delete.
     */
    where: reportcontentWhereUniqueInput
  }

  /**
   * reportcontent deleteMany
   */
  export type reportcontentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which reportcontents to delete
     */
    where?: reportcontentWhereInput
    /**
     * Limit how many reportcontents to delete.
     */
    limit?: number
  }

  /**
   * reportcontent without action
   */
  export type reportcontentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reportcontent
     */
    select?: reportcontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reportcontent
     */
    omit?: reportcontentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportcontentInclude<ExtArgs> | null
  }


  /**
   * Model searchlog
   */

  export type AggregateSearchlog = {
    _count: SearchlogCountAggregateOutputType | null
    _avg: SearchlogAvgAggregateOutputType | null
    _sum: SearchlogSumAggregateOutputType | null
    _min: SearchlogMinAggregateOutputType | null
    _max: SearchlogMaxAggregateOutputType | null
  }

  export type SearchlogAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type SearchlogSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type SearchlogMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    keyword: string | null
    searched_at: Date | null
  }

  export type SearchlogMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    keyword: string | null
    searched_at: Date | null
  }

  export type SearchlogCountAggregateOutputType = {
    id: number
    user_id: number
    keyword: number
    searched_at: number
    _all: number
  }


  export type SearchlogAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type SearchlogSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type SearchlogMinAggregateInputType = {
    id?: true
    user_id?: true
    keyword?: true
    searched_at?: true
  }

  export type SearchlogMaxAggregateInputType = {
    id?: true
    user_id?: true
    keyword?: true
    searched_at?: true
  }

  export type SearchlogCountAggregateInputType = {
    id?: true
    user_id?: true
    keyword?: true
    searched_at?: true
    _all?: true
  }

  export type SearchlogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which searchlog to aggregate.
     */
    where?: searchlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of searchlogs to fetch.
     */
    orderBy?: searchlogOrderByWithRelationInput | searchlogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: searchlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` searchlogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` searchlogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned searchlogs
    **/
    _count?: true | SearchlogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SearchlogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SearchlogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SearchlogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SearchlogMaxAggregateInputType
  }

  export type GetSearchlogAggregateType<T extends SearchlogAggregateArgs> = {
        [P in keyof T & keyof AggregateSearchlog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSearchlog[P]>
      : GetScalarType<T[P], AggregateSearchlog[P]>
  }




  export type searchlogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: searchlogWhereInput
    orderBy?: searchlogOrderByWithAggregationInput | searchlogOrderByWithAggregationInput[]
    by: SearchlogScalarFieldEnum[] | SearchlogScalarFieldEnum
    having?: searchlogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SearchlogCountAggregateInputType | true
    _avg?: SearchlogAvgAggregateInputType
    _sum?: SearchlogSumAggregateInputType
    _min?: SearchlogMinAggregateInputType
    _max?: SearchlogMaxAggregateInputType
  }

  export type SearchlogGroupByOutputType = {
    id: number
    user_id: number
    keyword: string
    searched_at: Date
    _count: SearchlogCountAggregateOutputType | null
    _avg: SearchlogAvgAggregateOutputType | null
    _sum: SearchlogSumAggregateOutputType | null
    _min: SearchlogMinAggregateOutputType | null
    _max: SearchlogMaxAggregateOutputType | null
  }

  type GetSearchlogGroupByPayload<T extends searchlogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SearchlogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SearchlogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SearchlogGroupByOutputType[P]>
            : GetScalarType<T[P], SearchlogGroupByOutputType[P]>
        }
      >
    >


  export type searchlogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    keyword?: boolean
    searched_at?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["searchlog"]>



  export type searchlogSelectScalar = {
    id?: boolean
    user_id?: boolean
    keyword?: boolean
    searched_at?: boolean
  }

  export type searchlogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "keyword" | "searched_at", ExtArgs["result"]["searchlog"]>
  export type searchlogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $searchlogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "searchlog"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      keyword: string
      searched_at: Date
    }, ExtArgs["result"]["searchlog"]>
    composites: {}
  }

  type searchlogGetPayload<S extends boolean | null | undefined | searchlogDefaultArgs> = $Result.GetResult<Prisma.$searchlogPayload, S>

  type searchlogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<searchlogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SearchlogCountAggregateInputType | true
    }

  export interface searchlogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['searchlog'], meta: { name: 'searchlog' } }
    /**
     * Find zero or one Searchlog that matches the filter.
     * @param {searchlogFindUniqueArgs} args - Arguments to find a Searchlog
     * @example
     * // Get one Searchlog
     * const searchlog = await prisma.searchlog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends searchlogFindUniqueArgs>(args: SelectSubset<T, searchlogFindUniqueArgs<ExtArgs>>): Prisma__searchlogClient<$Result.GetResult<Prisma.$searchlogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Searchlog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {searchlogFindUniqueOrThrowArgs} args - Arguments to find a Searchlog
     * @example
     * // Get one Searchlog
     * const searchlog = await prisma.searchlog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends searchlogFindUniqueOrThrowArgs>(args: SelectSubset<T, searchlogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__searchlogClient<$Result.GetResult<Prisma.$searchlogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Searchlog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {searchlogFindFirstArgs} args - Arguments to find a Searchlog
     * @example
     * // Get one Searchlog
     * const searchlog = await prisma.searchlog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends searchlogFindFirstArgs>(args?: SelectSubset<T, searchlogFindFirstArgs<ExtArgs>>): Prisma__searchlogClient<$Result.GetResult<Prisma.$searchlogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Searchlog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {searchlogFindFirstOrThrowArgs} args - Arguments to find a Searchlog
     * @example
     * // Get one Searchlog
     * const searchlog = await prisma.searchlog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends searchlogFindFirstOrThrowArgs>(args?: SelectSubset<T, searchlogFindFirstOrThrowArgs<ExtArgs>>): Prisma__searchlogClient<$Result.GetResult<Prisma.$searchlogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Searchlogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {searchlogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Searchlogs
     * const searchlogs = await prisma.searchlog.findMany()
     * 
     * // Get first 10 Searchlogs
     * const searchlogs = await prisma.searchlog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const searchlogWithIdOnly = await prisma.searchlog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends searchlogFindManyArgs>(args?: SelectSubset<T, searchlogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$searchlogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Searchlog.
     * @param {searchlogCreateArgs} args - Arguments to create a Searchlog.
     * @example
     * // Create one Searchlog
     * const Searchlog = await prisma.searchlog.create({
     *   data: {
     *     // ... data to create a Searchlog
     *   }
     * })
     * 
     */
    create<T extends searchlogCreateArgs>(args: SelectSubset<T, searchlogCreateArgs<ExtArgs>>): Prisma__searchlogClient<$Result.GetResult<Prisma.$searchlogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Searchlogs.
     * @param {searchlogCreateManyArgs} args - Arguments to create many Searchlogs.
     * @example
     * // Create many Searchlogs
     * const searchlog = await prisma.searchlog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends searchlogCreateManyArgs>(args?: SelectSubset<T, searchlogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Searchlog.
     * @param {searchlogDeleteArgs} args - Arguments to delete one Searchlog.
     * @example
     * // Delete one Searchlog
     * const Searchlog = await prisma.searchlog.delete({
     *   where: {
     *     // ... filter to delete one Searchlog
     *   }
     * })
     * 
     */
    delete<T extends searchlogDeleteArgs>(args: SelectSubset<T, searchlogDeleteArgs<ExtArgs>>): Prisma__searchlogClient<$Result.GetResult<Prisma.$searchlogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Searchlog.
     * @param {searchlogUpdateArgs} args - Arguments to update one Searchlog.
     * @example
     * // Update one Searchlog
     * const searchlog = await prisma.searchlog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends searchlogUpdateArgs>(args: SelectSubset<T, searchlogUpdateArgs<ExtArgs>>): Prisma__searchlogClient<$Result.GetResult<Prisma.$searchlogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Searchlogs.
     * @param {searchlogDeleteManyArgs} args - Arguments to filter Searchlogs to delete.
     * @example
     * // Delete a few Searchlogs
     * const { count } = await prisma.searchlog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends searchlogDeleteManyArgs>(args?: SelectSubset<T, searchlogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Searchlogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {searchlogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Searchlogs
     * const searchlog = await prisma.searchlog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends searchlogUpdateManyArgs>(args: SelectSubset<T, searchlogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Searchlog.
     * @param {searchlogUpsertArgs} args - Arguments to update or create a Searchlog.
     * @example
     * // Update or create a Searchlog
     * const searchlog = await prisma.searchlog.upsert({
     *   create: {
     *     // ... data to create a Searchlog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Searchlog we want to update
     *   }
     * })
     */
    upsert<T extends searchlogUpsertArgs>(args: SelectSubset<T, searchlogUpsertArgs<ExtArgs>>): Prisma__searchlogClient<$Result.GetResult<Prisma.$searchlogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Searchlogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {searchlogCountArgs} args - Arguments to filter Searchlogs to count.
     * @example
     * // Count the number of Searchlogs
     * const count = await prisma.searchlog.count({
     *   where: {
     *     // ... the filter for the Searchlogs we want to count
     *   }
     * })
    **/
    count<T extends searchlogCountArgs>(
      args?: Subset<T, searchlogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SearchlogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Searchlog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SearchlogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SearchlogAggregateArgs>(args: Subset<T, SearchlogAggregateArgs>): Prisma.PrismaPromise<GetSearchlogAggregateType<T>>

    /**
     * Group by Searchlog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {searchlogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends searchlogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: searchlogGroupByArgs['orderBy'] }
        : { orderBy?: searchlogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, searchlogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSearchlogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the searchlog model
   */
  readonly fields: searchlogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for searchlog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__searchlogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the searchlog model
   */
  interface searchlogFieldRefs {
    readonly id: FieldRef<"searchlog", 'Int'>
    readonly user_id: FieldRef<"searchlog", 'Int'>
    readonly keyword: FieldRef<"searchlog", 'String'>
    readonly searched_at: FieldRef<"searchlog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * searchlog findUnique
   */
  export type searchlogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the searchlog
     */
    select?: searchlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the searchlog
     */
    omit?: searchlogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: searchlogInclude<ExtArgs> | null
    /**
     * Filter, which searchlog to fetch.
     */
    where: searchlogWhereUniqueInput
  }

  /**
   * searchlog findUniqueOrThrow
   */
  export type searchlogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the searchlog
     */
    select?: searchlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the searchlog
     */
    omit?: searchlogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: searchlogInclude<ExtArgs> | null
    /**
     * Filter, which searchlog to fetch.
     */
    where: searchlogWhereUniqueInput
  }

  /**
   * searchlog findFirst
   */
  export type searchlogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the searchlog
     */
    select?: searchlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the searchlog
     */
    omit?: searchlogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: searchlogInclude<ExtArgs> | null
    /**
     * Filter, which searchlog to fetch.
     */
    where?: searchlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of searchlogs to fetch.
     */
    orderBy?: searchlogOrderByWithRelationInput | searchlogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for searchlogs.
     */
    cursor?: searchlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` searchlogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` searchlogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of searchlogs.
     */
    distinct?: SearchlogScalarFieldEnum | SearchlogScalarFieldEnum[]
  }

  /**
   * searchlog findFirstOrThrow
   */
  export type searchlogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the searchlog
     */
    select?: searchlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the searchlog
     */
    omit?: searchlogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: searchlogInclude<ExtArgs> | null
    /**
     * Filter, which searchlog to fetch.
     */
    where?: searchlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of searchlogs to fetch.
     */
    orderBy?: searchlogOrderByWithRelationInput | searchlogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for searchlogs.
     */
    cursor?: searchlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` searchlogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` searchlogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of searchlogs.
     */
    distinct?: SearchlogScalarFieldEnum | SearchlogScalarFieldEnum[]
  }

  /**
   * searchlog findMany
   */
  export type searchlogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the searchlog
     */
    select?: searchlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the searchlog
     */
    omit?: searchlogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: searchlogInclude<ExtArgs> | null
    /**
     * Filter, which searchlogs to fetch.
     */
    where?: searchlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of searchlogs to fetch.
     */
    orderBy?: searchlogOrderByWithRelationInput | searchlogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing searchlogs.
     */
    cursor?: searchlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` searchlogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` searchlogs.
     */
    skip?: number
    distinct?: SearchlogScalarFieldEnum | SearchlogScalarFieldEnum[]
  }

  /**
   * searchlog create
   */
  export type searchlogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the searchlog
     */
    select?: searchlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the searchlog
     */
    omit?: searchlogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: searchlogInclude<ExtArgs> | null
    /**
     * The data needed to create a searchlog.
     */
    data: XOR<searchlogCreateInput, searchlogUncheckedCreateInput>
  }

  /**
   * searchlog createMany
   */
  export type searchlogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many searchlogs.
     */
    data: searchlogCreateManyInput | searchlogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * searchlog update
   */
  export type searchlogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the searchlog
     */
    select?: searchlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the searchlog
     */
    omit?: searchlogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: searchlogInclude<ExtArgs> | null
    /**
     * The data needed to update a searchlog.
     */
    data: XOR<searchlogUpdateInput, searchlogUncheckedUpdateInput>
    /**
     * Choose, which searchlog to update.
     */
    where: searchlogWhereUniqueInput
  }

  /**
   * searchlog updateMany
   */
  export type searchlogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update searchlogs.
     */
    data: XOR<searchlogUpdateManyMutationInput, searchlogUncheckedUpdateManyInput>
    /**
     * Filter which searchlogs to update
     */
    where?: searchlogWhereInput
    /**
     * Limit how many searchlogs to update.
     */
    limit?: number
  }

  /**
   * searchlog upsert
   */
  export type searchlogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the searchlog
     */
    select?: searchlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the searchlog
     */
    omit?: searchlogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: searchlogInclude<ExtArgs> | null
    /**
     * The filter to search for the searchlog to update in case it exists.
     */
    where: searchlogWhereUniqueInput
    /**
     * In case the searchlog found by the `where` argument doesn't exist, create a new searchlog with this data.
     */
    create: XOR<searchlogCreateInput, searchlogUncheckedCreateInput>
    /**
     * In case the searchlog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<searchlogUpdateInput, searchlogUncheckedUpdateInput>
  }

  /**
   * searchlog delete
   */
  export type searchlogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the searchlog
     */
    select?: searchlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the searchlog
     */
    omit?: searchlogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: searchlogInclude<ExtArgs> | null
    /**
     * Filter which searchlog to delete.
     */
    where: searchlogWhereUniqueInput
  }

  /**
   * searchlog deleteMany
   */
  export type searchlogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which searchlogs to delete
     */
    where?: searchlogWhereInput
    /**
     * Limit how many searchlogs to delete.
     */
    limit?: number
  }

  /**
   * searchlog without action
   */
  export type searchlogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the searchlog
     */
    select?: searchlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the searchlog
     */
    omit?: searchlogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: searchlogInclude<ExtArgs> | null
  }


  /**
   * Model season
   */

  export type AggregateSeason = {
    _count: SeasonCountAggregateOutputType | null
    _avg: SeasonAvgAggregateOutputType | null
    _sum: SeasonSumAggregateOutputType | null
    _min: SeasonMinAggregateOutputType | null
    _max: SeasonMaxAggregateOutputType | null
  }

  export type SeasonAvgAggregateOutputType = {
    id: number | null
    content_id: number | null
    season_number: number | null
  }

  export type SeasonSumAggregateOutputType = {
    id: number | null
    content_id: number | null
    season_number: number | null
  }

  export type SeasonMinAggregateOutputType = {
    id: number | null
    content_id: number | null
    season_number: number | null
    title: string | null
    description: string | null
    thumbnail_url: string | null
    created_at: Date | null
  }

  export type SeasonMaxAggregateOutputType = {
    id: number | null
    content_id: number | null
    season_number: number | null
    title: string | null
    description: string | null
    thumbnail_url: string | null
    created_at: Date | null
  }

  export type SeasonCountAggregateOutputType = {
    id: number
    content_id: number
    season_number: number
    title: number
    description: number
    thumbnail_url: number
    created_at: number
    _all: number
  }


  export type SeasonAvgAggregateInputType = {
    id?: true
    content_id?: true
    season_number?: true
  }

  export type SeasonSumAggregateInputType = {
    id?: true
    content_id?: true
    season_number?: true
  }

  export type SeasonMinAggregateInputType = {
    id?: true
    content_id?: true
    season_number?: true
    title?: true
    description?: true
    thumbnail_url?: true
    created_at?: true
  }

  export type SeasonMaxAggregateInputType = {
    id?: true
    content_id?: true
    season_number?: true
    title?: true
    description?: true
    thumbnail_url?: true
    created_at?: true
  }

  export type SeasonCountAggregateInputType = {
    id?: true
    content_id?: true
    season_number?: true
    title?: true
    description?: true
    thumbnail_url?: true
    created_at?: true
    _all?: true
  }

  export type SeasonAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which season to aggregate.
     */
    where?: seasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of seasons to fetch.
     */
    orderBy?: seasonOrderByWithRelationInput | seasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: seasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` seasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` seasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned seasons
    **/
    _count?: true | SeasonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeasonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeasonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeasonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeasonMaxAggregateInputType
  }

  export type GetSeasonAggregateType<T extends SeasonAggregateArgs> = {
        [P in keyof T & keyof AggregateSeason]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeason[P]>
      : GetScalarType<T[P], AggregateSeason[P]>
  }




  export type seasonGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: seasonWhereInput
    orderBy?: seasonOrderByWithAggregationInput | seasonOrderByWithAggregationInput[]
    by: SeasonScalarFieldEnum[] | SeasonScalarFieldEnum
    having?: seasonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeasonCountAggregateInputType | true
    _avg?: SeasonAvgAggregateInputType
    _sum?: SeasonSumAggregateInputType
    _min?: SeasonMinAggregateInputType
    _max?: SeasonMaxAggregateInputType
  }

  export type SeasonGroupByOutputType = {
    id: number
    content_id: number
    season_number: number
    title: string
    description: string | null
    thumbnail_url: string | null
    created_at: Date
    _count: SeasonCountAggregateOutputType | null
    _avg: SeasonAvgAggregateOutputType | null
    _sum: SeasonSumAggregateOutputType | null
    _min: SeasonMinAggregateOutputType | null
    _max: SeasonMaxAggregateOutputType | null
  }

  type GetSeasonGroupByPayload<T extends seasonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SeasonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeasonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeasonGroupByOutputType[P]>
            : GetScalarType<T[P], SeasonGroupByOutputType[P]>
        }
      >
    >


  export type seasonSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content_id?: boolean
    season_number?: boolean
    title?: boolean
    description?: boolean
    thumbnail_url?: boolean
    created_at?: boolean
    content?: boolean | contentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["season"]>



  export type seasonSelectScalar = {
    id?: boolean
    content_id?: boolean
    season_number?: boolean
    title?: boolean
    description?: boolean
    thumbnail_url?: boolean
    created_at?: boolean
  }

  export type seasonOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content_id" | "season_number" | "title" | "description" | "thumbnail_url" | "created_at", ExtArgs["result"]["season"]>
  export type seasonInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    content?: boolean | contentDefaultArgs<ExtArgs>
  }

  export type $seasonPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "season"
    objects: {
      content: Prisma.$contentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      content_id: number
      season_number: number
      title: string
      description: string | null
      thumbnail_url: string | null
      created_at: Date
    }, ExtArgs["result"]["season"]>
    composites: {}
  }

  type seasonGetPayload<S extends boolean | null | undefined | seasonDefaultArgs> = $Result.GetResult<Prisma.$seasonPayload, S>

  type seasonCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<seasonFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SeasonCountAggregateInputType | true
    }

  export interface seasonDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['season'], meta: { name: 'season' } }
    /**
     * Find zero or one Season that matches the filter.
     * @param {seasonFindUniqueArgs} args - Arguments to find a Season
     * @example
     * // Get one Season
     * const season = await prisma.season.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends seasonFindUniqueArgs>(args: SelectSubset<T, seasonFindUniqueArgs<ExtArgs>>): Prisma__seasonClient<$Result.GetResult<Prisma.$seasonPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Season that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {seasonFindUniqueOrThrowArgs} args - Arguments to find a Season
     * @example
     * // Get one Season
     * const season = await prisma.season.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends seasonFindUniqueOrThrowArgs>(args: SelectSubset<T, seasonFindUniqueOrThrowArgs<ExtArgs>>): Prisma__seasonClient<$Result.GetResult<Prisma.$seasonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Season that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seasonFindFirstArgs} args - Arguments to find a Season
     * @example
     * // Get one Season
     * const season = await prisma.season.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends seasonFindFirstArgs>(args?: SelectSubset<T, seasonFindFirstArgs<ExtArgs>>): Prisma__seasonClient<$Result.GetResult<Prisma.$seasonPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Season that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seasonFindFirstOrThrowArgs} args - Arguments to find a Season
     * @example
     * // Get one Season
     * const season = await prisma.season.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends seasonFindFirstOrThrowArgs>(args?: SelectSubset<T, seasonFindFirstOrThrowArgs<ExtArgs>>): Prisma__seasonClient<$Result.GetResult<Prisma.$seasonPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Seasons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seasonFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Seasons
     * const seasons = await prisma.season.findMany()
     * 
     * // Get first 10 Seasons
     * const seasons = await prisma.season.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const seasonWithIdOnly = await prisma.season.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends seasonFindManyArgs>(args?: SelectSubset<T, seasonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$seasonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Season.
     * @param {seasonCreateArgs} args - Arguments to create a Season.
     * @example
     * // Create one Season
     * const Season = await prisma.season.create({
     *   data: {
     *     // ... data to create a Season
     *   }
     * })
     * 
     */
    create<T extends seasonCreateArgs>(args: SelectSubset<T, seasonCreateArgs<ExtArgs>>): Prisma__seasonClient<$Result.GetResult<Prisma.$seasonPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Seasons.
     * @param {seasonCreateManyArgs} args - Arguments to create many Seasons.
     * @example
     * // Create many Seasons
     * const season = await prisma.season.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends seasonCreateManyArgs>(args?: SelectSubset<T, seasonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Season.
     * @param {seasonDeleteArgs} args - Arguments to delete one Season.
     * @example
     * // Delete one Season
     * const Season = await prisma.season.delete({
     *   where: {
     *     // ... filter to delete one Season
     *   }
     * })
     * 
     */
    delete<T extends seasonDeleteArgs>(args: SelectSubset<T, seasonDeleteArgs<ExtArgs>>): Prisma__seasonClient<$Result.GetResult<Prisma.$seasonPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Season.
     * @param {seasonUpdateArgs} args - Arguments to update one Season.
     * @example
     * // Update one Season
     * const season = await prisma.season.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends seasonUpdateArgs>(args: SelectSubset<T, seasonUpdateArgs<ExtArgs>>): Prisma__seasonClient<$Result.GetResult<Prisma.$seasonPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Seasons.
     * @param {seasonDeleteManyArgs} args - Arguments to filter Seasons to delete.
     * @example
     * // Delete a few Seasons
     * const { count } = await prisma.season.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends seasonDeleteManyArgs>(args?: SelectSubset<T, seasonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Seasons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seasonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Seasons
     * const season = await prisma.season.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends seasonUpdateManyArgs>(args: SelectSubset<T, seasonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Season.
     * @param {seasonUpsertArgs} args - Arguments to update or create a Season.
     * @example
     * // Update or create a Season
     * const season = await prisma.season.upsert({
     *   create: {
     *     // ... data to create a Season
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Season we want to update
     *   }
     * })
     */
    upsert<T extends seasonUpsertArgs>(args: SelectSubset<T, seasonUpsertArgs<ExtArgs>>): Prisma__seasonClient<$Result.GetResult<Prisma.$seasonPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Seasons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seasonCountArgs} args - Arguments to filter Seasons to count.
     * @example
     * // Count the number of Seasons
     * const count = await prisma.season.count({
     *   where: {
     *     // ... the filter for the Seasons we want to count
     *   }
     * })
    **/
    count<T extends seasonCountArgs>(
      args?: Subset<T, seasonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeasonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Season.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeasonAggregateArgs>(args: Subset<T, SeasonAggregateArgs>): Prisma.PrismaPromise<GetSeasonAggregateType<T>>

    /**
     * Group by Season.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seasonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends seasonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: seasonGroupByArgs['orderBy'] }
        : { orderBy?: seasonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, seasonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeasonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the season model
   */
  readonly fields: seasonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for season.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__seasonClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    content<T extends contentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, contentDefaultArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the season model
   */
  interface seasonFieldRefs {
    readonly id: FieldRef<"season", 'Int'>
    readonly content_id: FieldRef<"season", 'Int'>
    readonly season_number: FieldRef<"season", 'Int'>
    readonly title: FieldRef<"season", 'String'>
    readonly description: FieldRef<"season", 'String'>
    readonly thumbnail_url: FieldRef<"season", 'String'>
    readonly created_at: FieldRef<"season", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * season findUnique
   */
  export type seasonFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the season
     */
    select?: seasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the season
     */
    omit?: seasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seasonInclude<ExtArgs> | null
    /**
     * Filter, which season to fetch.
     */
    where: seasonWhereUniqueInput
  }

  /**
   * season findUniqueOrThrow
   */
  export type seasonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the season
     */
    select?: seasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the season
     */
    omit?: seasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seasonInclude<ExtArgs> | null
    /**
     * Filter, which season to fetch.
     */
    where: seasonWhereUniqueInput
  }

  /**
   * season findFirst
   */
  export type seasonFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the season
     */
    select?: seasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the season
     */
    omit?: seasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seasonInclude<ExtArgs> | null
    /**
     * Filter, which season to fetch.
     */
    where?: seasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of seasons to fetch.
     */
    orderBy?: seasonOrderByWithRelationInput | seasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for seasons.
     */
    cursor?: seasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` seasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` seasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of seasons.
     */
    distinct?: SeasonScalarFieldEnum | SeasonScalarFieldEnum[]
  }

  /**
   * season findFirstOrThrow
   */
  export type seasonFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the season
     */
    select?: seasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the season
     */
    omit?: seasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seasonInclude<ExtArgs> | null
    /**
     * Filter, which season to fetch.
     */
    where?: seasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of seasons to fetch.
     */
    orderBy?: seasonOrderByWithRelationInput | seasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for seasons.
     */
    cursor?: seasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` seasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` seasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of seasons.
     */
    distinct?: SeasonScalarFieldEnum | SeasonScalarFieldEnum[]
  }

  /**
   * season findMany
   */
  export type seasonFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the season
     */
    select?: seasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the season
     */
    omit?: seasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seasonInclude<ExtArgs> | null
    /**
     * Filter, which seasons to fetch.
     */
    where?: seasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of seasons to fetch.
     */
    orderBy?: seasonOrderByWithRelationInput | seasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing seasons.
     */
    cursor?: seasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` seasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` seasons.
     */
    skip?: number
    distinct?: SeasonScalarFieldEnum | SeasonScalarFieldEnum[]
  }

  /**
   * season create
   */
  export type seasonCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the season
     */
    select?: seasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the season
     */
    omit?: seasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seasonInclude<ExtArgs> | null
    /**
     * The data needed to create a season.
     */
    data: XOR<seasonCreateInput, seasonUncheckedCreateInput>
  }

  /**
   * season createMany
   */
  export type seasonCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many seasons.
     */
    data: seasonCreateManyInput | seasonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * season update
   */
  export type seasonUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the season
     */
    select?: seasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the season
     */
    omit?: seasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seasonInclude<ExtArgs> | null
    /**
     * The data needed to update a season.
     */
    data: XOR<seasonUpdateInput, seasonUncheckedUpdateInput>
    /**
     * Choose, which season to update.
     */
    where: seasonWhereUniqueInput
  }

  /**
   * season updateMany
   */
  export type seasonUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update seasons.
     */
    data: XOR<seasonUpdateManyMutationInput, seasonUncheckedUpdateManyInput>
    /**
     * Filter which seasons to update
     */
    where?: seasonWhereInput
    /**
     * Limit how many seasons to update.
     */
    limit?: number
  }

  /**
   * season upsert
   */
  export type seasonUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the season
     */
    select?: seasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the season
     */
    omit?: seasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seasonInclude<ExtArgs> | null
    /**
     * The filter to search for the season to update in case it exists.
     */
    where: seasonWhereUniqueInput
    /**
     * In case the season found by the `where` argument doesn't exist, create a new season with this data.
     */
    create: XOR<seasonCreateInput, seasonUncheckedCreateInput>
    /**
     * In case the season was found with the provided `where` argument, update it with this data.
     */
    update: XOR<seasonUpdateInput, seasonUncheckedUpdateInput>
  }

  /**
   * season delete
   */
  export type seasonDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the season
     */
    select?: seasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the season
     */
    omit?: seasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seasonInclude<ExtArgs> | null
    /**
     * Filter which season to delete.
     */
    where: seasonWhereUniqueInput
  }

  /**
   * season deleteMany
   */
  export type seasonDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which seasons to delete
     */
    where?: seasonWhereInput
    /**
     * Limit how many seasons to delete.
     */
    limit?: number
  }

  /**
   * season without action
   */
  export type seasonDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the season
     */
    select?: seasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the season
     */
    omit?: seasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seasonInclude<ExtArgs> | null
  }


  /**
   * Model subtitle
   */

  export type AggregateSubtitle = {
    _count: SubtitleCountAggregateOutputType | null
    _avg: SubtitleAvgAggregateOutputType | null
    _sum: SubtitleSumAggregateOutputType | null
    _min: SubtitleMinAggregateOutputType | null
    _max: SubtitleMaxAggregateOutputType | null
  }

  export type SubtitleAvgAggregateOutputType = {
    id: number | null
    content_id: number | null
    episode_id: number | null
  }

  export type SubtitleSumAggregateOutputType = {
    id: number | null
    content_id: number | null
    episode_id: number | null
  }

  export type SubtitleMinAggregateOutputType = {
    id: number | null
    content_id: number | null
    episode_id: number | null
    language: string | null
    file_url: string | null
    created_at: Date | null
  }

  export type SubtitleMaxAggregateOutputType = {
    id: number | null
    content_id: number | null
    episode_id: number | null
    language: string | null
    file_url: string | null
    created_at: Date | null
  }

  export type SubtitleCountAggregateOutputType = {
    id: number
    content_id: number
    episode_id: number
    language: number
    file_url: number
    created_at: number
    _all: number
  }


  export type SubtitleAvgAggregateInputType = {
    id?: true
    content_id?: true
    episode_id?: true
  }

  export type SubtitleSumAggregateInputType = {
    id?: true
    content_id?: true
    episode_id?: true
  }

  export type SubtitleMinAggregateInputType = {
    id?: true
    content_id?: true
    episode_id?: true
    language?: true
    file_url?: true
    created_at?: true
  }

  export type SubtitleMaxAggregateInputType = {
    id?: true
    content_id?: true
    episode_id?: true
    language?: true
    file_url?: true
    created_at?: true
  }

  export type SubtitleCountAggregateInputType = {
    id?: true
    content_id?: true
    episode_id?: true
    language?: true
    file_url?: true
    created_at?: true
    _all?: true
  }

  export type SubtitleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which subtitle to aggregate.
     */
    where?: subtitleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subtitles to fetch.
     */
    orderBy?: subtitleOrderByWithRelationInput | subtitleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: subtitleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subtitles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subtitles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned subtitles
    **/
    _count?: true | SubtitleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubtitleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubtitleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubtitleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubtitleMaxAggregateInputType
  }

  export type GetSubtitleAggregateType<T extends SubtitleAggregateArgs> = {
        [P in keyof T & keyof AggregateSubtitle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubtitle[P]>
      : GetScalarType<T[P], AggregateSubtitle[P]>
  }




  export type subtitleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: subtitleWhereInput
    orderBy?: subtitleOrderByWithAggregationInput | subtitleOrderByWithAggregationInput[]
    by: SubtitleScalarFieldEnum[] | SubtitleScalarFieldEnum
    having?: subtitleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubtitleCountAggregateInputType | true
    _avg?: SubtitleAvgAggregateInputType
    _sum?: SubtitleSumAggregateInputType
    _min?: SubtitleMinAggregateInputType
    _max?: SubtitleMaxAggregateInputType
  }

  export type SubtitleGroupByOutputType = {
    id: number
    content_id: number
    episode_id: number
    language: string
    file_url: string
    created_at: Date
    _count: SubtitleCountAggregateOutputType | null
    _avg: SubtitleAvgAggregateOutputType | null
    _sum: SubtitleSumAggregateOutputType | null
    _min: SubtitleMinAggregateOutputType | null
    _max: SubtitleMaxAggregateOutputType | null
  }

  type GetSubtitleGroupByPayload<T extends subtitleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubtitleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubtitleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubtitleGroupByOutputType[P]>
            : GetScalarType<T[P], SubtitleGroupByOutputType[P]>
        }
      >
    >


  export type subtitleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content_id?: boolean
    episode_id?: boolean
    language?: boolean
    file_url?: boolean
    created_at?: boolean
    content?: boolean | contentDefaultArgs<ExtArgs>
    episode?: boolean | episodeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subtitle"]>



  export type subtitleSelectScalar = {
    id?: boolean
    content_id?: boolean
    episode_id?: boolean
    language?: boolean
    file_url?: boolean
    created_at?: boolean
  }

  export type subtitleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content_id" | "episode_id" | "language" | "file_url" | "created_at", ExtArgs["result"]["subtitle"]>
  export type subtitleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    content?: boolean | contentDefaultArgs<ExtArgs>
    episode?: boolean | episodeDefaultArgs<ExtArgs>
  }

  export type $subtitlePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "subtitle"
    objects: {
      content: Prisma.$contentPayload<ExtArgs>
      episode: Prisma.$episodePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      content_id: number
      episode_id: number
      language: string
      file_url: string
      created_at: Date
    }, ExtArgs["result"]["subtitle"]>
    composites: {}
  }

  type subtitleGetPayload<S extends boolean | null | undefined | subtitleDefaultArgs> = $Result.GetResult<Prisma.$subtitlePayload, S>

  type subtitleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<subtitleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubtitleCountAggregateInputType | true
    }

  export interface subtitleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['subtitle'], meta: { name: 'subtitle' } }
    /**
     * Find zero or one Subtitle that matches the filter.
     * @param {subtitleFindUniqueArgs} args - Arguments to find a Subtitle
     * @example
     * // Get one Subtitle
     * const subtitle = await prisma.subtitle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends subtitleFindUniqueArgs>(args: SelectSubset<T, subtitleFindUniqueArgs<ExtArgs>>): Prisma__subtitleClient<$Result.GetResult<Prisma.$subtitlePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Subtitle that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {subtitleFindUniqueOrThrowArgs} args - Arguments to find a Subtitle
     * @example
     * // Get one Subtitle
     * const subtitle = await prisma.subtitle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends subtitleFindUniqueOrThrowArgs>(args: SelectSubset<T, subtitleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__subtitleClient<$Result.GetResult<Prisma.$subtitlePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subtitle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subtitleFindFirstArgs} args - Arguments to find a Subtitle
     * @example
     * // Get one Subtitle
     * const subtitle = await prisma.subtitle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends subtitleFindFirstArgs>(args?: SelectSubset<T, subtitleFindFirstArgs<ExtArgs>>): Prisma__subtitleClient<$Result.GetResult<Prisma.$subtitlePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subtitle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subtitleFindFirstOrThrowArgs} args - Arguments to find a Subtitle
     * @example
     * // Get one Subtitle
     * const subtitle = await prisma.subtitle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends subtitleFindFirstOrThrowArgs>(args?: SelectSubset<T, subtitleFindFirstOrThrowArgs<ExtArgs>>): Prisma__subtitleClient<$Result.GetResult<Prisma.$subtitlePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Subtitles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subtitleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subtitles
     * const subtitles = await prisma.subtitle.findMany()
     * 
     * // Get first 10 Subtitles
     * const subtitles = await prisma.subtitle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subtitleWithIdOnly = await prisma.subtitle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends subtitleFindManyArgs>(args?: SelectSubset<T, subtitleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$subtitlePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Subtitle.
     * @param {subtitleCreateArgs} args - Arguments to create a Subtitle.
     * @example
     * // Create one Subtitle
     * const Subtitle = await prisma.subtitle.create({
     *   data: {
     *     // ... data to create a Subtitle
     *   }
     * })
     * 
     */
    create<T extends subtitleCreateArgs>(args: SelectSubset<T, subtitleCreateArgs<ExtArgs>>): Prisma__subtitleClient<$Result.GetResult<Prisma.$subtitlePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Subtitles.
     * @param {subtitleCreateManyArgs} args - Arguments to create many Subtitles.
     * @example
     * // Create many Subtitles
     * const subtitle = await prisma.subtitle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends subtitleCreateManyArgs>(args?: SelectSubset<T, subtitleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Subtitle.
     * @param {subtitleDeleteArgs} args - Arguments to delete one Subtitle.
     * @example
     * // Delete one Subtitle
     * const Subtitle = await prisma.subtitle.delete({
     *   where: {
     *     // ... filter to delete one Subtitle
     *   }
     * })
     * 
     */
    delete<T extends subtitleDeleteArgs>(args: SelectSubset<T, subtitleDeleteArgs<ExtArgs>>): Prisma__subtitleClient<$Result.GetResult<Prisma.$subtitlePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Subtitle.
     * @param {subtitleUpdateArgs} args - Arguments to update one Subtitle.
     * @example
     * // Update one Subtitle
     * const subtitle = await prisma.subtitle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends subtitleUpdateArgs>(args: SelectSubset<T, subtitleUpdateArgs<ExtArgs>>): Prisma__subtitleClient<$Result.GetResult<Prisma.$subtitlePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Subtitles.
     * @param {subtitleDeleteManyArgs} args - Arguments to filter Subtitles to delete.
     * @example
     * // Delete a few Subtitles
     * const { count } = await prisma.subtitle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends subtitleDeleteManyArgs>(args?: SelectSubset<T, subtitleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subtitles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subtitleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subtitles
     * const subtitle = await prisma.subtitle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends subtitleUpdateManyArgs>(args: SelectSubset<T, subtitleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subtitle.
     * @param {subtitleUpsertArgs} args - Arguments to update or create a Subtitle.
     * @example
     * // Update or create a Subtitle
     * const subtitle = await prisma.subtitle.upsert({
     *   create: {
     *     // ... data to create a Subtitle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subtitle we want to update
     *   }
     * })
     */
    upsert<T extends subtitleUpsertArgs>(args: SelectSubset<T, subtitleUpsertArgs<ExtArgs>>): Prisma__subtitleClient<$Result.GetResult<Prisma.$subtitlePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Subtitles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subtitleCountArgs} args - Arguments to filter Subtitles to count.
     * @example
     * // Count the number of Subtitles
     * const count = await prisma.subtitle.count({
     *   where: {
     *     // ... the filter for the Subtitles we want to count
     *   }
     * })
    **/
    count<T extends subtitleCountArgs>(
      args?: Subset<T, subtitleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubtitleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subtitle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubtitleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubtitleAggregateArgs>(args: Subset<T, SubtitleAggregateArgs>): Prisma.PrismaPromise<GetSubtitleAggregateType<T>>

    /**
     * Group by Subtitle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subtitleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends subtitleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: subtitleGroupByArgs['orderBy'] }
        : { orderBy?: subtitleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, subtitleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubtitleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the subtitle model
   */
  readonly fields: subtitleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for subtitle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__subtitleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    content<T extends contentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, contentDefaultArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    episode<T extends episodeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, episodeDefaultArgs<ExtArgs>>): Prisma__episodeClient<$Result.GetResult<Prisma.$episodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the subtitle model
   */
  interface subtitleFieldRefs {
    readonly id: FieldRef<"subtitle", 'Int'>
    readonly content_id: FieldRef<"subtitle", 'Int'>
    readonly episode_id: FieldRef<"subtitle", 'Int'>
    readonly language: FieldRef<"subtitle", 'String'>
    readonly file_url: FieldRef<"subtitle", 'String'>
    readonly created_at: FieldRef<"subtitle", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * subtitle findUnique
   */
  export type subtitleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subtitle
     */
    select?: subtitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subtitle
     */
    omit?: subtitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subtitleInclude<ExtArgs> | null
    /**
     * Filter, which subtitle to fetch.
     */
    where: subtitleWhereUniqueInput
  }

  /**
   * subtitle findUniqueOrThrow
   */
  export type subtitleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subtitle
     */
    select?: subtitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subtitle
     */
    omit?: subtitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subtitleInclude<ExtArgs> | null
    /**
     * Filter, which subtitle to fetch.
     */
    where: subtitleWhereUniqueInput
  }

  /**
   * subtitle findFirst
   */
  export type subtitleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subtitle
     */
    select?: subtitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subtitle
     */
    omit?: subtitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subtitleInclude<ExtArgs> | null
    /**
     * Filter, which subtitle to fetch.
     */
    where?: subtitleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subtitles to fetch.
     */
    orderBy?: subtitleOrderByWithRelationInput | subtitleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for subtitles.
     */
    cursor?: subtitleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subtitles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subtitles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of subtitles.
     */
    distinct?: SubtitleScalarFieldEnum | SubtitleScalarFieldEnum[]
  }

  /**
   * subtitle findFirstOrThrow
   */
  export type subtitleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subtitle
     */
    select?: subtitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subtitle
     */
    omit?: subtitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subtitleInclude<ExtArgs> | null
    /**
     * Filter, which subtitle to fetch.
     */
    where?: subtitleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subtitles to fetch.
     */
    orderBy?: subtitleOrderByWithRelationInput | subtitleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for subtitles.
     */
    cursor?: subtitleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subtitles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subtitles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of subtitles.
     */
    distinct?: SubtitleScalarFieldEnum | SubtitleScalarFieldEnum[]
  }

  /**
   * subtitle findMany
   */
  export type subtitleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subtitle
     */
    select?: subtitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subtitle
     */
    omit?: subtitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subtitleInclude<ExtArgs> | null
    /**
     * Filter, which subtitles to fetch.
     */
    where?: subtitleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subtitles to fetch.
     */
    orderBy?: subtitleOrderByWithRelationInput | subtitleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing subtitles.
     */
    cursor?: subtitleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subtitles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subtitles.
     */
    skip?: number
    distinct?: SubtitleScalarFieldEnum | SubtitleScalarFieldEnum[]
  }

  /**
   * subtitle create
   */
  export type subtitleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subtitle
     */
    select?: subtitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subtitle
     */
    omit?: subtitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subtitleInclude<ExtArgs> | null
    /**
     * The data needed to create a subtitle.
     */
    data: XOR<subtitleCreateInput, subtitleUncheckedCreateInput>
  }

  /**
   * subtitle createMany
   */
  export type subtitleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many subtitles.
     */
    data: subtitleCreateManyInput | subtitleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * subtitle update
   */
  export type subtitleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subtitle
     */
    select?: subtitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subtitle
     */
    omit?: subtitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subtitleInclude<ExtArgs> | null
    /**
     * The data needed to update a subtitle.
     */
    data: XOR<subtitleUpdateInput, subtitleUncheckedUpdateInput>
    /**
     * Choose, which subtitle to update.
     */
    where: subtitleWhereUniqueInput
  }

  /**
   * subtitle updateMany
   */
  export type subtitleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update subtitles.
     */
    data: XOR<subtitleUpdateManyMutationInput, subtitleUncheckedUpdateManyInput>
    /**
     * Filter which subtitles to update
     */
    where?: subtitleWhereInput
    /**
     * Limit how many subtitles to update.
     */
    limit?: number
  }

  /**
   * subtitle upsert
   */
  export type subtitleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subtitle
     */
    select?: subtitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subtitle
     */
    omit?: subtitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subtitleInclude<ExtArgs> | null
    /**
     * The filter to search for the subtitle to update in case it exists.
     */
    where: subtitleWhereUniqueInput
    /**
     * In case the subtitle found by the `where` argument doesn't exist, create a new subtitle with this data.
     */
    create: XOR<subtitleCreateInput, subtitleUncheckedCreateInput>
    /**
     * In case the subtitle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<subtitleUpdateInput, subtitleUncheckedUpdateInput>
  }

  /**
   * subtitle delete
   */
  export type subtitleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subtitle
     */
    select?: subtitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subtitle
     */
    omit?: subtitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subtitleInclude<ExtArgs> | null
    /**
     * Filter which subtitle to delete.
     */
    where: subtitleWhereUniqueInput
  }

  /**
   * subtitle deleteMany
   */
  export type subtitleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which subtitles to delete
     */
    where?: subtitleWhereInput
    /**
     * Limit how many subtitles to delete.
     */
    limit?: number
  }

  /**
   * subtitle without action
   */
  export type subtitleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subtitle
     */
    select?: subtitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subtitle
     */
    omit?: subtitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subtitleInclude<ExtArgs> | null
  }


  /**
   * Model trendingcontent
   */

  export type AggregateTrendingcontent = {
    _count: TrendingcontentCountAggregateOutputType | null
    _avg: TrendingcontentAvgAggregateOutputType | null
    _sum: TrendingcontentSumAggregateOutputType | null
    _min: TrendingcontentMinAggregateOutputType | null
    _max: TrendingcontentMaxAggregateOutputType | null
  }

  export type TrendingcontentAvgAggregateOutputType = {
    id: number | null
    content_id: number | null
    view_count: number | null
  }

  export type TrendingcontentSumAggregateOutputType = {
    id: number | null
    content_id: number | null
    view_count: number | null
  }

  export type TrendingcontentMinAggregateOutputType = {
    id: number | null
    content_id: number | null
    week_start: Date | null
    view_count: number | null
    created_at: Date | null
  }

  export type TrendingcontentMaxAggregateOutputType = {
    id: number | null
    content_id: number | null
    week_start: Date | null
    view_count: number | null
    created_at: Date | null
  }

  export type TrendingcontentCountAggregateOutputType = {
    id: number
    content_id: number
    week_start: number
    view_count: number
    created_at: number
    _all: number
  }


  export type TrendingcontentAvgAggregateInputType = {
    id?: true
    content_id?: true
    view_count?: true
  }

  export type TrendingcontentSumAggregateInputType = {
    id?: true
    content_id?: true
    view_count?: true
  }

  export type TrendingcontentMinAggregateInputType = {
    id?: true
    content_id?: true
    week_start?: true
    view_count?: true
    created_at?: true
  }

  export type TrendingcontentMaxAggregateInputType = {
    id?: true
    content_id?: true
    week_start?: true
    view_count?: true
    created_at?: true
  }

  export type TrendingcontentCountAggregateInputType = {
    id?: true
    content_id?: true
    week_start?: true
    view_count?: true
    created_at?: true
    _all?: true
  }

  export type TrendingcontentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which trendingcontent to aggregate.
     */
    where?: trendingcontentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trendingcontents to fetch.
     */
    orderBy?: trendingcontentOrderByWithRelationInput | trendingcontentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: trendingcontentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trendingcontents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trendingcontents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned trendingcontents
    **/
    _count?: true | TrendingcontentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrendingcontentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrendingcontentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrendingcontentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrendingcontentMaxAggregateInputType
  }

  export type GetTrendingcontentAggregateType<T extends TrendingcontentAggregateArgs> = {
        [P in keyof T & keyof AggregateTrendingcontent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrendingcontent[P]>
      : GetScalarType<T[P], AggregateTrendingcontent[P]>
  }




  export type trendingcontentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: trendingcontentWhereInput
    orderBy?: trendingcontentOrderByWithAggregationInput | trendingcontentOrderByWithAggregationInput[]
    by: TrendingcontentScalarFieldEnum[] | TrendingcontentScalarFieldEnum
    having?: trendingcontentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrendingcontentCountAggregateInputType | true
    _avg?: TrendingcontentAvgAggregateInputType
    _sum?: TrendingcontentSumAggregateInputType
    _min?: TrendingcontentMinAggregateInputType
    _max?: TrendingcontentMaxAggregateInputType
  }

  export type TrendingcontentGroupByOutputType = {
    id: number
    content_id: number
    week_start: Date
    view_count: number
    created_at: Date
    _count: TrendingcontentCountAggregateOutputType | null
    _avg: TrendingcontentAvgAggregateOutputType | null
    _sum: TrendingcontentSumAggregateOutputType | null
    _min: TrendingcontentMinAggregateOutputType | null
    _max: TrendingcontentMaxAggregateOutputType | null
  }

  type GetTrendingcontentGroupByPayload<T extends trendingcontentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrendingcontentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrendingcontentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrendingcontentGroupByOutputType[P]>
            : GetScalarType<T[P], TrendingcontentGroupByOutputType[P]>
        }
      >
    >


  export type trendingcontentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content_id?: boolean
    week_start?: boolean
    view_count?: boolean
    created_at?: boolean
    content?: boolean | contentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trendingcontent"]>



  export type trendingcontentSelectScalar = {
    id?: boolean
    content_id?: boolean
    week_start?: boolean
    view_count?: boolean
    created_at?: boolean
  }

  export type trendingcontentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content_id" | "week_start" | "view_count" | "created_at", ExtArgs["result"]["trendingcontent"]>
  export type trendingcontentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    content?: boolean | contentDefaultArgs<ExtArgs>
  }

  export type $trendingcontentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "trendingcontent"
    objects: {
      content: Prisma.$contentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      content_id: number
      week_start: Date
      view_count: number
      created_at: Date
    }, ExtArgs["result"]["trendingcontent"]>
    composites: {}
  }

  type trendingcontentGetPayload<S extends boolean | null | undefined | trendingcontentDefaultArgs> = $Result.GetResult<Prisma.$trendingcontentPayload, S>

  type trendingcontentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<trendingcontentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TrendingcontentCountAggregateInputType | true
    }

  export interface trendingcontentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['trendingcontent'], meta: { name: 'trendingcontent' } }
    /**
     * Find zero or one Trendingcontent that matches the filter.
     * @param {trendingcontentFindUniqueArgs} args - Arguments to find a Trendingcontent
     * @example
     * // Get one Trendingcontent
     * const trendingcontent = await prisma.trendingcontent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends trendingcontentFindUniqueArgs>(args: SelectSubset<T, trendingcontentFindUniqueArgs<ExtArgs>>): Prisma__trendingcontentClient<$Result.GetResult<Prisma.$trendingcontentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Trendingcontent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {trendingcontentFindUniqueOrThrowArgs} args - Arguments to find a Trendingcontent
     * @example
     * // Get one Trendingcontent
     * const trendingcontent = await prisma.trendingcontent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends trendingcontentFindUniqueOrThrowArgs>(args: SelectSubset<T, trendingcontentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__trendingcontentClient<$Result.GetResult<Prisma.$trendingcontentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Trendingcontent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trendingcontentFindFirstArgs} args - Arguments to find a Trendingcontent
     * @example
     * // Get one Trendingcontent
     * const trendingcontent = await prisma.trendingcontent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends trendingcontentFindFirstArgs>(args?: SelectSubset<T, trendingcontentFindFirstArgs<ExtArgs>>): Prisma__trendingcontentClient<$Result.GetResult<Prisma.$trendingcontentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Trendingcontent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trendingcontentFindFirstOrThrowArgs} args - Arguments to find a Trendingcontent
     * @example
     * // Get one Trendingcontent
     * const trendingcontent = await prisma.trendingcontent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends trendingcontentFindFirstOrThrowArgs>(args?: SelectSubset<T, trendingcontentFindFirstOrThrowArgs<ExtArgs>>): Prisma__trendingcontentClient<$Result.GetResult<Prisma.$trendingcontentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Trendingcontents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trendingcontentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trendingcontents
     * const trendingcontents = await prisma.trendingcontent.findMany()
     * 
     * // Get first 10 Trendingcontents
     * const trendingcontents = await prisma.trendingcontent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trendingcontentWithIdOnly = await prisma.trendingcontent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends trendingcontentFindManyArgs>(args?: SelectSubset<T, trendingcontentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$trendingcontentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Trendingcontent.
     * @param {trendingcontentCreateArgs} args - Arguments to create a Trendingcontent.
     * @example
     * // Create one Trendingcontent
     * const Trendingcontent = await prisma.trendingcontent.create({
     *   data: {
     *     // ... data to create a Trendingcontent
     *   }
     * })
     * 
     */
    create<T extends trendingcontentCreateArgs>(args: SelectSubset<T, trendingcontentCreateArgs<ExtArgs>>): Prisma__trendingcontentClient<$Result.GetResult<Prisma.$trendingcontentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Trendingcontents.
     * @param {trendingcontentCreateManyArgs} args - Arguments to create many Trendingcontents.
     * @example
     * // Create many Trendingcontents
     * const trendingcontent = await prisma.trendingcontent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends trendingcontentCreateManyArgs>(args?: SelectSubset<T, trendingcontentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Trendingcontent.
     * @param {trendingcontentDeleteArgs} args - Arguments to delete one Trendingcontent.
     * @example
     * // Delete one Trendingcontent
     * const Trendingcontent = await prisma.trendingcontent.delete({
     *   where: {
     *     // ... filter to delete one Trendingcontent
     *   }
     * })
     * 
     */
    delete<T extends trendingcontentDeleteArgs>(args: SelectSubset<T, trendingcontentDeleteArgs<ExtArgs>>): Prisma__trendingcontentClient<$Result.GetResult<Prisma.$trendingcontentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Trendingcontent.
     * @param {trendingcontentUpdateArgs} args - Arguments to update one Trendingcontent.
     * @example
     * // Update one Trendingcontent
     * const trendingcontent = await prisma.trendingcontent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends trendingcontentUpdateArgs>(args: SelectSubset<T, trendingcontentUpdateArgs<ExtArgs>>): Prisma__trendingcontentClient<$Result.GetResult<Prisma.$trendingcontentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Trendingcontents.
     * @param {trendingcontentDeleteManyArgs} args - Arguments to filter Trendingcontents to delete.
     * @example
     * // Delete a few Trendingcontents
     * const { count } = await prisma.trendingcontent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends trendingcontentDeleteManyArgs>(args?: SelectSubset<T, trendingcontentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trendingcontents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trendingcontentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trendingcontents
     * const trendingcontent = await prisma.trendingcontent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends trendingcontentUpdateManyArgs>(args: SelectSubset<T, trendingcontentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Trendingcontent.
     * @param {trendingcontentUpsertArgs} args - Arguments to update or create a Trendingcontent.
     * @example
     * // Update or create a Trendingcontent
     * const trendingcontent = await prisma.trendingcontent.upsert({
     *   create: {
     *     // ... data to create a Trendingcontent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Trendingcontent we want to update
     *   }
     * })
     */
    upsert<T extends trendingcontentUpsertArgs>(args: SelectSubset<T, trendingcontentUpsertArgs<ExtArgs>>): Prisma__trendingcontentClient<$Result.GetResult<Prisma.$trendingcontentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Trendingcontents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trendingcontentCountArgs} args - Arguments to filter Trendingcontents to count.
     * @example
     * // Count the number of Trendingcontents
     * const count = await prisma.trendingcontent.count({
     *   where: {
     *     // ... the filter for the Trendingcontents we want to count
     *   }
     * })
    **/
    count<T extends trendingcontentCountArgs>(
      args?: Subset<T, trendingcontentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrendingcontentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Trendingcontent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingcontentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrendingcontentAggregateArgs>(args: Subset<T, TrendingcontentAggregateArgs>): Prisma.PrismaPromise<GetTrendingcontentAggregateType<T>>

    /**
     * Group by Trendingcontent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trendingcontentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends trendingcontentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: trendingcontentGroupByArgs['orderBy'] }
        : { orderBy?: trendingcontentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, trendingcontentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrendingcontentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the trendingcontent model
   */
  readonly fields: trendingcontentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for trendingcontent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__trendingcontentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    content<T extends contentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, contentDefaultArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the trendingcontent model
   */
  interface trendingcontentFieldRefs {
    readonly id: FieldRef<"trendingcontent", 'Int'>
    readonly content_id: FieldRef<"trendingcontent", 'Int'>
    readonly week_start: FieldRef<"trendingcontent", 'DateTime'>
    readonly view_count: FieldRef<"trendingcontent", 'Int'>
    readonly created_at: FieldRef<"trendingcontent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * trendingcontent findUnique
   */
  export type trendingcontentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trendingcontent
     */
    select?: trendingcontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trendingcontent
     */
    omit?: trendingcontentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trendingcontentInclude<ExtArgs> | null
    /**
     * Filter, which trendingcontent to fetch.
     */
    where: trendingcontentWhereUniqueInput
  }

  /**
   * trendingcontent findUniqueOrThrow
   */
  export type trendingcontentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trendingcontent
     */
    select?: trendingcontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trendingcontent
     */
    omit?: trendingcontentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trendingcontentInclude<ExtArgs> | null
    /**
     * Filter, which trendingcontent to fetch.
     */
    where: trendingcontentWhereUniqueInput
  }

  /**
   * trendingcontent findFirst
   */
  export type trendingcontentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trendingcontent
     */
    select?: trendingcontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trendingcontent
     */
    omit?: trendingcontentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trendingcontentInclude<ExtArgs> | null
    /**
     * Filter, which trendingcontent to fetch.
     */
    where?: trendingcontentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trendingcontents to fetch.
     */
    orderBy?: trendingcontentOrderByWithRelationInput | trendingcontentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for trendingcontents.
     */
    cursor?: trendingcontentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trendingcontents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trendingcontents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of trendingcontents.
     */
    distinct?: TrendingcontentScalarFieldEnum | TrendingcontentScalarFieldEnum[]
  }

  /**
   * trendingcontent findFirstOrThrow
   */
  export type trendingcontentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trendingcontent
     */
    select?: trendingcontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trendingcontent
     */
    omit?: trendingcontentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trendingcontentInclude<ExtArgs> | null
    /**
     * Filter, which trendingcontent to fetch.
     */
    where?: trendingcontentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trendingcontents to fetch.
     */
    orderBy?: trendingcontentOrderByWithRelationInput | trendingcontentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for trendingcontents.
     */
    cursor?: trendingcontentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trendingcontents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trendingcontents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of trendingcontents.
     */
    distinct?: TrendingcontentScalarFieldEnum | TrendingcontentScalarFieldEnum[]
  }

  /**
   * trendingcontent findMany
   */
  export type trendingcontentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trendingcontent
     */
    select?: trendingcontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trendingcontent
     */
    omit?: trendingcontentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trendingcontentInclude<ExtArgs> | null
    /**
     * Filter, which trendingcontents to fetch.
     */
    where?: trendingcontentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trendingcontents to fetch.
     */
    orderBy?: trendingcontentOrderByWithRelationInput | trendingcontentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing trendingcontents.
     */
    cursor?: trendingcontentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trendingcontents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trendingcontents.
     */
    skip?: number
    distinct?: TrendingcontentScalarFieldEnum | TrendingcontentScalarFieldEnum[]
  }

  /**
   * trendingcontent create
   */
  export type trendingcontentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trendingcontent
     */
    select?: trendingcontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trendingcontent
     */
    omit?: trendingcontentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trendingcontentInclude<ExtArgs> | null
    /**
     * The data needed to create a trendingcontent.
     */
    data: XOR<trendingcontentCreateInput, trendingcontentUncheckedCreateInput>
  }

  /**
   * trendingcontent createMany
   */
  export type trendingcontentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many trendingcontents.
     */
    data: trendingcontentCreateManyInput | trendingcontentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * trendingcontent update
   */
  export type trendingcontentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trendingcontent
     */
    select?: trendingcontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trendingcontent
     */
    omit?: trendingcontentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trendingcontentInclude<ExtArgs> | null
    /**
     * The data needed to update a trendingcontent.
     */
    data: XOR<trendingcontentUpdateInput, trendingcontentUncheckedUpdateInput>
    /**
     * Choose, which trendingcontent to update.
     */
    where: trendingcontentWhereUniqueInput
  }

  /**
   * trendingcontent updateMany
   */
  export type trendingcontentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update trendingcontents.
     */
    data: XOR<trendingcontentUpdateManyMutationInput, trendingcontentUncheckedUpdateManyInput>
    /**
     * Filter which trendingcontents to update
     */
    where?: trendingcontentWhereInput
    /**
     * Limit how many trendingcontents to update.
     */
    limit?: number
  }

  /**
   * trendingcontent upsert
   */
  export type trendingcontentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trendingcontent
     */
    select?: trendingcontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trendingcontent
     */
    omit?: trendingcontentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trendingcontentInclude<ExtArgs> | null
    /**
     * The filter to search for the trendingcontent to update in case it exists.
     */
    where: trendingcontentWhereUniqueInput
    /**
     * In case the trendingcontent found by the `where` argument doesn't exist, create a new trendingcontent with this data.
     */
    create: XOR<trendingcontentCreateInput, trendingcontentUncheckedCreateInput>
    /**
     * In case the trendingcontent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<trendingcontentUpdateInput, trendingcontentUncheckedUpdateInput>
  }

  /**
   * trendingcontent delete
   */
  export type trendingcontentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trendingcontent
     */
    select?: trendingcontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trendingcontent
     */
    omit?: trendingcontentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trendingcontentInclude<ExtArgs> | null
    /**
     * Filter which trendingcontent to delete.
     */
    where: trendingcontentWhereUniqueInput
  }

  /**
   * trendingcontent deleteMany
   */
  export type trendingcontentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which trendingcontents to delete
     */
    where?: trendingcontentWhereInput
    /**
     * Limit how many trendingcontents to delete.
     */
    limit?: number
  }

  /**
   * trendingcontent without action
   */
  export type trendingcontentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trendingcontent
     */
    select?: trendingcontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trendingcontent
     */
    omit?: trendingcontentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trendingcontentInclude<ExtArgs> | null
  }


  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    role: $Enums.user_role | null
    created_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    role: $Enums.user_role | null
    created_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    role: number
    created_at: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    created_at?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    created_at?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    created_at?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    role: $Enums.user_role
    created_at: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    created_at?: boolean
    bookmark?: boolean | user$bookmarkArgs<ExtArgs>
    comment?: boolean | user$commentArgs<ExtArgs>
    notification?: boolean | user$notificationArgs<ExtArgs>
    rating?: boolean | user$ratingArgs<ExtArgs>
    reportcontent?: boolean | user$reportcontentArgs<ExtArgs>
    searchlog?: boolean | user$searchlogArgs<ExtArgs>
    watchhistory?: boolean | user$watchhistoryArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type userSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    created_at?: boolean
  }

  export type userOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "role" | "created_at", ExtArgs["result"]["user"]>
  export type userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookmark?: boolean | user$bookmarkArgs<ExtArgs>
    comment?: boolean | user$commentArgs<ExtArgs>
    notification?: boolean | user$notificationArgs<ExtArgs>
    rating?: boolean | user$ratingArgs<ExtArgs>
    reportcontent?: boolean | user$reportcontentArgs<ExtArgs>
    searchlog?: boolean | user$searchlogArgs<ExtArgs>
    watchhistory?: boolean | user$watchhistoryArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {
      bookmark: Prisma.$bookmarkPayload<ExtArgs>[]
      comment: Prisma.$commentPayload<ExtArgs>[]
      notification: Prisma.$notificationPayload<ExtArgs>[]
      rating: Prisma.$ratingPayload<ExtArgs>[]
      reportcontent: Prisma.$reportcontentPayload<ExtArgs>[]
      searchlog: Prisma.$searchlogPayload<ExtArgs>[]
      watchhistory: Prisma.$watchhistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      role: $Enums.user_role
      created_at: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<userFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userFindUniqueArgs>(args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(args: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userFindFirstArgs>(args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends userFindManyArgs>(args?: SelectSubset<T, userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends userCreateArgs>(args: SelectSubset<T, userCreateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {userCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userCreateManyArgs>(args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends userDeleteArgs>(args: SelectSubset<T, userDeleteArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userUpdateArgs>(args: SelectSubset<T, userUpdateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userDeleteManyArgs>(args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userUpdateManyArgs>(args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends userUpsertArgs>(args: SelectSubset<T, userUpsertArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bookmark<T extends user$bookmarkArgs<ExtArgs> = {}>(args?: Subset<T, user$bookmarkArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bookmarkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comment<T extends user$commentArgs<ExtArgs> = {}>(args?: Subset<T, user$commentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$commentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notification<T extends user$notificationArgs<ExtArgs> = {}>(args?: Subset<T, user$notificationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rating<T extends user$ratingArgs<ExtArgs> = {}>(args?: Subset<T, user$ratingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ratingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reportcontent<T extends user$reportcontentArgs<ExtArgs> = {}>(args?: Subset<T, user$reportcontentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reportcontentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    searchlog<T extends user$searchlogArgs<ExtArgs> = {}>(args?: Subset<T, user$searchlogArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$searchlogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    watchhistory<T extends user$watchhistoryArgs<ExtArgs> = {}>(args?: Subset<T, user$watchhistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$watchhistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user model
   */
  interface userFieldRefs {
    readonly id: FieldRef<"user", 'Int'>
    readonly email: FieldRef<"user", 'String'>
    readonly password: FieldRef<"user", 'String'>
    readonly role: FieldRef<"user", 'user_role'>
    readonly created_at: FieldRef<"user", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }

  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }

  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }

  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }

  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
    /**
     * Limit how many users to delete.
     */
    limit?: number
  }

  /**
   * user.bookmark
   */
  export type user$bookmarkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bookmark
     */
    select?: bookmarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bookmark
     */
    omit?: bookmarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bookmarkInclude<ExtArgs> | null
    where?: bookmarkWhereInput
    orderBy?: bookmarkOrderByWithRelationInput | bookmarkOrderByWithRelationInput[]
    cursor?: bookmarkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * user.comment
   */
  export type user$commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comment
     */
    omit?: commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentInclude<ExtArgs> | null
    where?: commentWhereInput
    orderBy?: commentOrderByWithRelationInput | commentOrderByWithRelationInput[]
    cursor?: commentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * user.notification
   */
  export type user$notificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    where?: notificationWhereInput
    orderBy?: notificationOrderByWithRelationInput | notificationOrderByWithRelationInput[]
    cursor?: notificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * user.rating
   */
  export type user$ratingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rating
     */
    select?: ratingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rating
     */
    omit?: ratingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ratingInclude<ExtArgs> | null
    where?: ratingWhereInput
    orderBy?: ratingOrderByWithRelationInput | ratingOrderByWithRelationInput[]
    cursor?: ratingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * user.reportcontent
   */
  export type user$reportcontentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reportcontent
     */
    select?: reportcontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the reportcontent
     */
    omit?: reportcontentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reportcontentInclude<ExtArgs> | null
    where?: reportcontentWhereInput
    orderBy?: reportcontentOrderByWithRelationInput | reportcontentOrderByWithRelationInput[]
    cursor?: reportcontentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportcontentScalarFieldEnum | ReportcontentScalarFieldEnum[]
  }

  /**
   * user.searchlog
   */
  export type user$searchlogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the searchlog
     */
    select?: searchlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the searchlog
     */
    omit?: searchlogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: searchlogInclude<ExtArgs> | null
    where?: searchlogWhereInput
    orderBy?: searchlogOrderByWithRelationInput | searchlogOrderByWithRelationInput[]
    cursor?: searchlogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SearchlogScalarFieldEnum | SearchlogScalarFieldEnum[]
  }

  /**
   * user.watchhistory
   */
  export type user$watchhistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the watchhistory
     */
    select?: watchhistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the watchhistory
     */
    omit?: watchhistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: watchhistoryInclude<ExtArgs> | null
    where?: watchhistoryWhereInput
    orderBy?: watchhistoryOrderByWithRelationInput | watchhistoryOrderByWithRelationInput[]
    cursor?: watchhistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WatchhistoryScalarFieldEnum | WatchhistoryScalarFieldEnum[]
  }

  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
  }


  /**
   * Model watchhistory
   */

  export type AggregateWatchhistory = {
    _count: WatchhistoryCountAggregateOutputType | null
    _avg: WatchhistoryAvgAggregateOutputType | null
    _sum: WatchhistorySumAggregateOutputType | null
    _min: WatchhistoryMinAggregateOutputType | null
    _max: WatchhistoryMaxAggregateOutputType | null
  }

  export type WatchhistoryAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    content_id: number | null
    episode_id: number | null
    last_watch_seconds: number | null
  }

  export type WatchhistorySumAggregateOutputType = {
    id: number | null
    user_id: number | null
    content_id: number | null
    episode_id: number | null
    last_watch_seconds: number | null
  }

  export type WatchhistoryMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    content_id: number | null
    episode_id: number | null
    last_watch_seconds: number | null
    updated_at: Date | null
  }

  export type WatchhistoryMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    content_id: number | null
    episode_id: number | null
    last_watch_seconds: number | null
    updated_at: Date | null
  }

  export type WatchhistoryCountAggregateOutputType = {
    id: number
    user_id: number
    content_id: number
    episode_id: number
    last_watch_seconds: number
    updated_at: number
    _all: number
  }


  export type WatchhistoryAvgAggregateInputType = {
    id?: true
    user_id?: true
    content_id?: true
    episode_id?: true
    last_watch_seconds?: true
  }

  export type WatchhistorySumAggregateInputType = {
    id?: true
    user_id?: true
    content_id?: true
    episode_id?: true
    last_watch_seconds?: true
  }

  export type WatchhistoryMinAggregateInputType = {
    id?: true
    user_id?: true
    content_id?: true
    episode_id?: true
    last_watch_seconds?: true
    updated_at?: true
  }

  export type WatchhistoryMaxAggregateInputType = {
    id?: true
    user_id?: true
    content_id?: true
    episode_id?: true
    last_watch_seconds?: true
    updated_at?: true
  }

  export type WatchhistoryCountAggregateInputType = {
    id?: true
    user_id?: true
    content_id?: true
    episode_id?: true
    last_watch_seconds?: true
    updated_at?: true
    _all?: true
  }

  export type WatchhistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which watchhistory to aggregate.
     */
    where?: watchhistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of watchhistories to fetch.
     */
    orderBy?: watchhistoryOrderByWithRelationInput | watchhistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: watchhistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` watchhistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` watchhistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned watchhistories
    **/
    _count?: true | WatchhistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WatchhistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WatchhistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WatchhistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WatchhistoryMaxAggregateInputType
  }

  export type GetWatchhistoryAggregateType<T extends WatchhistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateWatchhistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWatchhistory[P]>
      : GetScalarType<T[P], AggregateWatchhistory[P]>
  }




  export type watchhistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: watchhistoryWhereInput
    orderBy?: watchhistoryOrderByWithAggregationInput | watchhistoryOrderByWithAggregationInput[]
    by: WatchhistoryScalarFieldEnum[] | WatchhistoryScalarFieldEnum
    having?: watchhistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WatchhistoryCountAggregateInputType | true
    _avg?: WatchhistoryAvgAggregateInputType
    _sum?: WatchhistorySumAggregateInputType
    _min?: WatchhistoryMinAggregateInputType
    _max?: WatchhistoryMaxAggregateInputType
  }

  export type WatchhistoryGroupByOutputType = {
    id: number
    user_id: number
    content_id: number
    episode_id: number
    last_watch_seconds: number
    updated_at: Date
    _count: WatchhistoryCountAggregateOutputType | null
    _avg: WatchhistoryAvgAggregateOutputType | null
    _sum: WatchhistorySumAggregateOutputType | null
    _min: WatchhistoryMinAggregateOutputType | null
    _max: WatchhistoryMaxAggregateOutputType | null
  }

  type GetWatchhistoryGroupByPayload<T extends watchhistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WatchhistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WatchhistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WatchhistoryGroupByOutputType[P]>
            : GetScalarType<T[P], WatchhistoryGroupByOutputType[P]>
        }
      >
    >


  export type watchhistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    content_id?: boolean
    episode_id?: boolean
    last_watch_seconds?: boolean
    updated_at?: boolean
    content?: boolean | contentDefaultArgs<ExtArgs>
    episode?: boolean | episodeDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["watchhistory"]>



  export type watchhistorySelectScalar = {
    id?: boolean
    user_id?: boolean
    content_id?: boolean
    episode_id?: boolean
    last_watch_seconds?: boolean
    updated_at?: boolean
  }

  export type watchhistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "content_id" | "episode_id" | "last_watch_seconds" | "updated_at", ExtArgs["result"]["watchhistory"]>
  export type watchhistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    content?: boolean | contentDefaultArgs<ExtArgs>
    episode?: boolean | episodeDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $watchhistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "watchhistory"
    objects: {
      content: Prisma.$contentPayload<ExtArgs>
      episode: Prisma.$episodePayload<ExtArgs>
      user: Prisma.$userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      content_id: number
      episode_id: number
      last_watch_seconds: number
      updated_at: Date
    }, ExtArgs["result"]["watchhistory"]>
    composites: {}
  }

  type watchhistoryGetPayload<S extends boolean | null | undefined | watchhistoryDefaultArgs> = $Result.GetResult<Prisma.$watchhistoryPayload, S>

  type watchhistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<watchhistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WatchhistoryCountAggregateInputType | true
    }

  export interface watchhistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['watchhistory'], meta: { name: 'watchhistory' } }
    /**
     * Find zero or one Watchhistory that matches the filter.
     * @param {watchhistoryFindUniqueArgs} args - Arguments to find a Watchhistory
     * @example
     * // Get one Watchhistory
     * const watchhistory = await prisma.watchhistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends watchhistoryFindUniqueArgs>(args: SelectSubset<T, watchhistoryFindUniqueArgs<ExtArgs>>): Prisma__watchhistoryClient<$Result.GetResult<Prisma.$watchhistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Watchhistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {watchhistoryFindUniqueOrThrowArgs} args - Arguments to find a Watchhistory
     * @example
     * // Get one Watchhistory
     * const watchhistory = await prisma.watchhistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends watchhistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, watchhistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__watchhistoryClient<$Result.GetResult<Prisma.$watchhistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Watchhistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {watchhistoryFindFirstArgs} args - Arguments to find a Watchhistory
     * @example
     * // Get one Watchhistory
     * const watchhistory = await prisma.watchhistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends watchhistoryFindFirstArgs>(args?: SelectSubset<T, watchhistoryFindFirstArgs<ExtArgs>>): Prisma__watchhistoryClient<$Result.GetResult<Prisma.$watchhistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Watchhistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {watchhistoryFindFirstOrThrowArgs} args - Arguments to find a Watchhistory
     * @example
     * // Get one Watchhistory
     * const watchhistory = await prisma.watchhistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends watchhistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, watchhistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__watchhistoryClient<$Result.GetResult<Prisma.$watchhistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Watchhistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {watchhistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Watchhistories
     * const watchhistories = await prisma.watchhistory.findMany()
     * 
     * // Get first 10 Watchhistories
     * const watchhistories = await prisma.watchhistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const watchhistoryWithIdOnly = await prisma.watchhistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends watchhistoryFindManyArgs>(args?: SelectSubset<T, watchhistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$watchhistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Watchhistory.
     * @param {watchhistoryCreateArgs} args - Arguments to create a Watchhistory.
     * @example
     * // Create one Watchhistory
     * const Watchhistory = await prisma.watchhistory.create({
     *   data: {
     *     // ... data to create a Watchhistory
     *   }
     * })
     * 
     */
    create<T extends watchhistoryCreateArgs>(args: SelectSubset<T, watchhistoryCreateArgs<ExtArgs>>): Prisma__watchhistoryClient<$Result.GetResult<Prisma.$watchhistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Watchhistories.
     * @param {watchhistoryCreateManyArgs} args - Arguments to create many Watchhistories.
     * @example
     * // Create many Watchhistories
     * const watchhistory = await prisma.watchhistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends watchhistoryCreateManyArgs>(args?: SelectSubset<T, watchhistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Watchhistory.
     * @param {watchhistoryDeleteArgs} args - Arguments to delete one Watchhistory.
     * @example
     * // Delete one Watchhistory
     * const Watchhistory = await prisma.watchhistory.delete({
     *   where: {
     *     // ... filter to delete one Watchhistory
     *   }
     * })
     * 
     */
    delete<T extends watchhistoryDeleteArgs>(args: SelectSubset<T, watchhistoryDeleteArgs<ExtArgs>>): Prisma__watchhistoryClient<$Result.GetResult<Prisma.$watchhistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Watchhistory.
     * @param {watchhistoryUpdateArgs} args - Arguments to update one Watchhistory.
     * @example
     * // Update one Watchhistory
     * const watchhistory = await prisma.watchhistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends watchhistoryUpdateArgs>(args: SelectSubset<T, watchhistoryUpdateArgs<ExtArgs>>): Prisma__watchhistoryClient<$Result.GetResult<Prisma.$watchhistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Watchhistories.
     * @param {watchhistoryDeleteManyArgs} args - Arguments to filter Watchhistories to delete.
     * @example
     * // Delete a few Watchhistories
     * const { count } = await prisma.watchhistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends watchhistoryDeleteManyArgs>(args?: SelectSubset<T, watchhistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Watchhistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {watchhistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Watchhistories
     * const watchhistory = await prisma.watchhistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends watchhistoryUpdateManyArgs>(args: SelectSubset<T, watchhistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Watchhistory.
     * @param {watchhistoryUpsertArgs} args - Arguments to update or create a Watchhistory.
     * @example
     * // Update or create a Watchhistory
     * const watchhistory = await prisma.watchhistory.upsert({
     *   create: {
     *     // ... data to create a Watchhistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Watchhistory we want to update
     *   }
     * })
     */
    upsert<T extends watchhistoryUpsertArgs>(args: SelectSubset<T, watchhistoryUpsertArgs<ExtArgs>>): Prisma__watchhistoryClient<$Result.GetResult<Prisma.$watchhistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Watchhistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {watchhistoryCountArgs} args - Arguments to filter Watchhistories to count.
     * @example
     * // Count the number of Watchhistories
     * const count = await prisma.watchhistory.count({
     *   where: {
     *     // ... the filter for the Watchhistories we want to count
     *   }
     * })
    **/
    count<T extends watchhistoryCountArgs>(
      args?: Subset<T, watchhistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WatchhistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Watchhistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchhistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WatchhistoryAggregateArgs>(args: Subset<T, WatchhistoryAggregateArgs>): Prisma.PrismaPromise<GetWatchhistoryAggregateType<T>>

    /**
     * Group by Watchhistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {watchhistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends watchhistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: watchhistoryGroupByArgs['orderBy'] }
        : { orderBy?: watchhistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, watchhistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWatchhistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the watchhistory model
   */
  readonly fields: watchhistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for watchhistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__watchhistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    content<T extends contentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, contentDefaultArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    episode<T extends episodeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, episodeDefaultArgs<ExtArgs>>): Prisma__episodeClient<$Result.GetResult<Prisma.$episodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the watchhistory model
   */
  interface watchhistoryFieldRefs {
    readonly id: FieldRef<"watchhistory", 'Int'>
    readonly user_id: FieldRef<"watchhistory", 'Int'>
    readonly content_id: FieldRef<"watchhistory", 'Int'>
    readonly episode_id: FieldRef<"watchhistory", 'Int'>
    readonly last_watch_seconds: FieldRef<"watchhistory", 'Int'>
    readonly updated_at: FieldRef<"watchhistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * watchhistory findUnique
   */
  export type watchhistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the watchhistory
     */
    select?: watchhistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the watchhistory
     */
    omit?: watchhistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: watchhistoryInclude<ExtArgs> | null
    /**
     * Filter, which watchhistory to fetch.
     */
    where: watchhistoryWhereUniqueInput
  }

  /**
   * watchhistory findUniqueOrThrow
   */
  export type watchhistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the watchhistory
     */
    select?: watchhistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the watchhistory
     */
    omit?: watchhistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: watchhistoryInclude<ExtArgs> | null
    /**
     * Filter, which watchhistory to fetch.
     */
    where: watchhistoryWhereUniqueInput
  }

  /**
   * watchhistory findFirst
   */
  export type watchhistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the watchhistory
     */
    select?: watchhistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the watchhistory
     */
    omit?: watchhistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: watchhistoryInclude<ExtArgs> | null
    /**
     * Filter, which watchhistory to fetch.
     */
    where?: watchhistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of watchhistories to fetch.
     */
    orderBy?: watchhistoryOrderByWithRelationInput | watchhistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for watchhistories.
     */
    cursor?: watchhistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` watchhistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` watchhistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of watchhistories.
     */
    distinct?: WatchhistoryScalarFieldEnum | WatchhistoryScalarFieldEnum[]
  }

  /**
   * watchhistory findFirstOrThrow
   */
  export type watchhistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the watchhistory
     */
    select?: watchhistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the watchhistory
     */
    omit?: watchhistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: watchhistoryInclude<ExtArgs> | null
    /**
     * Filter, which watchhistory to fetch.
     */
    where?: watchhistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of watchhistories to fetch.
     */
    orderBy?: watchhistoryOrderByWithRelationInput | watchhistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for watchhistories.
     */
    cursor?: watchhistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` watchhistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` watchhistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of watchhistories.
     */
    distinct?: WatchhistoryScalarFieldEnum | WatchhistoryScalarFieldEnum[]
  }

  /**
   * watchhistory findMany
   */
  export type watchhistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the watchhistory
     */
    select?: watchhistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the watchhistory
     */
    omit?: watchhistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: watchhistoryInclude<ExtArgs> | null
    /**
     * Filter, which watchhistories to fetch.
     */
    where?: watchhistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of watchhistories to fetch.
     */
    orderBy?: watchhistoryOrderByWithRelationInput | watchhistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing watchhistories.
     */
    cursor?: watchhistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` watchhistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` watchhistories.
     */
    skip?: number
    distinct?: WatchhistoryScalarFieldEnum | WatchhistoryScalarFieldEnum[]
  }

  /**
   * watchhistory create
   */
  export type watchhistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the watchhistory
     */
    select?: watchhistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the watchhistory
     */
    omit?: watchhistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: watchhistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a watchhistory.
     */
    data: XOR<watchhistoryCreateInput, watchhistoryUncheckedCreateInput>
  }

  /**
   * watchhistory createMany
   */
  export type watchhistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many watchhistories.
     */
    data: watchhistoryCreateManyInput | watchhistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * watchhistory update
   */
  export type watchhistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the watchhistory
     */
    select?: watchhistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the watchhistory
     */
    omit?: watchhistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: watchhistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a watchhistory.
     */
    data: XOR<watchhistoryUpdateInput, watchhistoryUncheckedUpdateInput>
    /**
     * Choose, which watchhistory to update.
     */
    where: watchhistoryWhereUniqueInput
  }

  /**
   * watchhistory updateMany
   */
  export type watchhistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update watchhistories.
     */
    data: XOR<watchhistoryUpdateManyMutationInput, watchhistoryUncheckedUpdateManyInput>
    /**
     * Filter which watchhistories to update
     */
    where?: watchhistoryWhereInput
    /**
     * Limit how many watchhistories to update.
     */
    limit?: number
  }

  /**
   * watchhistory upsert
   */
  export type watchhistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the watchhistory
     */
    select?: watchhistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the watchhistory
     */
    omit?: watchhistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: watchhistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the watchhistory to update in case it exists.
     */
    where: watchhistoryWhereUniqueInput
    /**
     * In case the watchhistory found by the `where` argument doesn't exist, create a new watchhistory with this data.
     */
    create: XOR<watchhistoryCreateInput, watchhistoryUncheckedCreateInput>
    /**
     * In case the watchhistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<watchhistoryUpdateInput, watchhistoryUncheckedUpdateInput>
  }

  /**
   * watchhistory delete
   */
  export type watchhistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the watchhistory
     */
    select?: watchhistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the watchhistory
     */
    omit?: watchhistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: watchhistoryInclude<ExtArgs> | null
    /**
     * Filter which watchhistory to delete.
     */
    where: watchhistoryWhereUniqueInput
  }

  /**
   * watchhistory deleteMany
   */
  export type watchhistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which watchhistories to delete
     */
    where?: watchhistoryWhereInput
    /**
     * Limit how many watchhistories to delete.
     */
    limit?: number
  }

  /**
   * watchhistory without action
   */
  export type watchhistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the watchhistory
     */
    select?: watchhistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the watchhistory
     */
    omit?: watchhistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: watchhistoryInclude<ExtArgs> | null
  }


  /**
   * Model episodesource
   */

  export type AggregateEpisodesource = {
    _count: EpisodesourceCountAggregateOutputType | null
    _avg: EpisodesourceAvgAggregateOutputType | null
    _sum: EpisodesourceSumAggregateOutputType | null
    _min: EpisodesourceMinAggregateOutputType | null
    _max: EpisodesourceMaxAggregateOutputType | null
  }

  export type EpisodesourceAvgAggregateOutputType = {
    id: number | null
    episode_id: number | null
    priority: number | null
  }

  export type EpisodesourceSumAggregateOutputType = {
    id: number | null
    episode_id: number | null
    priority: number | null
  }

  export type EpisodesourceMinAggregateOutputType = {
    id: number | null
    episode_id: number | null
    provider: string | null
    priority: number | null
    created_at: Date | null
  }

  export type EpisodesourceMaxAggregateOutputType = {
    id: number | null
    episode_id: number | null
    provider: string | null
    priority: number | null
    created_at: Date | null
  }

  export type EpisodesourceCountAggregateOutputType = {
    id: number
    episode_id: number
    provider: number
    priority: number
    created_at: number
    _all: number
  }


  export type EpisodesourceAvgAggregateInputType = {
    id?: true
    episode_id?: true
    priority?: true
  }

  export type EpisodesourceSumAggregateInputType = {
    id?: true
    episode_id?: true
    priority?: true
  }

  export type EpisodesourceMinAggregateInputType = {
    id?: true
    episode_id?: true
    provider?: true
    priority?: true
    created_at?: true
  }

  export type EpisodesourceMaxAggregateInputType = {
    id?: true
    episode_id?: true
    provider?: true
    priority?: true
    created_at?: true
  }

  export type EpisodesourceCountAggregateInputType = {
    id?: true
    episode_id?: true
    provider?: true
    priority?: true
    created_at?: true
    _all?: true
  }

  export type EpisodesourceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which episodesource to aggregate.
     */
    where?: episodesourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of episodesources to fetch.
     */
    orderBy?: episodesourceOrderByWithRelationInput | episodesourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: episodesourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` episodesources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` episodesources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned episodesources
    **/
    _count?: true | EpisodesourceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EpisodesourceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EpisodesourceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EpisodesourceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EpisodesourceMaxAggregateInputType
  }

  export type GetEpisodesourceAggregateType<T extends EpisodesourceAggregateArgs> = {
        [P in keyof T & keyof AggregateEpisodesource]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEpisodesource[P]>
      : GetScalarType<T[P], AggregateEpisodesource[P]>
  }




  export type episodesourceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: episodesourceWhereInput
    orderBy?: episodesourceOrderByWithAggregationInput | episodesourceOrderByWithAggregationInput[]
    by: EpisodesourceScalarFieldEnum[] | EpisodesourceScalarFieldEnum
    having?: episodesourceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EpisodesourceCountAggregateInputType | true
    _avg?: EpisodesourceAvgAggregateInputType
    _sum?: EpisodesourceSumAggregateInputType
    _min?: EpisodesourceMinAggregateInputType
    _max?: EpisodesourceMaxAggregateInputType
  }

  export type EpisodesourceGroupByOutputType = {
    id: number
    episode_id: number
    provider: string
    priority: number
    created_at: Date
    _count: EpisodesourceCountAggregateOutputType | null
    _avg: EpisodesourceAvgAggregateOutputType | null
    _sum: EpisodesourceSumAggregateOutputType | null
    _min: EpisodesourceMinAggregateOutputType | null
    _max: EpisodesourceMaxAggregateOutputType | null
  }

  type GetEpisodesourceGroupByPayload<T extends episodesourceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EpisodesourceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EpisodesourceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EpisodesourceGroupByOutputType[P]>
            : GetScalarType<T[P], EpisodesourceGroupByOutputType[P]>
        }
      >
    >


  export type episodesourceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episode_id?: boolean
    provider?: boolean
    priority?: boolean
    created_at?: boolean
    episode?: boolean | episodeDefaultArgs<ExtArgs>
    qualities?: boolean | episodesource$qualitiesArgs<ExtArgs>
    _count?: boolean | EpisodesourceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["episodesource"]>



  export type episodesourceSelectScalar = {
    id?: boolean
    episode_id?: boolean
    provider?: boolean
    priority?: boolean
    created_at?: boolean
  }

  export type episodesourceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "episode_id" | "provider" | "priority" | "created_at", ExtArgs["result"]["episodesource"]>
  export type episodesourceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episode?: boolean | episodeDefaultArgs<ExtArgs>
    qualities?: boolean | episodesource$qualitiesArgs<ExtArgs>
    _count?: boolean | EpisodesourceCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $episodesourcePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "episodesource"
    objects: {
      episode: Prisma.$episodePayload<ExtArgs>
      qualities: Prisma.$episodesourcequalityPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      episode_id: number
      provider: string
      priority: number
      created_at: Date
    }, ExtArgs["result"]["episodesource"]>
    composites: {}
  }

  type episodesourceGetPayload<S extends boolean | null | undefined | episodesourceDefaultArgs> = $Result.GetResult<Prisma.$episodesourcePayload, S>

  type episodesourceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<episodesourceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EpisodesourceCountAggregateInputType | true
    }

  export interface episodesourceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['episodesource'], meta: { name: 'episodesource' } }
    /**
     * Find zero or one Episodesource that matches the filter.
     * @param {episodesourceFindUniqueArgs} args - Arguments to find a Episodesource
     * @example
     * // Get one Episodesource
     * const episodesource = await prisma.episodesource.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends episodesourceFindUniqueArgs>(args: SelectSubset<T, episodesourceFindUniqueArgs<ExtArgs>>): Prisma__episodesourceClient<$Result.GetResult<Prisma.$episodesourcePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Episodesource that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {episodesourceFindUniqueOrThrowArgs} args - Arguments to find a Episodesource
     * @example
     * // Get one Episodesource
     * const episodesource = await prisma.episodesource.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends episodesourceFindUniqueOrThrowArgs>(args: SelectSubset<T, episodesourceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__episodesourceClient<$Result.GetResult<Prisma.$episodesourcePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Episodesource that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {episodesourceFindFirstArgs} args - Arguments to find a Episodesource
     * @example
     * // Get one Episodesource
     * const episodesource = await prisma.episodesource.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends episodesourceFindFirstArgs>(args?: SelectSubset<T, episodesourceFindFirstArgs<ExtArgs>>): Prisma__episodesourceClient<$Result.GetResult<Prisma.$episodesourcePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Episodesource that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {episodesourceFindFirstOrThrowArgs} args - Arguments to find a Episodesource
     * @example
     * // Get one Episodesource
     * const episodesource = await prisma.episodesource.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends episodesourceFindFirstOrThrowArgs>(args?: SelectSubset<T, episodesourceFindFirstOrThrowArgs<ExtArgs>>): Prisma__episodesourceClient<$Result.GetResult<Prisma.$episodesourcePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Episodesources that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {episodesourceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Episodesources
     * const episodesources = await prisma.episodesource.findMany()
     * 
     * // Get first 10 Episodesources
     * const episodesources = await prisma.episodesource.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const episodesourceWithIdOnly = await prisma.episodesource.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends episodesourceFindManyArgs>(args?: SelectSubset<T, episodesourceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$episodesourcePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Episodesource.
     * @param {episodesourceCreateArgs} args - Arguments to create a Episodesource.
     * @example
     * // Create one Episodesource
     * const Episodesource = await prisma.episodesource.create({
     *   data: {
     *     // ... data to create a Episodesource
     *   }
     * })
     * 
     */
    create<T extends episodesourceCreateArgs>(args: SelectSubset<T, episodesourceCreateArgs<ExtArgs>>): Prisma__episodesourceClient<$Result.GetResult<Prisma.$episodesourcePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Episodesources.
     * @param {episodesourceCreateManyArgs} args - Arguments to create many Episodesources.
     * @example
     * // Create many Episodesources
     * const episodesource = await prisma.episodesource.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends episodesourceCreateManyArgs>(args?: SelectSubset<T, episodesourceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Episodesource.
     * @param {episodesourceDeleteArgs} args - Arguments to delete one Episodesource.
     * @example
     * // Delete one Episodesource
     * const Episodesource = await prisma.episodesource.delete({
     *   where: {
     *     // ... filter to delete one Episodesource
     *   }
     * })
     * 
     */
    delete<T extends episodesourceDeleteArgs>(args: SelectSubset<T, episodesourceDeleteArgs<ExtArgs>>): Prisma__episodesourceClient<$Result.GetResult<Prisma.$episodesourcePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Episodesource.
     * @param {episodesourceUpdateArgs} args - Arguments to update one Episodesource.
     * @example
     * // Update one Episodesource
     * const episodesource = await prisma.episodesource.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends episodesourceUpdateArgs>(args: SelectSubset<T, episodesourceUpdateArgs<ExtArgs>>): Prisma__episodesourceClient<$Result.GetResult<Prisma.$episodesourcePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Episodesources.
     * @param {episodesourceDeleteManyArgs} args - Arguments to filter Episodesources to delete.
     * @example
     * // Delete a few Episodesources
     * const { count } = await prisma.episodesource.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends episodesourceDeleteManyArgs>(args?: SelectSubset<T, episodesourceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Episodesources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {episodesourceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Episodesources
     * const episodesource = await prisma.episodesource.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends episodesourceUpdateManyArgs>(args: SelectSubset<T, episodesourceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Episodesource.
     * @param {episodesourceUpsertArgs} args - Arguments to update or create a Episodesource.
     * @example
     * // Update or create a Episodesource
     * const episodesource = await prisma.episodesource.upsert({
     *   create: {
     *     // ... data to create a Episodesource
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Episodesource we want to update
     *   }
     * })
     */
    upsert<T extends episodesourceUpsertArgs>(args: SelectSubset<T, episodesourceUpsertArgs<ExtArgs>>): Prisma__episodesourceClient<$Result.GetResult<Prisma.$episodesourcePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Episodesources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {episodesourceCountArgs} args - Arguments to filter Episodesources to count.
     * @example
     * // Count the number of Episodesources
     * const count = await prisma.episodesource.count({
     *   where: {
     *     // ... the filter for the Episodesources we want to count
     *   }
     * })
    **/
    count<T extends episodesourceCountArgs>(
      args?: Subset<T, episodesourceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EpisodesourceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Episodesource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodesourceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EpisodesourceAggregateArgs>(args: Subset<T, EpisodesourceAggregateArgs>): Prisma.PrismaPromise<GetEpisodesourceAggregateType<T>>

    /**
     * Group by Episodesource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {episodesourceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends episodesourceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: episodesourceGroupByArgs['orderBy'] }
        : { orderBy?: episodesourceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, episodesourceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEpisodesourceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the episodesource model
   */
  readonly fields: episodesourceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for episodesource.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__episodesourceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    episode<T extends episodeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, episodeDefaultArgs<ExtArgs>>): Prisma__episodeClient<$Result.GetResult<Prisma.$episodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    qualities<T extends episodesource$qualitiesArgs<ExtArgs> = {}>(args?: Subset<T, episodesource$qualitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$episodesourcequalityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the episodesource model
   */
  interface episodesourceFieldRefs {
    readonly id: FieldRef<"episodesource", 'Int'>
    readonly episode_id: FieldRef<"episodesource", 'Int'>
    readonly provider: FieldRef<"episodesource", 'String'>
    readonly priority: FieldRef<"episodesource", 'Int'>
    readonly created_at: FieldRef<"episodesource", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * episodesource findUnique
   */
  export type episodesourceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episodesource
     */
    select?: episodesourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the episodesource
     */
    omit?: episodesourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodesourceInclude<ExtArgs> | null
    /**
     * Filter, which episodesource to fetch.
     */
    where: episodesourceWhereUniqueInput
  }

  /**
   * episodesource findUniqueOrThrow
   */
  export type episodesourceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episodesource
     */
    select?: episodesourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the episodesource
     */
    omit?: episodesourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodesourceInclude<ExtArgs> | null
    /**
     * Filter, which episodesource to fetch.
     */
    where: episodesourceWhereUniqueInput
  }

  /**
   * episodesource findFirst
   */
  export type episodesourceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episodesource
     */
    select?: episodesourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the episodesource
     */
    omit?: episodesourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodesourceInclude<ExtArgs> | null
    /**
     * Filter, which episodesource to fetch.
     */
    where?: episodesourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of episodesources to fetch.
     */
    orderBy?: episodesourceOrderByWithRelationInput | episodesourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for episodesources.
     */
    cursor?: episodesourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` episodesources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` episodesources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of episodesources.
     */
    distinct?: EpisodesourceScalarFieldEnum | EpisodesourceScalarFieldEnum[]
  }

  /**
   * episodesource findFirstOrThrow
   */
  export type episodesourceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episodesource
     */
    select?: episodesourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the episodesource
     */
    omit?: episodesourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodesourceInclude<ExtArgs> | null
    /**
     * Filter, which episodesource to fetch.
     */
    where?: episodesourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of episodesources to fetch.
     */
    orderBy?: episodesourceOrderByWithRelationInput | episodesourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for episodesources.
     */
    cursor?: episodesourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` episodesources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` episodesources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of episodesources.
     */
    distinct?: EpisodesourceScalarFieldEnum | EpisodesourceScalarFieldEnum[]
  }

  /**
   * episodesource findMany
   */
  export type episodesourceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episodesource
     */
    select?: episodesourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the episodesource
     */
    omit?: episodesourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodesourceInclude<ExtArgs> | null
    /**
     * Filter, which episodesources to fetch.
     */
    where?: episodesourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of episodesources to fetch.
     */
    orderBy?: episodesourceOrderByWithRelationInput | episodesourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing episodesources.
     */
    cursor?: episodesourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` episodesources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` episodesources.
     */
    skip?: number
    distinct?: EpisodesourceScalarFieldEnum | EpisodesourceScalarFieldEnum[]
  }

  /**
   * episodesource create
   */
  export type episodesourceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episodesource
     */
    select?: episodesourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the episodesource
     */
    omit?: episodesourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodesourceInclude<ExtArgs> | null
    /**
     * The data needed to create a episodesource.
     */
    data: XOR<episodesourceCreateInput, episodesourceUncheckedCreateInput>
  }

  /**
   * episodesource createMany
   */
  export type episodesourceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many episodesources.
     */
    data: episodesourceCreateManyInput | episodesourceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * episodesource update
   */
  export type episodesourceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episodesource
     */
    select?: episodesourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the episodesource
     */
    omit?: episodesourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodesourceInclude<ExtArgs> | null
    /**
     * The data needed to update a episodesource.
     */
    data: XOR<episodesourceUpdateInput, episodesourceUncheckedUpdateInput>
    /**
     * Choose, which episodesource to update.
     */
    where: episodesourceWhereUniqueInput
  }

  /**
   * episodesource updateMany
   */
  export type episodesourceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update episodesources.
     */
    data: XOR<episodesourceUpdateManyMutationInput, episodesourceUncheckedUpdateManyInput>
    /**
     * Filter which episodesources to update
     */
    where?: episodesourceWhereInput
    /**
     * Limit how many episodesources to update.
     */
    limit?: number
  }

  /**
   * episodesource upsert
   */
  export type episodesourceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episodesource
     */
    select?: episodesourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the episodesource
     */
    omit?: episodesourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodesourceInclude<ExtArgs> | null
    /**
     * The filter to search for the episodesource to update in case it exists.
     */
    where: episodesourceWhereUniqueInput
    /**
     * In case the episodesource found by the `where` argument doesn't exist, create a new episodesource with this data.
     */
    create: XOR<episodesourceCreateInput, episodesourceUncheckedCreateInput>
    /**
     * In case the episodesource was found with the provided `where` argument, update it with this data.
     */
    update: XOR<episodesourceUpdateInput, episodesourceUncheckedUpdateInput>
  }

  /**
   * episodesource delete
   */
  export type episodesourceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episodesource
     */
    select?: episodesourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the episodesource
     */
    omit?: episodesourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodesourceInclude<ExtArgs> | null
    /**
     * Filter which episodesource to delete.
     */
    where: episodesourceWhereUniqueInput
  }

  /**
   * episodesource deleteMany
   */
  export type episodesourceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which episodesources to delete
     */
    where?: episodesourceWhereInput
    /**
     * Limit how many episodesources to delete.
     */
    limit?: number
  }

  /**
   * episodesource.qualities
   */
  export type episodesource$qualitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episodesourcequality
     */
    select?: episodesourcequalitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the episodesourcequality
     */
    omit?: episodesourcequalityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodesourcequalityInclude<ExtArgs> | null
    where?: episodesourcequalityWhereInput
    orderBy?: episodesourcequalityOrderByWithRelationInput | episodesourcequalityOrderByWithRelationInput[]
    cursor?: episodesourcequalityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EpisodesourcequalityScalarFieldEnum | EpisodesourcequalityScalarFieldEnum[]
  }

  /**
   * episodesource without action
   */
  export type episodesourceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episodesource
     */
    select?: episodesourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the episodesource
     */
    omit?: episodesourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodesourceInclude<ExtArgs> | null
  }


  /**
   * Model episodesourcequality
   */

  export type AggregateEpisodesourcequality = {
    _count: EpisodesourcequalityCountAggregateOutputType | null
    _avg: EpisodesourcequalityAvgAggregateOutputType | null
    _sum: EpisodesourcequalitySumAggregateOutputType | null
    _min: EpisodesourcequalityMinAggregateOutputType | null
    _max: EpisodesourcequalityMaxAggregateOutputType | null
  }

  export type EpisodesourcequalityAvgAggregateOutputType = {
    id: number | null
    episodesource_id: number | null
  }

  export type EpisodesourcequalitySumAggregateOutputType = {
    id: number | null
    episodesource_id: number | null
  }

  export type EpisodesourcequalityMinAggregateOutputType = {
    id: number | null
    episodesource_id: number | null
    resolution: string | null
    url: string | null
    created_at: Date | null
  }

  export type EpisodesourcequalityMaxAggregateOutputType = {
    id: number | null
    episodesource_id: number | null
    resolution: string | null
    url: string | null
    created_at: Date | null
  }

  export type EpisodesourcequalityCountAggregateOutputType = {
    id: number
    episodesource_id: number
    resolution: number
    url: number
    created_at: number
    _all: number
  }


  export type EpisodesourcequalityAvgAggregateInputType = {
    id?: true
    episodesource_id?: true
  }

  export type EpisodesourcequalitySumAggregateInputType = {
    id?: true
    episodesource_id?: true
  }

  export type EpisodesourcequalityMinAggregateInputType = {
    id?: true
    episodesource_id?: true
    resolution?: true
    url?: true
    created_at?: true
  }

  export type EpisodesourcequalityMaxAggregateInputType = {
    id?: true
    episodesource_id?: true
    resolution?: true
    url?: true
    created_at?: true
  }

  export type EpisodesourcequalityCountAggregateInputType = {
    id?: true
    episodesource_id?: true
    resolution?: true
    url?: true
    created_at?: true
    _all?: true
  }

  export type EpisodesourcequalityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which episodesourcequality to aggregate.
     */
    where?: episodesourcequalityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of episodesourcequalities to fetch.
     */
    orderBy?: episodesourcequalityOrderByWithRelationInput | episodesourcequalityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: episodesourcequalityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` episodesourcequalities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` episodesourcequalities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned episodesourcequalities
    **/
    _count?: true | EpisodesourcequalityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EpisodesourcequalityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EpisodesourcequalitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EpisodesourcequalityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EpisodesourcequalityMaxAggregateInputType
  }

  export type GetEpisodesourcequalityAggregateType<T extends EpisodesourcequalityAggregateArgs> = {
        [P in keyof T & keyof AggregateEpisodesourcequality]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEpisodesourcequality[P]>
      : GetScalarType<T[P], AggregateEpisodesourcequality[P]>
  }




  export type episodesourcequalityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: episodesourcequalityWhereInput
    orderBy?: episodesourcequalityOrderByWithAggregationInput | episodesourcequalityOrderByWithAggregationInput[]
    by: EpisodesourcequalityScalarFieldEnum[] | EpisodesourcequalityScalarFieldEnum
    having?: episodesourcequalityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EpisodesourcequalityCountAggregateInputType | true
    _avg?: EpisodesourcequalityAvgAggregateInputType
    _sum?: EpisodesourcequalitySumAggregateInputType
    _min?: EpisodesourcequalityMinAggregateInputType
    _max?: EpisodesourcequalityMaxAggregateInputType
  }

  export type EpisodesourcequalityGroupByOutputType = {
    id: number
    episodesource_id: number
    resolution: string
    url: string
    created_at: Date
    _count: EpisodesourcequalityCountAggregateOutputType | null
    _avg: EpisodesourcequalityAvgAggregateOutputType | null
    _sum: EpisodesourcequalitySumAggregateOutputType | null
    _min: EpisodesourcequalityMinAggregateOutputType | null
    _max: EpisodesourcequalityMaxAggregateOutputType | null
  }

  type GetEpisodesourcequalityGroupByPayload<T extends episodesourcequalityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EpisodesourcequalityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EpisodesourcequalityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EpisodesourcequalityGroupByOutputType[P]>
            : GetScalarType<T[P], EpisodesourcequalityGroupByOutputType[P]>
        }
      >
    >


  export type episodesourcequalitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    episodesource_id?: boolean
    resolution?: boolean
    url?: boolean
    created_at?: boolean
    episodesource?: boolean | episodesourceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["episodesourcequality"]>



  export type episodesourcequalitySelectScalar = {
    id?: boolean
    episodesource_id?: boolean
    resolution?: boolean
    url?: boolean
    created_at?: boolean
  }

  export type episodesourcequalityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "episodesource_id" | "resolution" | "url" | "created_at", ExtArgs["result"]["episodesourcequality"]>
  export type episodesourcequalityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodesource?: boolean | episodesourceDefaultArgs<ExtArgs>
  }

  export type $episodesourcequalityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "episodesourcequality"
    objects: {
      episodesource: Prisma.$episodesourcePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      episodesource_id: number
      resolution: string
      url: string
      created_at: Date
    }, ExtArgs["result"]["episodesourcequality"]>
    composites: {}
  }

  type episodesourcequalityGetPayload<S extends boolean | null | undefined | episodesourcequalityDefaultArgs> = $Result.GetResult<Prisma.$episodesourcequalityPayload, S>

  type episodesourcequalityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<episodesourcequalityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EpisodesourcequalityCountAggregateInputType | true
    }

  export interface episodesourcequalityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['episodesourcequality'], meta: { name: 'episodesourcequality' } }
    /**
     * Find zero or one Episodesourcequality that matches the filter.
     * @param {episodesourcequalityFindUniqueArgs} args - Arguments to find a Episodesourcequality
     * @example
     * // Get one Episodesourcequality
     * const episodesourcequality = await prisma.episodesourcequality.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends episodesourcequalityFindUniqueArgs>(args: SelectSubset<T, episodesourcequalityFindUniqueArgs<ExtArgs>>): Prisma__episodesourcequalityClient<$Result.GetResult<Prisma.$episodesourcequalityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Episodesourcequality that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {episodesourcequalityFindUniqueOrThrowArgs} args - Arguments to find a Episodesourcequality
     * @example
     * // Get one Episodesourcequality
     * const episodesourcequality = await prisma.episodesourcequality.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends episodesourcequalityFindUniqueOrThrowArgs>(args: SelectSubset<T, episodesourcequalityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__episodesourcequalityClient<$Result.GetResult<Prisma.$episodesourcequalityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Episodesourcequality that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {episodesourcequalityFindFirstArgs} args - Arguments to find a Episodesourcequality
     * @example
     * // Get one Episodesourcequality
     * const episodesourcequality = await prisma.episodesourcequality.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends episodesourcequalityFindFirstArgs>(args?: SelectSubset<T, episodesourcequalityFindFirstArgs<ExtArgs>>): Prisma__episodesourcequalityClient<$Result.GetResult<Prisma.$episodesourcequalityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Episodesourcequality that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {episodesourcequalityFindFirstOrThrowArgs} args - Arguments to find a Episodesourcequality
     * @example
     * // Get one Episodesourcequality
     * const episodesourcequality = await prisma.episodesourcequality.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends episodesourcequalityFindFirstOrThrowArgs>(args?: SelectSubset<T, episodesourcequalityFindFirstOrThrowArgs<ExtArgs>>): Prisma__episodesourcequalityClient<$Result.GetResult<Prisma.$episodesourcequalityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Episodesourcequalities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {episodesourcequalityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Episodesourcequalities
     * const episodesourcequalities = await prisma.episodesourcequality.findMany()
     * 
     * // Get first 10 Episodesourcequalities
     * const episodesourcequalities = await prisma.episodesourcequality.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const episodesourcequalityWithIdOnly = await prisma.episodesourcequality.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends episodesourcequalityFindManyArgs>(args?: SelectSubset<T, episodesourcequalityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$episodesourcequalityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Episodesourcequality.
     * @param {episodesourcequalityCreateArgs} args - Arguments to create a Episodesourcequality.
     * @example
     * // Create one Episodesourcequality
     * const Episodesourcequality = await prisma.episodesourcequality.create({
     *   data: {
     *     // ... data to create a Episodesourcequality
     *   }
     * })
     * 
     */
    create<T extends episodesourcequalityCreateArgs>(args: SelectSubset<T, episodesourcequalityCreateArgs<ExtArgs>>): Prisma__episodesourcequalityClient<$Result.GetResult<Prisma.$episodesourcequalityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Episodesourcequalities.
     * @param {episodesourcequalityCreateManyArgs} args - Arguments to create many Episodesourcequalities.
     * @example
     * // Create many Episodesourcequalities
     * const episodesourcequality = await prisma.episodesourcequality.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends episodesourcequalityCreateManyArgs>(args?: SelectSubset<T, episodesourcequalityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Episodesourcequality.
     * @param {episodesourcequalityDeleteArgs} args - Arguments to delete one Episodesourcequality.
     * @example
     * // Delete one Episodesourcequality
     * const Episodesourcequality = await prisma.episodesourcequality.delete({
     *   where: {
     *     // ... filter to delete one Episodesourcequality
     *   }
     * })
     * 
     */
    delete<T extends episodesourcequalityDeleteArgs>(args: SelectSubset<T, episodesourcequalityDeleteArgs<ExtArgs>>): Prisma__episodesourcequalityClient<$Result.GetResult<Prisma.$episodesourcequalityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Episodesourcequality.
     * @param {episodesourcequalityUpdateArgs} args - Arguments to update one Episodesourcequality.
     * @example
     * // Update one Episodesourcequality
     * const episodesourcequality = await prisma.episodesourcequality.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends episodesourcequalityUpdateArgs>(args: SelectSubset<T, episodesourcequalityUpdateArgs<ExtArgs>>): Prisma__episodesourcequalityClient<$Result.GetResult<Prisma.$episodesourcequalityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Episodesourcequalities.
     * @param {episodesourcequalityDeleteManyArgs} args - Arguments to filter Episodesourcequalities to delete.
     * @example
     * // Delete a few Episodesourcequalities
     * const { count } = await prisma.episodesourcequality.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends episodesourcequalityDeleteManyArgs>(args?: SelectSubset<T, episodesourcequalityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Episodesourcequalities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {episodesourcequalityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Episodesourcequalities
     * const episodesourcequality = await prisma.episodesourcequality.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends episodesourcequalityUpdateManyArgs>(args: SelectSubset<T, episodesourcequalityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Episodesourcequality.
     * @param {episodesourcequalityUpsertArgs} args - Arguments to update or create a Episodesourcequality.
     * @example
     * // Update or create a Episodesourcequality
     * const episodesourcequality = await prisma.episodesourcequality.upsert({
     *   create: {
     *     // ... data to create a Episodesourcequality
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Episodesourcequality we want to update
     *   }
     * })
     */
    upsert<T extends episodesourcequalityUpsertArgs>(args: SelectSubset<T, episodesourcequalityUpsertArgs<ExtArgs>>): Prisma__episodesourcequalityClient<$Result.GetResult<Prisma.$episodesourcequalityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Episodesourcequalities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {episodesourcequalityCountArgs} args - Arguments to filter Episodesourcequalities to count.
     * @example
     * // Count the number of Episodesourcequalities
     * const count = await prisma.episodesourcequality.count({
     *   where: {
     *     // ... the filter for the Episodesourcequalities we want to count
     *   }
     * })
    **/
    count<T extends episodesourcequalityCountArgs>(
      args?: Subset<T, episodesourcequalityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EpisodesourcequalityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Episodesourcequality.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodesourcequalityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EpisodesourcequalityAggregateArgs>(args: Subset<T, EpisodesourcequalityAggregateArgs>): Prisma.PrismaPromise<GetEpisodesourcequalityAggregateType<T>>

    /**
     * Group by Episodesourcequality.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {episodesourcequalityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends episodesourcequalityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: episodesourcequalityGroupByArgs['orderBy'] }
        : { orderBy?: episodesourcequalityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, episodesourcequalityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEpisodesourcequalityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the episodesourcequality model
   */
  readonly fields: episodesourcequalityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for episodesourcequality.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__episodesourcequalityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    episodesource<T extends episodesourceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, episodesourceDefaultArgs<ExtArgs>>): Prisma__episodesourceClient<$Result.GetResult<Prisma.$episodesourcePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the episodesourcequality model
   */
  interface episodesourcequalityFieldRefs {
    readonly id: FieldRef<"episodesourcequality", 'Int'>
    readonly episodesource_id: FieldRef<"episodesourcequality", 'Int'>
    readonly resolution: FieldRef<"episodesourcequality", 'String'>
    readonly url: FieldRef<"episodesourcequality", 'String'>
    readonly created_at: FieldRef<"episodesourcequality", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * episodesourcequality findUnique
   */
  export type episodesourcequalityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episodesourcequality
     */
    select?: episodesourcequalitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the episodesourcequality
     */
    omit?: episodesourcequalityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodesourcequalityInclude<ExtArgs> | null
    /**
     * Filter, which episodesourcequality to fetch.
     */
    where: episodesourcequalityWhereUniqueInput
  }

  /**
   * episodesourcequality findUniqueOrThrow
   */
  export type episodesourcequalityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episodesourcequality
     */
    select?: episodesourcequalitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the episodesourcequality
     */
    omit?: episodesourcequalityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodesourcequalityInclude<ExtArgs> | null
    /**
     * Filter, which episodesourcequality to fetch.
     */
    where: episodesourcequalityWhereUniqueInput
  }

  /**
   * episodesourcequality findFirst
   */
  export type episodesourcequalityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episodesourcequality
     */
    select?: episodesourcequalitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the episodesourcequality
     */
    omit?: episodesourcequalityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodesourcequalityInclude<ExtArgs> | null
    /**
     * Filter, which episodesourcequality to fetch.
     */
    where?: episodesourcequalityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of episodesourcequalities to fetch.
     */
    orderBy?: episodesourcequalityOrderByWithRelationInput | episodesourcequalityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for episodesourcequalities.
     */
    cursor?: episodesourcequalityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` episodesourcequalities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` episodesourcequalities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of episodesourcequalities.
     */
    distinct?: EpisodesourcequalityScalarFieldEnum | EpisodesourcequalityScalarFieldEnum[]
  }

  /**
   * episodesourcequality findFirstOrThrow
   */
  export type episodesourcequalityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episodesourcequality
     */
    select?: episodesourcequalitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the episodesourcequality
     */
    omit?: episodesourcequalityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodesourcequalityInclude<ExtArgs> | null
    /**
     * Filter, which episodesourcequality to fetch.
     */
    where?: episodesourcequalityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of episodesourcequalities to fetch.
     */
    orderBy?: episodesourcequalityOrderByWithRelationInput | episodesourcequalityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for episodesourcequalities.
     */
    cursor?: episodesourcequalityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` episodesourcequalities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` episodesourcequalities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of episodesourcequalities.
     */
    distinct?: EpisodesourcequalityScalarFieldEnum | EpisodesourcequalityScalarFieldEnum[]
  }

  /**
   * episodesourcequality findMany
   */
  export type episodesourcequalityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episodesourcequality
     */
    select?: episodesourcequalitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the episodesourcequality
     */
    omit?: episodesourcequalityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodesourcequalityInclude<ExtArgs> | null
    /**
     * Filter, which episodesourcequalities to fetch.
     */
    where?: episodesourcequalityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of episodesourcequalities to fetch.
     */
    orderBy?: episodesourcequalityOrderByWithRelationInput | episodesourcequalityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing episodesourcequalities.
     */
    cursor?: episodesourcequalityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` episodesourcequalities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` episodesourcequalities.
     */
    skip?: number
    distinct?: EpisodesourcequalityScalarFieldEnum | EpisodesourcequalityScalarFieldEnum[]
  }

  /**
   * episodesourcequality create
   */
  export type episodesourcequalityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episodesourcequality
     */
    select?: episodesourcequalitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the episodesourcequality
     */
    omit?: episodesourcequalityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodesourcequalityInclude<ExtArgs> | null
    /**
     * The data needed to create a episodesourcequality.
     */
    data: XOR<episodesourcequalityCreateInput, episodesourcequalityUncheckedCreateInput>
  }

  /**
   * episodesourcequality createMany
   */
  export type episodesourcequalityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many episodesourcequalities.
     */
    data: episodesourcequalityCreateManyInput | episodesourcequalityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * episodesourcequality update
   */
  export type episodesourcequalityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episodesourcequality
     */
    select?: episodesourcequalitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the episodesourcequality
     */
    omit?: episodesourcequalityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodesourcequalityInclude<ExtArgs> | null
    /**
     * The data needed to update a episodesourcequality.
     */
    data: XOR<episodesourcequalityUpdateInput, episodesourcequalityUncheckedUpdateInput>
    /**
     * Choose, which episodesourcequality to update.
     */
    where: episodesourcequalityWhereUniqueInput
  }

  /**
   * episodesourcequality updateMany
   */
  export type episodesourcequalityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update episodesourcequalities.
     */
    data: XOR<episodesourcequalityUpdateManyMutationInput, episodesourcequalityUncheckedUpdateManyInput>
    /**
     * Filter which episodesourcequalities to update
     */
    where?: episodesourcequalityWhereInput
    /**
     * Limit how many episodesourcequalities to update.
     */
    limit?: number
  }

  /**
   * episodesourcequality upsert
   */
  export type episodesourcequalityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episodesourcequality
     */
    select?: episodesourcequalitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the episodesourcequality
     */
    omit?: episodesourcequalityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodesourcequalityInclude<ExtArgs> | null
    /**
     * The filter to search for the episodesourcequality to update in case it exists.
     */
    where: episodesourcequalityWhereUniqueInput
    /**
     * In case the episodesourcequality found by the `where` argument doesn't exist, create a new episodesourcequality with this data.
     */
    create: XOR<episodesourcequalityCreateInput, episodesourcequalityUncheckedCreateInput>
    /**
     * In case the episodesourcequality was found with the provided `where` argument, update it with this data.
     */
    update: XOR<episodesourcequalityUpdateInput, episodesourcequalityUncheckedUpdateInput>
  }

  /**
   * episodesourcequality delete
   */
  export type episodesourcequalityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episodesourcequality
     */
    select?: episodesourcequalitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the episodesourcequality
     */
    omit?: episodesourcequalityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodesourcequalityInclude<ExtArgs> | null
    /**
     * Filter which episodesourcequality to delete.
     */
    where: episodesourcequalityWhereUniqueInput
  }

  /**
   * episodesourcequality deleteMany
   */
  export type episodesourcequalityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which episodesourcequalities to delete
     */
    where?: episodesourcequalityWhereInput
    /**
     * Limit how many episodesourcequalities to delete.
     */
    limit?: number
  }

  /**
   * episodesourcequality without action
   */
  export type episodesourcequalityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the episodesourcequality
     */
    select?: episodesourcequalitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the episodesourcequality
     */
    omit?: episodesourcequalityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: episodesourcequalityInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const BookmarkScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    content_id: 'content_id',
    created_at: 'created_at'
  };

  export type BookmarkScalarFieldEnum = (typeof BookmarkScalarFieldEnum)[keyof typeof BookmarkScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    content_id: 'content_id',
    episode_id: 'episode_id',
    comment: 'comment',
    created_at: 'created_at'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const ContentScalarFieldEnum: {
    id: 'id',
    title: 'title',
    slug: 'slug',
    title_english: 'title_english',
    title_japanese: 'title_japanese',
    description: 'description',
    type: 'type',
    release_year: 'release_year',
    season_name: 'season_name',
    studios: 'studios',
    actor: 'actor',
    score: 'score',
    thumbnail_url: 'thumbnail_url',
    backdrop_url: 'backdrop_url',
    video_url: 'video_url',
    created_at: 'created_at',
    duration_minutes: 'duration_minutes',
    num_seasons: 'num_seasons',
    num_episodes: 'num_episodes'
  };

  export type ContentScalarFieldEnum = (typeof ContentScalarFieldEnum)[keyof typeof ContentScalarFieldEnum]


  export const ContentgenreScalarFieldEnum: {
    content_id: 'content_id',
    genre_id: 'genre_id'
  };

  export type ContentgenreScalarFieldEnum = (typeof ContentgenreScalarFieldEnum)[keyof typeof ContentgenreScalarFieldEnum]


  export const EpisodeScalarFieldEnum: {
    id: 'id',
    content_id: 'content_id',
    season: 'season',
    episode_number: 'episode_number',
    title: 'title',
    created_at: 'created_at'
  };

  export type EpisodeScalarFieldEnum = (typeof EpisodeScalarFieldEnum)[keyof typeof EpisodeScalarFieldEnum]


  export const GenreScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type GenreScalarFieldEnum = (typeof GenreScalarFieldEnum)[keyof typeof GenreScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    type: 'type',
    message: 'message',
    is_read: 'is_read',
    created_at: 'created_at'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const RatingScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    content_id: 'content_id',
    rating: 'rating',
    comment: 'comment',
    created_at: 'created_at'
  };

  export type RatingScalarFieldEnum = (typeof RatingScalarFieldEnum)[keyof typeof RatingScalarFieldEnum]


  export const ReportcontentScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    content_id: 'content_id',
    episode_id: 'episode_id',
    reason: 'reason',
    created_at: 'created_at'
  };

  export type ReportcontentScalarFieldEnum = (typeof ReportcontentScalarFieldEnum)[keyof typeof ReportcontentScalarFieldEnum]


  export const SearchlogScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    keyword: 'keyword',
    searched_at: 'searched_at'
  };

  export type SearchlogScalarFieldEnum = (typeof SearchlogScalarFieldEnum)[keyof typeof SearchlogScalarFieldEnum]


  export const SeasonScalarFieldEnum: {
    id: 'id',
    content_id: 'content_id',
    season_number: 'season_number',
    title: 'title',
    description: 'description',
    thumbnail_url: 'thumbnail_url',
    created_at: 'created_at'
  };

  export type SeasonScalarFieldEnum = (typeof SeasonScalarFieldEnum)[keyof typeof SeasonScalarFieldEnum]


  export const SubtitleScalarFieldEnum: {
    id: 'id',
    content_id: 'content_id',
    episode_id: 'episode_id',
    language: 'language',
    file_url: 'file_url',
    created_at: 'created_at'
  };

  export type SubtitleScalarFieldEnum = (typeof SubtitleScalarFieldEnum)[keyof typeof SubtitleScalarFieldEnum]


  export const TrendingcontentScalarFieldEnum: {
    id: 'id',
    content_id: 'content_id',
    week_start: 'week_start',
    view_count: 'view_count',
    created_at: 'created_at'
  };

  export type TrendingcontentScalarFieldEnum = (typeof TrendingcontentScalarFieldEnum)[keyof typeof TrendingcontentScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    role: 'role',
    created_at: 'created_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const WatchhistoryScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    content_id: 'content_id',
    episode_id: 'episode_id',
    last_watch_seconds: 'last_watch_seconds',
    updated_at: 'updated_at'
  };

  export type WatchhistoryScalarFieldEnum = (typeof WatchhistoryScalarFieldEnum)[keyof typeof WatchhistoryScalarFieldEnum]


  export const EpisodesourceScalarFieldEnum: {
    id: 'id',
    episode_id: 'episode_id',
    provider: 'provider',
    priority: 'priority',
    created_at: 'created_at'
  };

  export type EpisodesourceScalarFieldEnum = (typeof EpisodesourceScalarFieldEnum)[keyof typeof EpisodesourceScalarFieldEnum]


  export const EpisodesourcequalityScalarFieldEnum: {
    id: 'id',
    episodesource_id: 'episodesource_id',
    resolution: 'resolution',
    url: 'url',
    created_at: 'created_at'
  };

  export type EpisodesourcequalityScalarFieldEnum = (typeof EpisodesourcequalityScalarFieldEnum)[keyof typeof EpisodesourcequalityScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const commentOrderByRelevanceFieldEnum: {
    comment: 'comment'
  };

  export type commentOrderByRelevanceFieldEnum = (typeof commentOrderByRelevanceFieldEnum)[keyof typeof commentOrderByRelevanceFieldEnum]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const contentOrderByRelevanceFieldEnum: {
    title: 'title',
    slug: 'slug',
    title_english: 'title_english',
    title_japanese: 'title_japanese',
    description: 'description',
    studios: 'studios',
    actor: 'actor',
    thumbnail_url: 'thumbnail_url',
    backdrop_url: 'backdrop_url',
    video_url: 'video_url'
  };

  export type contentOrderByRelevanceFieldEnum = (typeof contentOrderByRelevanceFieldEnum)[keyof typeof contentOrderByRelevanceFieldEnum]


  export const episodeOrderByRelevanceFieldEnum: {
    title: 'title'
  };

  export type episodeOrderByRelevanceFieldEnum = (typeof episodeOrderByRelevanceFieldEnum)[keyof typeof episodeOrderByRelevanceFieldEnum]


  export const genreOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type genreOrderByRelevanceFieldEnum = (typeof genreOrderByRelevanceFieldEnum)[keyof typeof genreOrderByRelevanceFieldEnum]


  export const notificationOrderByRelevanceFieldEnum: {
    message: 'message'
  };

  export type notificationOrderByRelevanceFieldEnum = (typeof notificationOrderByRelevanceFieldEnum)[keyof typeof notificationOrderByRelevanceFieldEnum]


  export const ratingOrderByRelevanceFieldEnum: {
    comment: 'comment'
  };

  export type ratingOrderByRelevanceFieldEnum = (typeof ratingOrderByRelevanceFieldEnum)[keyof typeof ratingOrderByRelevanceFieldEnum]


  export const reportcontentOrderByRelevanceFieldEnum: {
    reason: 'reason'
  };

  export type reportcontentOrderByRelevanceFieldEnum = (typeof reportcontentOrderByRelevanceFieldEnum)[keyof typeof reportcontentOrderByRelevanceFieldEnum]


  export const searchlogOrderByRelevanceFieldEnum: {
    keyword: 'keyword'
  };

  export type searchlogOrderByRelevanceFieldEnum = (typeof searchlogOrderByRelevanceFieldEnum)[keyof typeof searchlogOrderByRelevanceFieldEnum]


  export const seasonOrderByRelevanceFieldEnum: {
    title: 'title',
    description: 'description',
    thumbnail_url: 'thumbnail_url'
  };

  export type seasonOrderByRelevanceFieldEnum = (typeof seasonOrderByRelevanceFieldEnum)[keyof typeof seasonOrderByRelevanceFieldEnum]


  export const subtitleOrderByRelevanceFieldEnum: {
    language: 'language',
    file_url: 'file_url'
  };

  export type subtitleOrderByRelevanceFieldEnum = (typeof subtitleOrderByRelevanceFieldEnum)[keyof typeof subtitleOrderByRelevanceFieldEnum]


  export const userOrderByRelevanceFieldEnum: {
    email: 'email',
    password: 'password'
  };

  export type userOrderByRelevanceFieldEnum = (typeof userOrderByRelevanceFieldEnum)[keyof typeof userOrderByRelevanceFieldEnum]


  export const episodesourceOrderByRelevanceFieldEnum: {
    provider: 'provider'
  };

  export type episodesourceOrderByRelevanceFieldEnum = (typeof episodesourceOrderByRelevanceFieldEnum)[keyof typeof episodesourceOrderByRelevanceFieldEnum]


  export const episodesourcequalityOrderByRelevanceFieldEnum: {
    resolution: 'resolution',
    url: 'url'
  };

  export type episodesourcequalityOrderByRelevanceFieldEnum = (typeof episodesourcequalityOrderByRelevanceFieldEnum)[keyof typeof episodesourcequalityOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'content_type'
   */
  export type Enumcontent_typeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'content_type'>
    


  /**
   * Reference to a field of type 'content_season_name'
   */
  export type Enumcontent_season_nameFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'content_season_name'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'notification_type'
   */
  export type Enumnotification_typeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'notification_type'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'user_role'
   */
  export type Enumuser_roleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'user_role'>
    
  /**
   * Deep Input Types
   */


  export type bookmarkWhereInput = {
    AND?: bookmarkWhereInput | bookmarkWhereInput[]
    OR?: bookmarkWhereInput[]
    NOT?: bookmarkWhereInput | bookmarkWhereInput[]
    id?: IntFilter<"bookmark"> | number
    user_id?: IntFilter<"bookmark"> | number
    content_id?: IntFilter<"bookmark"> | number
    created_at?: DateTimeFilter<"bookmark"> | Date | string
    content?: XOR<ContentScalarRelationFilter, contentWhereInput>
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }

  export type bookmarkOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    created_at?: SortOrder
    content?: contentOrderByWithRelationInput
    user?: userOrderByWithRelationInput
  }

  export type bookmarkWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_id_content_id?: bookmarkUser_idContent_idCompoundUniqueInput
    AND?: bookmarkWhereInput | bookmarkWhereInput[]
    OR?: bookmarkWhereInput[]
    NOT?: bookmarkWhereInput | bookmarkWhereInput[]
    user_id?: IntFilter<"bookmark"> | number
    content_id?: IntFilter<"bookmark"> | number
    created_at?: DateTimeFilter<"bookmark"> | Date | string
    content?: XOR<ContentScalarRelationFilter, contentWhereInput>
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }, "id" | "user_id_content_id">

  export type bookmarkOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    created_at?: SortOrder
    _count?: bookmarkCountOrderByAggregateInput
    _avg?: bookmarkAvgOrderByAggregateInput
    _max?: bookmarkMaxOrderByAggregateInput
    _min?: bookmarkMinOrderByAggregateInput
    _sum?: bookmarkSumOrderByAggregateInput
  }

  export type bookmarkScalarWhereWithAggregatesInput = {
    AND?: bookmarkScalarWhereWithAggregatesInput | bookmarkScalarWhereWithAggregatesInput[]
    OR?: bookmarkScalarWhereWithAggregatesInput[]
    NOT?: bookmarkScalarWhereWithAggregatesInput | bookmarkScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"bookmark"> | number
    user_id?: IntWithAggregatesFilter<"bookmark"> | number
    content_id?: IntWithAggregatesFilter<"bookmark"> | number
    created_at?: DateTimeWithAggregatesFilter<"bookmark"> | Date | string
  }

  export type commentWhereInput = {
    AND?: commentWhereInput | commentWhereInput[]
    OR?: commentWhereInput[]
    NOT?: commentWhereInput | commentWhereInput[]
    id?: IntFilter<"comment"> | number
    user_id?: IntFilter<"comment"> | number
    content_id?: IntFilter<"comment"> | number
    episode_id?: IntFilter<"comment"> | number
    comment?: StringFilter<"comment"> | string
    created_at?: DateTimeFilter<"comment"> | Date | string
    content?: XOR<ContentScalarRelationFilter, contentWhereInput>
    episode?: XOR<EpisodeScalarRelationFilter, episodeWhereInput>
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }

  export type commentOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
    comment?: SortOrder
    created_at?: SortOrder
    content?: contentOrderByWithRelationInput
    episode?: episodeOrderByWithRelationInput
    user?: userOrderByWithRelationInput
    _relevance?: commentOrderByRelevanceInput
  }

  export type commentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: commentWhereInput | commentWhereInput[]
    OR?: commentWhereInput[]
    NOT?: commentWhereInput | commentWhereInput[]
    user_id?: IntFilter<"comment"> | number
    content_id?: IntFilter<"comment"> | number
    episode_id?: IntFilter<"comment"> | number
    comment?: StringFilter<"comment"> | string
    created_at?: DateTimeFilter<"comment"> | Date | string
    content?: XOR<ContentScalarRelationFilter, contentWhereInput>
    episode?: XOR<EpisodeScalarRelationFilter, episodeWhereInput>
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }, "id">

  export type commentOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
    comment?: SortOrder
    created_at?: SortOrder
    _count?: commentCountOrderByAggregateInput
    _avg?: commentAvgOrderByAggregateInput
    _max?: commentMaxOrderByAggregateInput
    _min?: commentMinOrderByAggregateInput
    _sum?: commentSumOrderByAggregateInput
  }

  export type commentScalarWhereWithAggregatesInput = {
    AND?: commentScalarWhereWithAggregatesInput | commentScalarWhereWithAggregatesInput[]
    OR?: commentScalarWhereWithAggregatesInput[]
    NOT?: commentScalarWhereWithAggregatesInput | commentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"comment"> | number
    user_id?: IntWithAggregatesFilter<"comment"> | number
    content_id?: IntWithAggregatesFilter<"comment"> | number
    episode_id?: IntWithAggregatesFilter<"comment"> | number
    comment?: StringWithAggregatesFilter<"comment"> | string
    created_at?: DateTimeWithAggregatesFilter<"comment"> | Date | string
  }

  export type contentWhereInput = {
    AND?: contentWhereInput | contentWhereInput[]
    OR?: contentWhereInput[]
    NOT?: contentWhereInput | contentWhereInput[]
    id?: IntFilter<"content"> | number
    title?: StringFilter<"content"> | string
    slug?: StringFilter<"content"> | string
    title_english?: StringNullableFilter<"content"> | string | null
    title_japanese?: StringNullableFilter<"content"> | string | null
    description?: StringNullableFilter<"content"> | string | null
    type?: Enumcontent_typeFilter<"content"> | $Enums.content_type
    release_year?: IntNullableFilter<"content"> | number | null
    season_name?: Enumcontent_season_nameNullableFilter<"content"> | $Enums.content_season_name | null
    studios?: StringNullableFilter<"content"> | string | null
    actor?: StringNullableFilter<"content"> | string | null
    score?: FloatNullableFilter<"content"> | number | null
    thumbnail_url?: StringNullableFilter<"content"> | string | null
    backdrop_url?: StringNullableFilter<"content"> | string | null
    video_url?: StringNullableFilter<"content"> | string | null
    created_at?: DateTimeFilter<"content"> | Date | string
    duration_minutes?: IntNullableFilter<"content"> | number | null
    num_seasons?: IntNullableFilter<"content"> | number | null
    num_episodes?: IntNullableFilter<"content"> | number | null
    bookmark?: BookmarkListRelationFilter
    comment?: CommentListRelationFilter
    contentgenre?: ContentgenreListRelationFilter
    episode?: EpisodeListRelationFilter
    rating?: RatingListRelationFilter
    reportcontent?: ReportcontentListRelationFilter
    season?: SeasonListRelationFilter
    subtitle?: SubtitleListRelationFilter
    trendingcontent?: TrendingcontentListRelationFilter
    watchhistory?: WatchhistoryListRelationFilter
  }

  export type contentOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    title_english?: SortOrderInput | SortOrder
    title_japanese?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    release_year?: SortOrderInput | SortOrder
    season_name?: SortOrderInput | SortOrder
    studios?: SortOrderInput | SortOrder
    actor?: SortOrderInput | SortOrder
    score?: SortOrderInput | SortOrder
    thumbnail_url?: SortOrderInput | SortOrder
    backdrop_url?: SortOrderInput | SortOrder
    video_url?: SortOrderInput | SortOrder
    created_at?: SortOrder
    duration_minutes?: SortOrderInput | SortOrder
    num_seasons?: SortOrderInput | SortOrder
    num_episodes?: SortOrderInput | SortOrder
    bookmark?: bookmarkOrderByRelationAggregateInput
    comment?: commentOrderByRelationAggregateInput
    contentgenre?: contentgenreOrderByRelationAggregateInput
    episode?: episodeOrderByRelationAggregateInput
    rating?: ratingOrderByRelationAggregateInput
    reportcontent?: reportcontentOrderByRelationAggregateInput
    season?: seasonOrderByRelationAggregateInput
    subtitle?: subtitleOrderByRelationAggregateInput
    trendingcontent?: trendingcontentOrderByRelationAggregateInput
    watchhistory?: watchhistoryOrderByRelationAggregateInput
    _relevance?: contentOrderByRelevanceInput
  }

  export type contentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug?: string
    AND?: contentWhereInput | contentWhereInput[]
    OR?: contentWhereInput[]
    NOT?: contentWhereInput | contentWhereInput[]
    title?: StringFilter<"content"> | string
    title_english?: StringNullableFilter<"content"> | string | null
    title_japanese?: StringNullableFilter<"content"> | string | null
    description?: StringNullableFilter<"content"> | string | null
    type?: Enumcontent_typeFilter<"content"> | $Enums.content_type
    release_year?: IntNullableFilter<"content"> | number | null
    season_name?: Enumcontent_season_nameNullableFilter<"content"> | $Enums.content_season_name | null
    studios?: StringNullableFilter<"content"> | string | null
    actor?: StringNullableFilter<"content"> | string | null
    score?: FloatNullableFilter<"content"> | number | null
    thumbnail_url?: StringNullableFilter<"content"> | string | null
    backdrop_url?: StringNullableFilter<"content"> | string | null
    video_url?: StringNullableFilter<"content"> | string | null
    created_at?: DateTimeFilter<"content"> | Date | string
    duration_minutes?: IntNullableFilter<"content"> | number | null
    num_seasons?: IntNullableFilter<"content"> | number | null
    num_episodes?: IntNullableFilter<"content"> | number | null
    bookmark?: BookmarkListRelationFilter
    comment?: CommentListRelationFilter
    contentgenre?: ContentgenreListRelationFilter
    episode?: EpisodeListRelationFilter
    rating?: RatingListRelationFilter
    reportcontent?: ReportcontentListRelationFilter
    season?: SeasonListRelationFilter
    subtitle?: SubtitleListRelationFilter
    trendingcontent?: TrendingcontentListRelationFilter
    watchhistory?: WatchhistoryListRelationFilter
  }, "id" | "slug">

  export type contentOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    title_english?: SortOrderInput | SortOrder
    title_japanese?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    release_year?: SortOrderInput | SortOrder
    season_name?: SortOrderInput | SortOrder
    studios?: SortOrderInput | SortOrder
    actor?: SortOrderInput | SortOrder
    score?: SortOrderInput | SortOrder
    thumbnail_url?: SortOrderInput | SortOrder
    backdrop_url?: SortOrderInput | SortOrder
    video_url?: SortOrderInput | SortOrder
    created_at?: SortOrder
    duration_minutes?: SortOrderInput | SortOrder
    num_seasons?: SortOrderInput | SortOrder
    num_episodes?: SortOrderInput | SortOrder
    _count?: contentCountOrderByAggregateInput
    _avg?: contentAvgOrderByAggregateInput
    _max?: contentMaxOrderByAggregateInput
    _min?: contentMinOrderByAggregateInput
    _sum?: contentSumOrderByAggregateInput
  }

  export type contentScalarWhereWithAggregatesInput = {
    AND?: contentScalarWhereWithAggregatesInput | contentScalarWhereWithAggregatesInput[]
    OR?: contentScalarWhereWithAggregatesInput[]
    NOT?: contentScalarWhereWithAggregatesInput | contentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"content"> | number
    title?: StringWithAggregatesFilter<"content"> | string
    slug?: StringWithAggregatesFilter<"content"> | string
    title_english?: StringNullableWithAggregatesFilter<"content"> | string | null
    title_japanese?: StringNullableWithAggregatesFilter<"content"> | string | null
    description?: StringNullableWithAggregatesFilter<"content"> | string | null
    type?: Enumcontent_typeWithAggregatesFilter<"content"> | $Enums.content_type
    release_year?: IntNullableWithAggregatesFilter<"content"> | number | null
    season_name?: Enumcontent_season_nameNullableWithAggregatesFilter<"content"> | $Enums.content_season_name | null
    studios?: StringNullableWithAggregatesFilter<"content"> | string | null
    actor?: StringNullableWithAggregatesFilter<"content"> | string | null
    score?: FloatNullableWithAggregatesFilter<"content"> | number | null
    thumbnail_url?: StringNullableWithAggregatesFilter<"content"> | string | null
    backdrop_url?: StringNullableWithAggregatesFilter<"content"> | string | null
    video_url?: StringNullableWithAggregatesFilter<"content"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"content"> | Date | string
    duration_minutes?: IntNullableWithAggregatesFilter<"content"> | number | null
    num_seasons?: IntNullableWithAggregatesFilter<"content"> | number | null
    num_episodes?: IntNullableWithAggregatesFilter<"content"> | number | null
  }

  export type contentgenreWhereInput = {
    AND?: contentgenreWhereInput | contentgenreWhereInput[]
    OR?: contentgenreWhereInput[]
    NOT?: contentgenreWhereInput | contentgenreWhereInput[]
    content_id?: IntFilter<"contentgenre"> | number
    genre_id?: IntFilter<"contentgenre"> | number
    content?: XOR<ContentScalarRelationFilter, contentWhereInput>
    genre?: XOR<GenreScalarRelationFilter, genreWhereInput>
  }

  export type contentgenreOrderByWithRelationInput = {
    content_id?: SortOrder
    genre_id?: SortOrder
    content?: contentOrderByWithRelationInput
    genre?: genreOrderByWithRelationInput
  }

  export type contentgenreWhereUniqueInput = Prisma.AtLeast<{
    content_id_genre_id?: contentgenreContent_idGenre_idCompoundUniqueInput
    AND?: contentgenreWhereInput | contentgenreWhereInput[]
    OR?: contentgenreWhereInput[]
    NOT?: contentgenreWhereInput | contentgenreWhereInput[]
    content_id?: IntFilter<"contentgenre"> | number
    genre_id?: IntFilter<"contentgenre"> | number
    content?: XOR<ContentScalarRelationFilter, contentWhereInput>
    genre?: XOR<GenreScalarRelationFilter, genreWhereInput>
  }, "content_id_genre_id">

  export type contentgenreOrderByWithAggregationInput = {
    content_id?: SortOrder
    genre_id?: SortOrder
    _count?: contentgenreCountOrderByAggregateInput
    _avg?: contentgenreAvgOrderByAggregateInput
    _max?: contentgenreMaxOrderByAggregateInput
    _min?: contentgenreMinOrderByAggregateInput
    _sum?: contentgenreSumOrderByAggregateInput
  }

  export type contentgenreScalarWhereWithAggregatesInput = {
    AND?: contentgenreScalarWhereWithAggregatesInput | contentgenreScalarWhereWithAggregatesInput[]
    OR?: contentgenreScalarWhereWithAggregatesInput[]
    NOT?: contentgenreScalarWhereWithAggregatesInput | contentgenreScalarWhereWithAggregatesInput[]
    content_id?: IntWithAggregatesFilter<"contentgenre"> | number
    genre_id?: IntWithAggregatesFilter<"contentgenre"> | number
  }

  export type episodeWhereInput = {
    AND?: episodeWhereInput | episodeWhereInput[]
    OR?: episodeWhereInput[]
    NOT?: episodeWhereInput | episodeWhereInput[]
    id?: IntFilter<"episode"> | number
    content_id?: IntFilter<"episode"> | number
    season?: IntFilter<"episode"> | number
    episode_number?: IntFilter<"episode"> | number
    title?: StringNullableFilter<"episode"> | string | null
    created_at?: DateTimeFilter<"episode"> | Date | string
    comment?: CommentListRelationFilter
    content?: XOR<ContentScalarRelationFilter, contentWhereInput>
    episodesource?: EpisodesourceListRelationFilter
    reportcontent?: ReportcontentListRelationFilter
    subtitle?: SubtitleListRelationFilter
    watchhistory?: WatchhistoryListRelationFilter
  }

  export type episodeOrderByWithRelationInput = {
    id?: SortOrder
    content_id?: SortOrder
    season?: SortOrder
    episode_number?: SortOrder
    title?: SortOrderInput | SortOrder
    created_at?: SortOrder
    comment?: commentOrderByRelationAggregateInput
    content?: contentOrderByWithRelationInput
    episodesource?: episodesourceOrderByRelationAggregateInput
    reportcontent?: reportcontentOrderByRelationAggregateInput
    subtitle?: subtitleOrderByRelationAggregateInput
    watchhistory?: watchhistoryOrderByRelationAggregateInput
    _relevance?: episodeOrderByRelevanceInput
  }

  export type episodeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: episodeWhereInput | episodeWhereInput[]
    OR?: episodeWhereInput[]
    NOT?: episodeWhereInput | episodeWhereInput[]
    content_id?: IntFilter<"episode"> | number
    season?: IntFilter<"episode"> | number
    episode_number?: IntFilter<"episode"> | number
    title?: StringNullableFilter<"episode"> | string | null
    created_at?: DateTimeFilter<"episode"> | Date | string
    comment?: CommentListRelationFilter
    content?: XOR<ContentScalarRelationFilter, contentWhereInput>
    episodesource?: EpisodesourceListRelationFilter
    reportcontent?: ReportcontentListRelationFilter
    subtitle?: SubtitleListRelationFilter
    watchhistory?: WatchhistoryListRelationFilter
  }, "id">

  export type episodeOrderByWithAggregationInput = {
    id?: SortOrder
    content_id?: SortOrder
    season?: SortOrder
    episode_number?: SortOrder
    title?: SortOrderInput | SortOrder
    created_at?: SortOrder
    _count?: episodeCountOrderByAggregateInput
    _avg?: episodeAvgOrderByAggregateInput
    _max?: episodeMaxOrderByAggregateInput
    _min?: episodeMinOrderByAggregateInput
    _sum?: episodeSumOrderByAggregateInput
  }

  export type episodeScalarWhereWithAggregatesInput = {
    AND?: episodeScalarWhereWithAggregatesInput | episodeScalarWhereWithAggregatesInput[]
    OR?: episodeScalarWhereWithAggregatesInput[]
    NOT?: episodeScalarWhereWithAggregatesInput | episodeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"episode"> | number
    content_id?: IntWithAggregatesFilter<"episode"> | number
    season?: IntWithAggregatesFilter<"episode"> | number
    episode_number?: IntWithAggregatesFilter<"episode"> | number
    title?: StringNullableWithAggregatesFilter<"episode"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"episode"> | Date | string
  }

  export type genreWhereInput = {
    AND?: genreWhereInput | genreWhereInput[]
    OR?: genreWhereInput[]
    NOT?: genreWhereInput | genreWhereInput[]
    id?: IntFilter<"genre"> | number
    name?: StringFilter<"genre"> | string
    contentgenre?: ContentgenreListRelationFilter
  }

  export type genreOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    contentgenre?: contentgenreOrderByRelationAggregateInput
    _relevance?: genreOrderByRelevanceInput
  }

  export type genreWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: genreWhereInput | genreWhereInput[]
    OR?: genreWhereInput[]
    NOT?: genreWhereInput | genreWhereInput[]
    contentgenre?: ContentgenreListRelationFilter
  }, "id" | "name">

  export type genreOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: genreCountOrderByAggregateInput
    _avg?: genreAvgOrderByAggregateInput
    _max?: genreMaxOrderByAggregateInput
    _min?: genreMinOrderByAggregateInput
    _sum?: genreSumOrderByAggregateInput
  }

  export type genreScalarWhereWithAggregatesInput = {
    AND?: genreScalarWhereWithAggregatesInput | genreScalarWhereWithAggregatesInput[]
    OR?: genreScalarWhereWithAggregatesInput[]
    NOT?: genreScalarWhereWithAggregatesInput | genreScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"genre"> | number
    name?: StringWithAggregatesFilter<"genre"> | string
  }

  export type notificationWhereInput = {
    AND?: notificationWhereInput | notificationWhereInput[]
    OR?: notificationWhereInput[]
    NOT?: notificationWhereInput | notificationWhereInput[]
    id?: IntFilter<"notification"> | number
    user_id?: IntFilter<"notification"> | number
    type?: Enumnotification_typeFilter<"notification"> | $Enums.notification_type
    message?: StringFilter<"notification"> | string
    is_read?: BoolFilter<"notification"> | boolean
    created_at?: DateTimeFilter<"notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }

  export type notificationOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
    message?: SortOrder
    is_read?: SortOrder
    created_at?: SortOrder
    user?: userOrderByWithRelationInput
    _relevance?: notificationOrderByRelevanceInput
  }

  export type notificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: notificationWhereInput | notificationWhereInput[]
    OR?: notificationWhereInput[]
    NOT?: notificationWhereInput | notificationWhereInput[]
    user_id?: IntFilter<"notification"> | number
    type?: Enumnotification_typeFilter<"notification"> | $Enums.notification_type
    message?: StringFilter<"notification"> | string
    is_read?: BoolFilter<"notification"> | boolean
    created_at?: DateTimeFilter<"notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }, "id">

  export type notificationOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
    message?: SortOrder
    is_read?: SortOrder
    created_at?: SortOrder
    _count?: notificationCountOrderByAggregateInput
    _avg?: notificationAvgOrderByAggregateInput
    _max?: notificationMaxOrderByAggregateInput
    _min?: notificationMinOrderByAggregateInput
    _sum?: notificationSumOrderByAggregateInput
  }

  export type notificationScalarWhereWithAggregatesInput = {
    AND?: notificationScalarWhereWithAggregatesInput | notificationScalarWhereWithAggregatesInput[]
    OR?: notificationScalarWhereWithAggregatesInput[]
    NOT?: notificationScalarWhereWithAggregatesInput | notificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"notification"> | number
    user_id?: IntWithAggregatesFilter<"notification"> | number
    type?: Enumnotification_typeWithAggregatesFilter<"notification"> | $Enums.notification_type
    message?: StringWithAggregatesFilter<"notification"> | string
    is_read?: BoolWithAggregatesFilter<"notification"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"notification"> | Date | string
  }

  export type ratingWhereInput = {
    AND?: ratingWhereInput | ratingWhereInput[]
    OR?: ratingWhereInput[]
    NOT?: ratingWhereInput | ratingWhereInput[]
    id?: IntFilter<"rating"> | number
    user_id?: IntFilter<"rating"> | number
    content_id?: IntFilter<"rating"> | number
    rating?: IntFilter<"rating"> | number
    comment?: StringNullableFilter<"rating"> | string | null
    created_at?: DateTimeFilter<"rating"> | Date | string
    content?: XOR<ContentScalarRelationFilter, contentWhereInput>
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }

  export type ratingOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    created_at?: SortOrder
    content?: contentOrderByWithRelationInput
    user?: userOrderByWithRelationInput
    _relevance?: ratingOrderByRelevanceInput
  }

  export type ratingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_id_content_id?: ratingUser_idContent_idCompoundUniqueInput
    AND?: ratingWhereInput | ratingWhereInput[]
    OR?: ratingWhereInput[]
    NOT?: ratingWhereInput | ratingWhereInput[]
    user_id?: IntFilter<"rating"> | number
    content_id?: IntFilter<"rating"> | number
    rating?: IntFilter<"rating"> | number
    comment?: StringNullableFilter<"rating"> | string | null
    created_at?: DateTimeFilter<"rating"> | Date | string
    content?: XOR<ContentScalarRelationFilter, contentWhereInput>
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }, "id" | "user_id_content_id">

  export type ratingOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    created_at?: SortOrder
    _count?: ratingCountOrderByAggregateInput
    _avg?: ratingAvgOrderByAggregateInput
    _max?: ratingMaxOrderByAggregateInput
    _min?: ratingMinOrderByAggregateInput
    _sum?: ratingSumOrderByAggregateInput
  }

  export type ratingScalarWhereWithAggregatesInput = {
    AND?: ratingScalarWhereWithAggregatesInput | ratingScalarWhereWithAggregatesInput[]
    OR?: ratingScalarWhereWithAggregatesInput[]
    NOT?: ratingScalarWhereWithAggregatesInput | ratingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"rating"> | number
    user_id?: IntWithAggregatesFilter<"rating"> | number
    content_id?: IntWithAggregatesFilter<"rating"> | number
    rating?: IntWithAggregatesFilter<"rating"> | number
    comment?: StringNullableWithAggregatesFilter<"rating"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"rating"> | Date | string
  }

  export type reportcontentWhereInput = {
    AND?: reportcontentWhereInput | reportcontentWhereInput[]
    OR?: reportcontentWhereInput[]
    NOT?: reportcontentWhereInput | reportcontentWhereInput[]
    id?: IntFilter<"reportcontent"> | number
    user_id?: IntFilter<"reportcontent"> | number
    content_id?: IntFilter<"reportcontent"> | number
    episode_id?: IntFilter<"reportcontent"> | number
    reason?: StringFilter<"reportcontent"> | string
    created_at?: DateTimeFilter<"reportcontent"> | Date | string
    content?: XOR<ContentScalarRelationFilter, contentWhereInput>
    episode?: XOR<EpisodeScalarRelationFilter, episodeWhereInput>
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }

  export type reportcontentOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
    reason?: SortOrder
    created_at?: SortOrder
    content?: contentOrderByWithRelationInput
    episode?: episodeOrderByWithRelationInput
    user?: userOrderByWithRelationInput
    _relevance?: reportcontentOrderByRelevanceInput
  }

  export type reportcontentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: reportcontentWhereInput | reportcontentWhereInput[]
    OR?: reportcontentWhereInput[]
    NOT?: reportcontentWhereInput | reportcontentWhereInput[]
    user_id?: IntFilter<"reportcontent"> | number
    content_id?: IntFilter<"reportcontent"> | number
    episode_id?: IntFilter<"reportcontent"> | number
    reason?: StringFilter<"reportcontent"> | string
    created_at?: DateTimeFilter<"reportcontent"> | Date | string
    content?: XOR<ContentScalarRelationFilter, contentWhereInput>
    episode?: XOR<EpisodeScalarRelationFilter, episodeWhereInput>
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }, "id">

  export type reportcontentOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
    reason?: SortOrder
    created_at?: SortOrder
    _count?: reportcontentCountOrderByAggregateInput
    _avg?: reportcontentAvgOrderByAggregateInput
    _max?: reportcontentMaxOrderByAggregateInput
    _min?: reportcontentMinOrderByAggregateInput
    _sum?: reportcontentSumOrderByAggregateInput
  }

  export type reportcontentScalarWhereWithAggregatesInput = {
    AND?: reportcontentScalarWhereWithAggregatesInput | reportcontentScalarWhereWithAggregatesInput[]
    OR?: reportcontentScalarWhereWithAggregatesInput[]
    NOT?: reportcontentScalarWhereWithAggregatesInput | reportcontentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"reportcontent"> | number
    user_id?: IntWithAggregatesFilter<"reportcontent"> | number
    content_id?: IntWithAggregatesFilter<"reportcontent"> | number
    episode_id?: IntWithAggregatesFilter<"reportcontent"> | number
    reason?: StringWithAggregatesFilter<"reportcontent"> | string
    created_at?: DateTimeWithAggregatesFilter<"reportcontent"> | Date | string
  }

  export type searchlogWhereInput = {
    AND?: searchlogWhereInput | searchlogWhereInput[]
    OR?: searchlogWhereInput[]
    NOT?: searchlogWhereInput | searchlogWhereInput[]
    id?: IntFilter<"searchlog"> | number
    user_id?: IntFilter<"searchlog"> | number
    keyword?: StringFilter<"searchlog"> | string
    searched_at?: DateTimeFilter<"searchlog"> | Date | string
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }

  export type searchlogOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    keyword?: SortOrder
    searched_at?: SortOrder
    user?: userOrderByWithRelationInput
    _relevance?: searchlogOrderByRelevanceInput
  }

  export type searchlogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: searchlogWhereInput | searchlogWhereInput[]
    OR?: searchlogWhereInput[]
    NOT?: searchlogWhereInput | searchlogWhereInput[]
    user_id?: IntFilter<"searchlog"> | number
    keyword?: StringFilter<"searchlog"> | string
    searched_at?: DateTimeFilter<"searchlog"> | Date | string
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }, "id">

  export type searchlogOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    keyword?: SortOrder
    searched_at?: SortOrder
    _count?: searchlogCountOrderByAggregateInput
    _avg?: searchlogAvgOrderByAggregateInput
    _max?: searchlogMaxOrderByAggregateInput
    _min?: searchlogMinOrderByAggregateInput
    _sum?: searchlogSumOrderByAggregateInput
  }

  export type searchlogScalarWhereWithAggregatesInput = {
    AND?: searchlogScalarWhereWithAggregatesInput | searchlogScalarWhereWithAggregatesInput[]
    OR?: searchlogScalarWhereWithAggregatesInput[]
    NOT?: searchlogScalarWhereWithAggregatesInput | searchlogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"searchlog"> | number
    user_id?: IntWithAggregatesFilter<"searchlog"> | number
    keyword?: StringWithAggregatesFilter<"searchlog"> | string
    searched_at?: DateTimeWithAggregatesFilter<"searchlog"> | Date | string
  }

  export type seasonWhereInput = {
    AND?: seasonWhereInput | seasonWhereInput[]
    OR?: seasonWhereInput[]
    NOT?: seasonWhereInput | seasonWhereInput[]
    id?: IntFilter<"season"> | number
    content_id?: IntFilter<"season"> | number
    season_number?: IntFilter<"season"> | number
    title?: StringFilter<"season"> | string
    description?: StringNullableFilter<"season"> | string | null
    thumbnail_url?: StringNullableFilter<"season"> | string | null
    created_at?: DateTimeFilter<"season"> | Date | string
    content?: XOR<ContentScalarRelationFilter, contentWhereInput>
  }

  export type seasonOrderByWithRelationInput = {
    id?: SortOrder
    content_id?: SortOrder
    season_number?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    thumbnail_url?: SortOrderInput | SortOrder
    created_at?: SortOrder
    content?: contentOrderByWithRelationInput
    _relevance?: seasonOrderByRelevanceInput
  }

  export type seasonWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    content_id_season_number?: seasonContent_idSeason_numberCompoundUniqueInput
    AND?: seasonWhereInput | seasonWhereInput[]
    OR?: seasonWhereInput[]
    NOT?: seasonWhereInput | seasonWhereInput[]
    content_id?: IntFilter<"season"> | number
    season_number?: IntFilter<"season"> | number
    title?: StringFilter<"season"> | string
    description?: StringNullableFilter<"season"> | string | null
    thumbnail_url?: StringNullableFilter<"season"> | string | null
    created_at?: DateTimeFilter<"season"> | Date | string
    content?: XOR<ContentScalarRelationFilter, contentWhereInput>
  }, "id" | "content_id_season_number">

  export type seasonOrderByWithAggregationInput = {
    id?: SortOrder
    content_id?: SortOrder
    season_number?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    thumbnail_url?: SortOrderInput | SortOrder
    created_at?: SortOrder
    _count?: seasonCountOrderByAggregateInput
    _avg?: seasonAvgOrderByAggregateInput
    _max?: seasonMaxOrderByAggregateInput
    _min?: seasonMinOrderByAggregateInput
    _sum?: seasonSumOrderByAggregateInput
  }

  export type seasonScalarWhereWithAggregatesInput = {
    AND?: seasonScalarWhereWithAggregatesInput | seasonScalarWhereWithAggregatesInput[]
    OR?: seasonScalarWhereWithAggregatesInput[]
    NOT?: seasonScalarWhereWithAggregatesInput | seasonScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"season"> | number
    content_id?: IntWithAggregatesFilter<"season"> | number
    season_number?: IntWithAggregatesFilter<"season"> | number
    title?: StringWithAggregatesFilter<"season"> | string
    description?: StringNullableWithAggregatesFilter<"season"> | string | null
    thumbnail_url?: StringNullableWithAggregatesFilter<"season"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"season"> | Date | string
  }

  export type subtitleWhereInput = {
    AND?: subtitleWhereInput | subtitleWhereInput[]
    OR?: subtitleWhereInput[]
    NOT?: subtitleWhereInput | subtitleWhereInput[]
    id?: IntFilter<"subtitle"> | number
    content_id?: IntFilter<"subtitle"> | number
    episode_id?: IntFilter<"subtitle"> | number
    language?: StringFilter<"subtitle"> | string
    file_url?: StringFilter<"subtitle"> | string
    created_at?: DateTimeFilter<"subtitle"> | Date | string
    content?: XOR<ContentScalarRelationFilter, contentWhereInput>
    episode?: XOR<EpisodeScalarRelationFilter, episodeWhereInput>
  }

  export type subtitleOrderByWithRelationInput = {
    id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
    language?: SortOrder
    file_url?: SortOrder
    created_at?: SortOrder
    content?: contentOrderByWithRelationInput
    episode?: episodeOrderByWithRelationInput
    _relevance?: subtitleOrderByRelevanceInput
  }

  export type subtitleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: subtitleWhereInput | subtitleWhereInput[]
    OR?: subtitleWhereInput[]
    NOT?: subtitleWhereInput | subtitleWhereInput[]
    content_id?: IntFilter<"subtitle"> | number
    episode_id?: IntFilter<"subtitle"> | number
    language?: StringFilter<"subtitle"> | string
    file_url?: StringFilter<"subtitle"> | string
    created_at?: DateTimeFilter<"subtitle"> | Date | string
    content?: XOR<ContentScalarRelationFilter, contentWhereInput>
    episode?: XOR<EpisodeScalarRelationFilter, episodeWhereInput>
  }, "id">

  export type subtitleOrderByWithAggregationInput = {
    id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
    language?: SortOrder
    file_url?: SortOrder
    created_at?: SortOrder
    _count?: subtitleCountOrderByAggregateInput
    _avg?: subtitleAvgOrderByAggregateInput
    _max?: subtitleMaxOrderByAggregateInput
    _min?: subtitleMinOrderByAggregateInput
    _sum?: subtitleSumOrderByAggregateInput
  }

  export type subtitleScalarWhereWithAggregatesInput = {
    AND?: subtitleScalarWhereWithAggregatesInput | subtitleScalarWhereWithAggregatesInput[]
    OR?: subtitleScalarWhereWithAggregatesInput[]
    NOT?: subtitleScalarWhereWithAggregatesInput | subtitleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"subtitle"> | number
    content_id?: IntWithAggregatesFilter<"subtitle"> | number
    episode_id?: IntWithAggregatesFilter<"subtitle"> | number
    language?: StringWithAggregatesFilter<"subtitle"> | string
    file_url?: StringWithAggregatesFilter<"subtitle"> | string
    created_at?: DateTimeWithAggregatesFilter<"subtitle"> | Date | string
  }

  export type trendingcontentWhereInput = {
    AND?: trendingcontentWhereInput | trendingcontentWhereInput[]
    OR?: trendingcontentWhereInput[]
    NOT?: trendingcontentWhereInput | trendingcontentWhereInput[]
    id?: IntFilter<"trendingcontent"> | number
    content_id?: IntFilter<"trendingcontent"> | number
    week_start?: DateTimeFilter<"trendingcontent"> | Date | string
    view_count?: IntFilter<"trendingcontent"> | number
    created_at?: DateTimeFilter<"trendingcontent"> | Date | string
    content?: XOR<ContentScalarRelationFilter, contentWhereInput>
  }

  export type trendingcontentOrderByWithRelationInput = {
    id?: SortOrder
    content_id?: SortOrder
    week_start?: SortOrder
    view_count?: SortOrder
    created_at?: SortOrder
    content?: contentOrderByWithRelationInput
  }

  export type trendingcontentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    content_id_week_start?: trendingcontentContent_idWeek_startCompoundUniqueInput
    AND?: trendingcontentWhereInput | trendingcontentWhereInput[]
    OR?: trendingcontentWhereInput[]
    NOT?: trendingcontentWhereInput | trendingcontentWhereInput[]
    content_id?: IntFilter<"trendingcontent"> | number
    week_start?: DateTimeFilter<"trendingcontent"> | Date | string
    view_count?: IntFilter<"trendingcontent"> | number
    created_at?: DateTimeFilter<"trendingcontent"> | Date | string
    content?: XOR<ContentScalarRelationFilter, contentWhereInput>
  }, "id" | "content_id_week_start">

  export type trendingcontentOrderByWithAggregationInput = {
    id?: SortOrder
    content_id?: SortOrder
    week_start?: SortOrder
    view_count?: SortOrder
    created_at?: SortOrder
    _count?: trendingcontentCountOrderByAggregateInput
    _avg?: trendingcontentAvgOrderByAggregateInput
    _max?: trendingcontentMaxOrderByAggregateInput
    _min?: trendingcontentMinOrderByAggregateInput
    _sum?: trendingcontentSumOrderByAggregateInput
  }

  export type trendingcontentScalarWhereWithAggregatesInput = {
    AND?: trendingcontentScalarWhereWithAggregatesInput | trendingcontentScalarWhereWithAggregatesInput[]
    OR?: trendingcontentScalarWhereWithAggregatesInput[]
    NOT?: trendingcontentScalarWhereWithAggregatesInput | trendingcontentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"trendingcontent"> | number
    content_id?: IntWithAggregatesFilter<"trendingcontent"> | number
    week_start?: DateTimeWithAggregatesFilter<"trendingcontent"> | Date | string
    view_count?: IntWithAggregatesFilter<"trendingcontent"> | number
    created_at?: DateTimeWithAggregatesFilter<"trendingcontent"> | Date | string
  }

  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    id?: IntFilter<"user"> | number
    email?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    role?: Enumuser_roleFilter<"user"> | $Enums.user_role
    created_at?: DateTimeFilter<"user"> | Date | string
    bookmark?: BookmarkListRelationFilter
    comment?: CommentListRelationFilter
    notification?: NotificationListRelationFilter
    rating?: RatingListRelationFilter
    reportcontent?: ReportcontentListRelationFilter
    searchlog?: SearchlogListRelationFilter
    watchhistory?: WatchhistoryListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    bookmark?: bookmarkOrderByRelationAggregateInput
    comment?: commentOrderByRelationAggregateInput
    notification?: notificationOrderByRelationAggregateInput
    rating?: ratingOrderByRelationAggregateInput
    reportcontent?: reportcontentOrderByRelationAggregateInput
    searchlog?: searchlogOrderByRelationAggregateInput
    watchhistory?: watchhistoryOrderByRelationAggregateInput
    _relevance?: userOrderByRelevanceInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    password?: StringFilter<"user"> | string
    role?: Enumuser_roleFilter<"user"> | $Enums.user_role
    created_at?: DateTimeFilter<"user"> | Date | string
    bookmark?: BookmarkListRelationFilter
    comment?: CommentListRelationFilter
    notification?: NotificationListRelationFilter
    rating?: RatingListRelationFilter
    reportcontent?: ReportcontentListRelationFilter
    searchlog?: SearchlogListRelationFilter
    watchhistory?: WatchhistoryListRelationFilter
  }, "id" | "email">

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user"> | number
    email?: StringWithAggregatesFilter<"user"> | string
    password?: StringWithAggregatesFilter<"user"> | string
    role?: Enumuser_roleWithAggregatesFilter<"user"> | $Enums.user_role
    created_at?: DateTimeWithAggregatesFilter<"user"> | Date | string
  }

  export type watchhistoryWhereInput = {
    AND?: watchhistoryWhereInput | watchhistoryWhereInput[]
    OR?: watchhistoryWhereInput[]
    NOT?: watchhistoryWhereInput | watchhistoryWhereInput[]
    id?: IntFilter<"watchhistory"> | number
    user_id?: IntFilter<"watchhistory"> | number
    content_id?: IntFilter<"watchhistory"> | number
    episode_id?: IntFilter<"watchhistory"> | number
    last_watch_seconds?: IntFilter<"watchhistory"> | number
    updated_at?: DateTimeFilter<"watchhistory"> | Date | string
    content?: XOR<ContentScalarRelationFilter, contentWhereInput>
    episode?: XOR<EpisodeScalarRelationFilter, episodeWhereInput>
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }

  export type watchhistoryOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
    last_watch_seconds?: SortOrder
    updated_at?: SortOrder
    content?: contentOrderByWithRelationInput
    episode?: episodeOrderByWithRelationInput
    user?: userOrderByWithRelationInput
  }

  export type watchhistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: watchhistoryWhereInput | watchhistoryWhereInput[]
    OR?: watchhistoryWhereInput[]
    NOT?: watchhistoryWhereInput | watchhistoryWhereInput[]
    user_id?: IntFilter<"watchhistory"> | number
    content_id?: IntFilter<"watchhistory"> | number
    episode_id?: IntFilter<"watchhistory"> | number
    last_watch_seconds?: IntFilter<"watchhistory"> | number
    updated_at?: DateTimeFilter<"watchhistory"> | Date | string
    content?: XOR<ContentScalarRelationFilter, contentWhereInput>
    episode?: XOR<EpisodeScalarRelationFilter, episodeWhereInput>
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }, "id">

  export type watchhistoryOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
    last_watch_seconds?: SortOrder
    updated_at?: SortOrder
    _count?: watchhistoryCountOrderByAggregateInput
    _avg?: watchhistoryAvgOrderByAggregateInput
    _max?: watchhistoryMaxOrderByAggregateInput
    _min?: watchhistoryMinOrderByAggregateInput
    _sum?: watchhistorySumOrderByAggregateInput
  }

  export type watchhistoryScalarWhereWithAggregatesInput = {
    AND?: watchhistoryScalarWhereWithAggregatesInput | watchhistoryScalarWhereWithAggregatesInput[]
    OR?: watchhistoryScalarWhereWithAggregatesInput[]
    NOT?: watchhistoryScalarWhereWithAggregatesInput | watchhistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"watchhistory"> | number
    user_id?: IntWithAggregatesFilter<"watchhistory"> | number
    content_id?: IntWithAggregatesFilter<"watchhistory"> | number
    episode_id?: IntWithAggregatesFilter<"watchhistory"> | number
    last_watch_seconds?: IntWithAggregatesFilter<"watchhistory"> | number
    updated_at?: DateTimeWithAggregatesFilter<"watchhistory"> | Date | string
  }

  export type episodesourceWhereInput = {
    AND?: episodesourceWhereInput | episodesourceWhereInput[]
    OR?: episodesourceWhereInput[]
    NOT?: episodesourceWhereInput | episodesourceWhereInput[]
    id?: IntFilter<"episodesource"> | number
    episode_id?: IntFilter<"episodesource"> | number
    provider?: StringFilter<"episodesource"> | string
    priority?: IntFilter<"episodesource"> | number
    created_at?: DateTimeFilter<"episodesource"> | Date | string
    episode?: XOR<EpisodeScalarRelationFilter, episodeWhereInput>
    qualities?: EpisodesourcequalityListRelationFilter
  }

  export type episodesourceOrderByWithRelationInput = {
    id?: SortOrder
    episode_id?: SortOrder
    provider?: SortOrder
    priority?: SortOrder
    created_at?: SortOrder
    episode?: episodeOrderByWithRelationInput
    qualities?: episodesourcequalityOrderByRelationAggregateInput
    _relevance?: episodesourceOrderByRelevanceInput
  }

  export type episodesourceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: episodesourceWhereInput | episodesourceWhereInput[]
    OR?: episodesourceWhereInput[]
    NOT?: episodesourceWhereInput | episodesourceWhereInput[]
    episode_id?: IntFilter<"episodesource"> | number
    provider?: StringFilter<"episodesource"> | string
    priority?: IntFilter<"episodesource"> | number
    created_at?: DateTimeFilter<"episodesource"> | Date | string
    episode?: XOR<EpisodeScalarRelationFilter, episodeWhereInput>
    qualities?: EpisodesourcequalityListRelationFilter
  }, "id">

  export type episodesourceOrderByWithAggregationInput = {
    id?: SortOrder
    episode_id?: SortOrder
    provider?: SortOrder
    priority?: SortOrder
    created_at?: SortOrder
    _count?: episodesourceCountOrderByAggregateInput
    _avg?: episodesourceAvgOrderByAggregateInput
    _max?: episodesourceMaxOrderByAggregateInput
    _min?: episodesourceMinOrderByAggregateInput
    _sum?: episodesourceSumOrderByAggregateInput
  }

  export type episodesourceScalarWhereWithAggregatesInput = {
    AND?: episodesourceScalarWhereWithAggregatesInput | episodesourceScalarWhereWithAggregatesInput[]
    OR?: episodesourceScalarWhereWithAggregatesInput[]
    NOT?: episodesourceScalarWhereWithAggregatesInput | episodesourceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"episodesource"> | number
    episode_id?: IntWithAggregatesFilter<"episodesource"> | number
    provider?: StringWithAggregatesFilter<"episodesource"> | string
    priority?: IntWithAggregatesFilter<"episodesource"> | number
    created_at?: DateTimeWithAggregatesFilter<"episodesource"> | Date | string
  }

  export type episodesourcequalityWhereInput = {
    AND?: episodesourcequalityWhereInput | episodesourcequalityWhereInput[]
    OR?: episodesourcequalityWhereInput[]
    NOT?: episodesourcequalityWhereInput | episodesourcequalityWhereInput[]
    id?: IntFilter<"episodesourcequality"> | number
    episodesource_id?: IntFilter<"episodesourcequality"> | number
    resolution?: StringFilter<"episodesourcequality"> | string
    url?: StringFilter<"episodesourcequality"> | string
    created_at?: DateTimeFilter<"episodesourcequality"> | Date | string
    episodesource?: XOR<EpisodesourceScalarRelationFilter, episodesourceWhereInput>
  }

  export type episodesourcequalityOrderByWithRelationInput = {
    id?: SortOrder
    episodesource_id?: SortOrder
    resolution?: SortOrder
    url?: SortOrder
    created_at?: SortOrder
    episodesource?: episodesourceOrderByWithRelationInput
    _relevance?: episodesourcequalityOrderByRelevanceInput
  }

  export type episodesourcequalityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: episodesourcequalityWhereInput | episodesourcequalityWhereInput[]
    OR?: episodesourcequalityWhereInput[]
    NOT?: episodesourcequalityWhereInput | episodesourcequalityWhereInput[]
    episodesource_id?: IntFilter<"episodesourcequality"> | number
    resolution?: StringFilter<"episodesourcequality"> | string
    url?: StringFilter<"episodesourcequality"> | string
    created_at?: DateTimeFilter<"episodesourcequality"> | Date | string
    episodesource?: XOR<EpisodesourceScalarRelationFilter, episodesourceWhereInput>
  }, "id">

  export type episodesourcequalityOrderByWithAggregationInput = {
    id?: SortOrder
    episodesource_id?: SortOrder
    resolution?: SortOrder
    url?: SortOrder
    created_at?: SortOrder
    _count?: episodesourcequalityCountOrderByAggregateInput
    _avg?: episodesourcequalityAvgOrderByAggregateInput
    _max?: episodesourcequalityMaxOrderByAggregateInput
    _min?: episodesourcequalityMinOrderByAggregateInput
    _sum?: episodesourcequalitySumOrderByAggregateInput
  }

  export type episodesourcequalityScalarWhereWithAggregatesInput = {
    AND?: episodesourcequalityScalarWhereWithAggregatesInput | episodesourcequalityScalarWhereWithAggregatesInput[]
    OR?: episodesourcequalityScalarWhereWithAggregatesInput[]
    NOT?: episodesourcequalityScalarWhereWithAggregatesInput | episodesourcequalityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"episodesourcequality"> | number
    episodesource_id?: IntWithAggregatesFilter<"episodesourcequality"> | number
    resolution?: StringWithAggregatesFilter<"episodesourcequality"> | string
    url?: StringWithAggregatesFilter<"episodesourcequality"> | string
    created_at?: DateTimeWithAggregatesFilter<"episodesourcequality"> | Date | string
  }

  export type bookmarkCreateInput = {
    created_at?: Date | string
    content: contentCreateNestedOneWithoutBookmarkInput
    user: userCreateNestedOneWithoutBookmarkInput
  }

  export type bookmarkUncheckedCreateInput = {
    id?: number
    user_id: number
    content_id: number
    created_at?: Date | string
  }

  export type bookmarkUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: contentUpdateOneRequiredWithoutBookmarkNestedInput
    user?: userUpdateOneRequiredWithoutBookmarkNestedInput
  }

  export type bookmarkUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type bookmarkCreateManyInput = {
    id?: number
    user_id: number
    content_id: number
    created_at?: Date | string
  }

  export type bookmarkUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type bookmarkUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type commentCreateInput = {
    comment: string
    created_at?: Date | string
    content: contentCreateNestedOneWithoutCommentInput
    episode: episodeCreateNestedOneWithoutCommentInput
    user: userCreateNestedOneWithoutCommentInput
  }

  export type commentUncheckedCreateInput = {
    id?: number
    user_id: number
    content_id: number
    episode_id: number
    comment: string
    created_at?: Date | string
  }

  export type commentUpdateInput = {
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: contentUpdateOneRequiredWithoutCommentNestedInput
    episode?: episodeUpdateOneRequiredWithoutCommentNestedInput
    user?: userUpdateOneRequiredWithoutCommentNestedInput
  }

  export type commentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    episode_id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type commentCreateManyInput = {
    id?: number
    user_id: number
    content_id: number
    episode_id: number
    comment: string
    created_at?: Date | string
  }

  export type commentUpdateManyMutationInput = {
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type commentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    episode_id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type contentCreateInput = {
    title: string
    slug: string
    title_english?: string | null
    title_japanese?: string | null
    description?: string | null
    type: $Enums.content_type
    release_year?: number | null
    season_name?: $Enums.content_season_name | null
    studios?: string | null
    actor?: string | null
    score?: number | null
    thumbnail_url?: string | null
    backdrop_url?: string | null
    video_url?: string | null
    created_at?: Date | string
    duration_minutes?: number | null
    num_seasons?: number | null
    num_episodes?: number | null
    bookmark?: bookmarkCreateNestedManyWithoutContentInput
    comment?: commentCreateNestedManyWithoutContentInput
    contentgenre?: contentgenreCreateNestedManyWithoutContentInput
    episode?: episodeCreateNestedManyWithoutContentInput
    rating?: ratingCreateNestedManyWithoutContentInput
    reportcontent?: reportcontentCreateNestedManyWithoutContentInput
    season?: seasonCreateNestedManyWithoutContentInput
    subtitle?: subtitleCreateNestedManyWithoutContentInput
    trendingcontent?: trendingcontentCreateNestedManyWithoutContentInput
    watchhistory?: watchhistoryCreateNestedManyWithoutContentInput
  }

  export type contentUncheckedCreateInput = {
    id?: number
    title: string
    slug: string
    title_english?: string | null
    title_japanese?: string | null
    description?: string | null
    type: $Enums.content_type
    release_year?: number | null
    season_name?: $Enums.content_season_name | null
    studios?: string | null
    actor?: string | null
    score?: number | null
    thumbnail_url?: string | null
    backdrop_url?: string | null
    video_url?: string | null
    created_at?: Date | string
    duration_minutes?: number | null
    num_seasons?: number | null
    num_episodes?: number | null
    bookmark?: bookmarkUncheckedCreateNestedManyWithoutContentInput
    comment?: commentUncheckedCreateNestedManyWithoutContentInput
    contentgenre?: contentgenreUncheckedCreateNestedManyWithoutContentInput
    episode?: episodeUncheckedCreateNestedManyWithoutContentInput
    rating?: ratingUncheckedCreateNestedManyWithoutContentInput
    reportcontent?: reportcontentUncheckedCreateNestedManyWithoutContentInput
    season?: seasonUncheckedCreateNestedManyWithoutContentInput
    subtitle?: subtitleUncheckedCreateNestedManyWithoutContentInput
    trendingcontent?: trendingcontentUncheckedCreateNestedManyWithoutContentInput
    watchhistory?: watchhistoryUncheckedCreateNestedManyWithoutContentInput
  }

  export type contentUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title_english?: NullableStringFieldUpdateOperationsInput | string | null
    title_japanese?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enumcontent_typeFieldUpdateOperationsInput | $Enums.content_type
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    season_name?: NullableEnumcontent_season_nameFieldUpdateOperationsInput | $Enums.content_season_name | null
    studios?: NullableStringFieldUpdateOperationsInput | string | null
    actor?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    backdrop_url?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration_minutes?: NullableIntFieldUpdateOperationsInput | number | null
    num_seasons?: NullableIntFieldUpdateOperationsInput | number | null
    num_episodes?: NullableIntFieldUpdateOperationsInput | number | null
    bookmark?: bookmarkUpdateManyWithoutContentNestedInput
    comment?: commentUpdateManyWithoutContentNestedInput
    contentgenre?: contentgenreUpdateManyWithoutContentNestedInput
    episode?: episodeUpdateManyWithoutContentNestedInput
    rating?: ratingUpdateManyWithoutContentNestedInput
    reportcontent?: reportcontentUpdateManyWithoutContentNestedInput
    season?: seasonUpdateManyWithoutContentNestedInput
    subtitle?: subtitleUpdateManyWithoutContentNestedInput
    trendingcontent?: trendingcontentUpdateManyWithoutContentNestedInput
    watchhistory?: watchhistoryUpdateManyWithoutContentNestedInput
  }

  export type contentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title_english?: NullableStringFieldUpdateOperationsInput | string | null
    title_japanese?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enumcontent_typeFieldUpdateOperationsInput | $Enums.content_type
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    season_name?: NullableEnumcontent_season_nameFieldUpdateOperationsInput | $Enums.content_season_name | null
    studios?: NullableStringFieldUpdateOperationsInput | string | null
    actor?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    backdrop_url?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration_minutes?: NullableIntFieldUpdateOperationsInput | number | null
    num_seasons?: NullableIntFieldUpdateOperationsInput | number | null
    num_episodes?: NullableIntFieldUpdateOperationsInput | number | null
    bookmark?: bookmarkUncheckedUpdateManyWithoutContentNestedInput
    comment?: commentUncheckedUpdateManyWithoutContentNestedInput
    contentgenre?: contentgenreUncheckedUpdateManyWithoutContentNestedInput
    episode?: episodeUncheckedUpdateManyWithoutContentNestedInput
    rating?: ratingUncheckedUpdateManyWithoutContentNestedInput
    reportcontent?: reportcontentUncheckedUpdateManyWithoutContentNestedInput
    season?: seasonUncheckedUpdateManyWithoutContentNestedInput
    subtitle?: subtitleUncheckedUpdateManyWithoutContentNestedInput
    trendingcontent?: trendingcontentUncheckedUpdateManyWithoutContentNestedInput
    watchhistory?: watchhistoryUncheckedUpdateManyWithoutContentNestedInput
  }

  export type contentCreateManyInput = {
    id?: number
    title: string
    slug: string
    title_english?: string | null
    title_japanese?: string | null
    description?: string | null
    type: $Enums.content_type
    release_year?: number | null
    season_name?: $Enums.content_season_name | null
    studios?: string | null
    actor?: string | null
    score?: number | null
    thumbnail_url?: string | null
    backdrop_url?: string | null
    video_url?: string | null
    created_at?: Date | string
    duration_minutes?: number | null
    num_seasons?: number | null
    num_episodes?: number | null
  }

  export type contentUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title_english?: NullableStringFieldUpdateOperationsInput | string | null
    title_japanese?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enumcontent_typeFieldUpdateOperationsInput | $Enums.content_type
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    season_name?: NullableEnumcontent_season_nameFieldUpdateOperationsInput | $Enums.content_season_name | null
    studios?: NullableStringFieldUpdateOperationsInput | string | null
    actor?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    backdrop_url?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration_minutes?: NullableIntFieldUpdateOperationsInput | number | null
    num_seasons?: NullableIntFieldUpdateOperationsInput | number | null
    num_episodes?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type contentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title_english?: NullableStringFieldUpdateOperationsInput | string | null
    title_japanese?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enumcontent_typeFieldUpdateOperationsInput | $Enums.content_type
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    season_name?: NullableEnumcontent_season_nameFieldUpdateOperationsInput | $Enums.content_season_name | null
    studios?: NullableStringFieldUpdateOperationsInput | string | null
    actor?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    backdrop_url?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration_minutes?: NullableIntFieldUpdateOperationsInput | number | null
    num_seasons?: NullableIntFieldUpdateOperationsInput | number | null
    num_episodes?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type contentgenreCreateInput = {
    content: contentCreateNestedOneWithoutContentgenreInput
    genre: genreCreateNestedOneWithoutContentgenreInput
  }

  export type contentgenreUncheckedCreateInput = {
    content_id: number
    genre_id: number
  }

  export type contentgenreUpdateInput = {
    content?: contentUpdateOneRequiredWithoutContentgenreNestedInput
    genre?: genreUpdateOneRequiredWithoutContentgenreNestedInput
  }

  export type contentgenreUncheckedUpdateInput = {
    content_id?: IntFieldUpdateOperationsInput | number
    genre_id?: IntFieldUpdateOperationsInput | number
  }

  export type contentgenreCreateManyInput = {
    content_id: number
    genre_id: number
  }

  export type contentgenreUpdateManyMutationInput = {

  }

  export type contentgenreUncheckedUpdateManyInput = {
    content_id?: IntFieldUpdateOperationsInput | number
    genre_id?: IntFieldUpdateOperationsInput | number
  }

  export type episodeCreateInput = {
    season: number
    episode_number: number
    title?: string | null
    created_at?: Date | string
    comment?: commentCreateNestedManyWithoutEpisodeInput
    content: contentCreateNestedOneWithoutEpisodeInput
    episodesource?: episodesourceCreateNestedManyWithoutEpisodeInput
    reportcontent?: reportcontentCreateNestedManyWithoutEpisodeInput
    subtitle?: subtitleCreateNestedManyWithoutEpisodeInput
    watchhistory?: watchhistoryCreateNestedManyWithoutEpisodeInput
  }

  export type episodeUncheckedCreateInput = {
    id?: number
    content_id: number
    season: number
    episode_number: number
    title?: string | null
    created_at?: Date | string
    comment?: commentUncheckedCreateNestedManyWithoutEpisodeInput
    episodesource?: episodesourceUncheckedCreateNestedManyWithoutEpisodeInput
    reportcontent?: reportcontentUncheckedCreateNestedManyWithoutEpisodeInput
    subtitle?: subtitleUncheckedCreateNestedManyWithoutEpisodeInput
    watchhistory?: watchhistoryUncheckedCreateNestedManyWithoutEpisodeInput
  }

  export type episodeUpdateInput = {
    season?: IntFieldUpdateOperationsInput | number
    episode_number?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: commentUpdateManyWithoutEpisodeNestedInput
    content?: contentUpdateOneRequiredWithoutEpisodeNestedInput
    episodesource?: episodesourceUpdateManyWithoutEpisodeNestedInput
    reportcontent?: reportcontentUpdateManyWithoutEpisodeNestedInput
    subtitle?: subtitleUpdateManyWithoutEpisodeNestedInput
    watchhistory?: watchhistoryUpdateManyWithoutEpisodeNestedInput
  }

  export type episodeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    season?: IntFieldUpdateOperationsInput | number
    episode_number?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: commentUncheckedUpdateManyWithoutEpisodeNestedInput
    episodesource?: episodesourceUncheckedUpdateManyWithoutEpisodeNestedInput
    reportcontent?: reportcontentUncheckedUpdateManyWithoutEpisodeNestedInput
    subtitle?: subtitleUncheckedUpdateManyWithoutEpisodeNestedInput
    watchhistory?: watchhistoryUncheckedUpdateManyWithoutEpisodeNestedInput
  }

  export type episodeCreateManyInput = {
    id?: number
    content_id: number
    season: number
    episode_number: number
    title?: string | null
    created_at?: Date | string
  }

  export type episodeUpdateManyMutationInput = {
    season?: IntFieldUpdateOperationsInput | number
    episode_number?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type episodeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    season?: IntFieldUpdateOperationsInput | number
    episode_number?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type genreCreateInput = {
    name: string
    contentgenre?: contentgenreCreateNestedManyWithoutGenreInput
  }

  export type genreUncheckedCreateInput = {
    id?: number
    name: string
    contentgenre?: contentgenreUncheckedCreateNestedManyWithoutGenreInput
  }

  export type genreUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    contentgenre?: contentgenreUpdateManyWithoutGenreNestedInput
  }

  export type genreUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contentgenre?: contentgenreUncheckedUpdateManyWithoutGenreNestedInput
  }

  export type genreCreateManyInput = {
    id?: number
    name: string
  }

  export type genreUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type genreUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type notificationCreateInput = {
    type: $Enums.notification_type
    message: string
    is_read?: boolean
    created_at?: Date | string
    user: userCreateNestedOneWithoutNotificationInput
  }

  export type notificationUncheckedCreateInput = {
    id?: number
    user_id: number
    type: $Enums.notification_type
    message: string
    is_read?: boolean
    created_at?: Date | string
  }

  export type notificationUpdateInput = {
    type?: Enumnotification_typeFieldUpdateOperationsInput | $Enums.notification_type
    message?: StringFieldUpdateOperationsInput | string
    is_read?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutNotificationNestedInput
  }

  export type notificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    type?: Enumnotification_typeFieldUpdateOperationsInput | $Enums.notification_type
    message?: StringFieldUpdateOperationsInput | string
    is_read?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type notificationCreateManyInput = {
    id?: number
    user_id: number
    type: $Enums.notification_type
    message: string
    is_read?: boolean
    created_at?: Date | string
  }

  export type notificationUpdateManyMutationInput = {
    type?: Enumnotification_typeFieldUpdateOperationsInput | $Enums.notification_type
    message?: StringFieldUpdateOperationsInput | string
    is_read?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type notificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    type?: Enumnotification_typeFieldUpdateOperationsInput | $Enums.notification_type
    message?: StringFieldUpdateOperationsInput | string
    is_read?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ratingCreateInput = {
    rating: number
    comment?: string | null
    created_at?: Date | string
    content: contentCreateNestedOneWithoutRatingInput
    user: userCreateNestedOneWithoutRatingInput
  }

  export type ratingUncheckedCreateInput = {
    id?: number
    user_id: number
    content_id: number
    rating: number
    comment?: string | null
    created_at?: Date | string
  }

  export type ratingUpdateInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: contentUpdateOneRequiredWithoutRatingNestedInput
    user?: userUpdateOneRequiredWithoutRatingNestedInput
  }

  export type ratingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ratingCreateManyInput = {
    id?: number
    user_id: number
    content_id: number
    rating: number
    comment?: string | null
    created_at?: Date | string
  }

  export type ratingUpdateManyMutationInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ratingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reportcontentCreateInput = {
    reason: string
    created_at?: Date | string
    content: contentCreateNestedOneWithoutReportcontentInput
    episode: episodeCreateNestedOneWithoutReportcontentInput
    user: userCreateNestedOneWithoutReportcontentInput
  }

  export type reportcontentUncheckedCreateInput = {
    id?: number
    user_id: number
    content_id: number
    episode_id: number
    reason: string
    created_at?: Date | string
  }

  export type reportcontentUpdateInput = {
    reason?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: contentUpdateOneRequiredWithoutReportcontentNestedInput
    episode?: episodeUpdateOneRequiredWithoutReportcontentNestedInput
    user?: userUpdateOneRequiredWithoutReportcontentNestedInput
  }

  export type reportcontentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    episode_id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reportcontentCreateManyInput = {
    id?: number
    user_id: number
    content_id: number
    episode_id: number
    reason: string
    created_at?: Date | string
  }

  export type reportcontentUpdateManyMutationInput = {
    reason?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reportcontentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    episode_id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type searchlogCreateInput = {
    keyword: string
    searched_at?: Date | string
    user: userCreateNestedOneWithoutSearchlogInput
  }

  export type searchlogUncheckedCreateInput = {
    id?: number
    user_id: number
    keyword: string
    searched_at?: Date | string
  }

  export type searchlogUpdateInput = {
    keyword?: StringFieldUpdateOperationsInput | string
    searched_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutSearchlogNestedInput
  }

  export type searchlogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    keyword?: StringFieldUpdateOperationsInput | string
    searched_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type searchlogCreateManyInput = {
    id?: number
    user_id: number
    keyword: string
    searched_at?: Date | string
  }

  export type searchlogUpdateManyMutationInput = {
    keyword?: StringFieldUpdateOperationsInput | string
    searched_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type searchlogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    keyword?: StringFieldUpdateOperationsInput | string
    searched_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type seasonCreateInput = {
    season_number: number
    title: string
    description?: string | null
    thumbnail_url?: string | null
    created_at?: Date | string
    content: contentCreateNestedOneWithoutSeasonInput
  }

  export type seasonUncheckedCreateInput = {
    id?: number
    content_id: number
    season_number: number
    title: string
    description?: string | null
    thumbnail_url?: string | null
    created_at?: Date | string
  }

  export type seasonUpdateInput = {
    season_number?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: contentUpdateOneRequiredWithoutSeasonNestedInput
  }

  export type seasonUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    season_number?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type seasonCreateManyInput = {
    id?: number
    content_id: number
    season_number: number
    title: string
    description?: string | null
    thumbnail_url?: string | null
    created_at?: Date | string
  }

  export type seasonUpdateManyMutationInput = {
    season_number?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type seasonUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    season_number?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type subtitleCreateInput = {
    language: string
    file_url: string
    created_at?: Date | string
    content: contentCreateNestedOneWithoutSubtitleInput
    episode: episodeCreateNestedOneWithoutSubtitleInput
  }

  export type subtitleUncheckedCreateInput = {
    id?: number
    content_id: number
    episode_id: number
    language: string
    file_url: string
    created_at?: Date | string
  }

  export type subtitleUpdateInput = {
    language?: StringFieldUpdateOperationsInput | string
    file_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: contentUpdateOneRequiredWithoutSubtitleNestedInput
    episode?: episodeUpdateOneRequiredWithoutSubtitleNestedInput
  }

  export type subtitleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    episode_id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    file_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type subtitleCreateManyInput = {
    id?: number
    content_id: number
    episode_id: number
    language: string
    file_url: string
    created_at?: Date | string
  }

  export type subtitleUpdateManyMutationInput = {
    language?: StringFieldUpdateOperationsInput | string
    file_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type subtitleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    episode_id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    file_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type trendingcontentCreateInput = {
    week_start: Date | string
    view_count: number
    created_at?: Date | string
    content: contentCreateNestedOneWithoutTrendingcontentInput
  }

  export type trendingcontentUncheckedCreateInput = {
    id?: number
    content_id: number
    week_start: Date | string
    view_count: number
    created_at?: Date | string
  }

  export type trendingcontentUpdateInput = {
    week_start?: DateTimeFieldUpdateOperationsInput | Date | string
    view_count?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: contentUpdateOneRequiredWithoutTrendingcontentNestedInput
  }

  export type trendingcontentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    week_start?: DateTimeFieldUpdateOperationsInput | Date | string
    view_count?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type trendingcontentCreateManyInput = {
    id?: number
    content_id: number
    week_start: Date | string
    view_count: number
    created_at?: Date | string
  }

  export type trendingcontentUpdateManyMutationInput = {
    week_start?: DateTimeFieldUpdateOperationsInput | Date | string
    view_count?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type trendingcontentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    week_start?: DateTimeFieldUpdateOperationsInput | Date | string
    view_count?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userCreateInput = {
    email: string
    password: string
    role?: $Enums.user_role
    created_at?: Date | string
    bookmark?: bookmarkCreateNestedManyWithoutUserInput
    comment?: commentCreateNestedManyWithoutUserInput
    notification?: notificationCreateNestedManyWithoutUserInput
    rating?: ratingCreateNestedManyWithoutUserInput
    reportcontent?: reportcontentCreateNestedManyWithoutUserInput
    searchlog?: searchlogCreateNestedManyWithoutUserInput
    watchhistory?: watchhistoryCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    role?: $Enums.user_role
    created_at?: Date | string
    bookmark?: bookmarkUncheckedCreateNestedManyWithoutUserInput
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
    notification?: notificationUncheckedCreateNestedManyWithoutUserInput
    rating?: ratingUncheckedCreateNestedManyWithoutUserInput
    reportcontent?: reportcontentUncheckedCreateNestedManyWithoutUserInput
    searchlog?: searchlogUncheckedCreateNestedManyWithoutUserInput
    watchhistory?: watchhistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type userUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | $Enums.user_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    bookmark?: bookmarkUpdateManyWithoutUserNestedInput
    comment?: commentUpdateManyWithoutUserNestedInput
    notification?: notificationUpdateManyWithoutUserNestedInput
    rating?: ratingUpdateManyWithoutUserNestedInput
    reportcontent?: reportcontentUpdateManyWithoutUserNestedInput
    searchlog?: searchlogUpdateManyWithoutUserNestedInput
    watchhistory?: watchhistoryUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | $Enums.user_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    bookmark?: bookmarkUncheckedUpdateManyWithoutUserNestedInput
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
    notification?: notificationUncheckedUpdateManyWithoutUserNestedInput
    rating?: ratingUncheckedUpdateManyWithoutUserNestedInput
    reportcontent?: reportcontentUncheckedUpdateManyWithoutUserNestedInput
    searchlog?: searchlogUncheckedUpdateManyWithoutUserNestedInput
    watchhistory?: watchhistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateManyInput = {
    id?: number
    email: string
    password: string
    role?: $Enums.user_role
    created_at?: Date | string
  }

  export type userUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | $Enums.user_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | $Enums.user_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type watchhistoryCreateInput = {
    last_watch_seconds: number
    updated_at?: Date | string
    content: contentCreateNestedOneWithoutWatchhistoryInput
    episode: episodeCreateNestedOneWithoutWatchhistoryInput
    user: userCreateNestedOneWithoutWatchhistoryInput
  }

  export type watchhistoryUncheckedCreateInput = {
    id?: number
    user_id: number
    content_id: number
    episode_id: number
    last_watch_seconds: number
    updated_at?: Date | string
  }

  export type watchhistoryUpdateInput = {
    last_watch_seconds?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: contentUpdateOneRequiredWithoutWatchhistoryNestedInput
    episode?: episodeUpdateOneRequiredWithoutWatchhistoryNestedInput
    user?: userUpdateOneRequiredWithoutWatchhistoryNestedInput
  }

  export type watchhistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    episode_id?: IntFieldUpdateOperationsInput | number
    last_watch_seconds?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type watchhistoryCreateManyInput = {
    id?: number
    user_id: number
    content_id: number
    episode_id: number
    last_watch_seconds: number
    updated_at?: Date | string
  }

  export type watchhistoryUpdateManyMutationInput = {
    last_watch_seconds?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type watchhistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    episode_id?: IntFieldUpdateOperationsInput | number
    last_watch_seconds?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type episodesourceCreateInput = {
    provider: string
    priority?: number
    created_at?: Date | string
    episode: episodeCreateNestedOneWithoutEpisodesourceInput
    qualities?: episodesourcequalityCreateNestedManyWithoutEpisodesourceInput
  }

  export type episodesourceUncheckedCreateInput = {
    id?: number
    episode_id: number
    provider: string
    priority?: number
    created_at?: Date | string
    qualities?: episodesourcequalityUncheckedCreateNestedManyWithoutEpisodesourceInput
  }

  export type episodesourceUpdateInput = {
    provider?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    episode?: episodeUpdateOneRequiredWithoutEpisodesourceNestedInput
    qualities?: episodesourcequalityUpdateManyWithoutEpisodesourceNestedInput
  }

  export type episodesourceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    episode_id?: IntFieldUpdateOperationsInput | number
    provider?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    qualities?: episodesourcequalityUncheckedUpdateManyWithoutEpisodesourceNestedInput
  }

  export type episodesourceCreateManyInput = {
    id?: number
    episode_id: number
    provider: string
    priority?: number
    created_at?: Date | string
  }

  export type episodesourceUpdateManyMutationInput = {
    provider?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type episodesourceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    episode_id?: IntFieldUpdateOperationsInput | number
    provider?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type episodesourcequalityCreateInput = {
    resolution: string
    url: string
    created_at?: Date | string
    episodesource: episodesourceCreateNestedOneWithoutQualitiesInput
  }

  export type episodesourcequalityUncheckedCreateInput = {
    id?: number
    episodesource_id: number
    resolution: string
    url: string
    created_at?: Date | string
  }

  export type episodesourcequalityUpdateInput = {
    resolution?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    episodesource?: episodesourceUpdateOneRequiredWithoutQualitiesNestedInput
  }

  export type episodesourcequalityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    episodesource_id?: IntFieldUpdateOperationsInput | number
    resolution?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type episodesourcequalityCreateManyInput = {
    id?: number
    episodesource_id: number
    resolution: string
    url: string
    created_at?: Date | string
  }

  export type episodesourcequalityUpdateManyMutationInput = {
    resolution?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type episodesourcequalityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    episodesource_id?: IntFieldUpdateOperationsInput | number
    resolution?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ContentScalarRelationFilter = {
    is?: contentWhereInput
    isNot?: contentWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type bookmarkUser_idContent_idCompoundUniqueInput = {
    user_id: number
    content_id: number
  }

  export type bookmarkCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    created_at?: SortOrder
  }

  export type bookmarkAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
  }

  export type bookmarkMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    created_at?: SortOrder
  }

  export type bookmarkMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    created_at?: SortOrder
  }

  export type bookmarkSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EpisodeScalarRelationFilter = {
    is?: episodeWhereInput
    isNot?: episodeWhereInput
  }

  export type commentOrderByRelevanceInput = {
    fields: commentOrderByRelevanceFieldEnum | commentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type commentCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
    comment?: SortOrder
    created_at?: SortOrder
  }

  export type commentAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
  }

  export type commentMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
    comment?: SortOrder
    created_at?: SortOrder
  }

  export type commentMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
    comment?: SortOrder
    created_at?: SortOrder
  }

  export type commentSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type Enumcontent_typeFilter<$PrismaModel = never> = {
    equals?: $Enums.content_type | Enumcontent_typeFieldRefInput<$PrismaModel>
    in?: $Enums.content_type[]
    notIn?: $Enums.content_type[]
    not?: NestedEnumcontent_typeFilter<$PrismaModel> | $Enums.content_type
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type Enumcontent_season_nameNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.content_season_name | Enumcontent_season_nameFieldRefInput<$PrismaModel> | null
    in?: $Enums.content_season_name[] | null
    notIn?: $Enums.content_season_name[] | null
    not?: NestedEnumcontent_season_nameNullableFilter<$PrismaModel> | $Enums.content_season_name | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type BookmarkListRelationFilter = {
    every?: bookmarkWhereInput
    some?: bookmarkWhereInput
    none?: bookmarkWhereInput
  }

  export type CommentListRelationFilter = {
    every?: commentWhereInput
    some?: commentWhereInput
    none?: commentWhereInput
  }

  export type ContentgenreListRelationFilter = {
    every?: contentgenreWhereInput
    some?: contentgenreWhereInput
    none?: contentgenreWhereInput
  }

  export type EpisodeListRelationFilter = {
    every?: episodeWhereInput
    some?: episodeWhereInput
    none?: episodeWhereInput
  }

  export type RatingListRelationFilter = {
    every?: ratingWhereInput
    some?: ratingWhereInput
    none?: ratingWhereInput
  }

  export type ReportcontentListRelationFilter = {
    every?: reportcontentWhereInput
    some?: reportcontentWhereInput
    none?: reportcontentWhereInput
  }

  export type SeasonListRelationFilter = {
    every?: seasonWhereInput
    some?: seasonWhereInput
    none?: seasonWhereInput
  }

  export type SubtitleListRelationFilter = {
    every?: subtitleWhereInput
    some?: subtitleWhereInput
    none?: subtitleWhereInput
  }

  export type TrendingcontentListRelationFilter = {
    every?: trendingcontentWhereInput
    some?: trendingcontentWhereInput
    none?: trendingcontentWhereInput
  }

  export type WatchhistoryListRelationFilter = {
    every?: watchhistoryWhereInput
    some?: watchhistoryWhereInput
    none?: watchhistoryWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type bookmarkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type commentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type contentgenreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type episodeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ratingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type reportcontentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type seasonOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type subtitleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type trendingcontentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type watchhistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type contentOrderByRelevanceInput = {
    fields: contentOrderByRelevanceFieldEnum | contentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type contentCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    title_english?: SortOrder
    title_japanese?: SortOrder
    description?: SortOrder
    type?: SortOrder
    release_year?: SortOrder
    season_name?: SortOrder
    studios?: SortOrder
    actor?: SortOrder
    score?: SortOrder
    thumbnail_url?: SortOrder
    backdrop_url?: SortOrder
    video_url?: SortOrder
    created_at?: SortOrder
    duration_minutes?: SortOrder
    num_seasons?: SortOrder
    num_episodes?: SortOrder
  }

  export type contentAvgOrderByAggregateInput = {
    id?: SortOrder
    release_year?: SortOrder
    score?: SortOrder
    duration_minutes?: SortOrder
    num_seasons?: SortOrder
    num_episodes?: SortOrder
  }

  export type contentMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    title_english?: SortOrder
    title_japanese?: SortOrder
    description?: SortOrder
    type?: SortOrder
    release_year?: SortOrder
    season_name?: SortOrder
    studios?: SortOrder
    actor?: SortOrder
    score?: SortOrder
    thumbnail_url?: SortOrder
    backdrop_url?: SortOrder
    video_url?: SortOrder
    created_at?: SortOrder
    duration_minutes?: SortOrder
    num_seasons?: SortOrder
    num_episodes?: SortOrder
  }

  export type contentMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    title_english?: SortOrder
    title_japanese?: SortOrder
    description?: SortOrder
    type?: SortOrder
    release_year?: SortOrder
    season_name?: SortOrder
    studios?: SortOrder
    actor?: SortOrder
    score?: SortOrder
    thumbnail_url?: SortOrder
    backdrop_url?: SortOrder
    video_url?: SortOrder
    created_at?: SortOrder
    duration_minutes?: SortOrder
    num_seasons?: SortOrder
    num_episodes?: SortOrder
  }

  export type contentSumOrderByAggregateInput = {
    id?: SortOrder
    release_year?: SortOrder
    score?: SortOrder
    duration_minutes?: SortOrder
    num_seasons?: SortOrder
    num_episodes?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type Enumcontent_typeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.content_type | Enumcontent_typeFieldRefInput<$PrismaModel>
    in?: $Enums.content_type[]
    notIn?: $Enums.content_type[]
    not?: NestedEnumcontent_typeWithAggregatesFilter<$PrismaModel> | $Enums.content_type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumcontent_typeFilter<$PrismaModel>
    _max?: NestedEnumcontent_typeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type Enumcontent_season_nameNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.content_season_name | Enumcontent_season_nameFieldRefInput<$PrismaModel> | null
    in?: $Enums.content_season_name[] | null
    notIn?: $Enums.content_season_name[] | null
    not?: NestedEnumcontent_season_nameNullableWithAggregatesFilter<$PrismaModel> | $Enums.content_season_name | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumcontent_season_nameNullableFilter<$PrismaModel>
    _max?: NestedEnumcontent_season_nameNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type GenreScalarRelationFilter = {
    is?: genreWhereInput
    isNot?: genreWhereInput
  }

  export type contentgenreContent_idGenre_idCompoundUniqueInput = {
    content_id: number
    genre_id: number
  }

  export type contentgenreCountOrderByAggregateInput = {
    content_id?: SortOrder
    genre_id?: SortOrder
  }

  export type contentgenreAvgOrderByAggregateInput = {
    content_id?: SortOrder
    genre_id?: SortOrder
  }

  export type contentgenreMaxOrderByAggregateInput = {
    content_id?: SortOrder
    genre_id?: SortOrder
  }

  export type contentgenreMinOrderByAggregateInput = {
    content_id?: SortOrder
    genre_id?: SortOrder
  }

  export type contentgenreSumOrderByAggregateInput = {
    content_id?: SortOrder
    genre_id?: SortOrder
  }

  export type EpisodesourceListRelationFilter = {
    every?: episodesourceWhereInput
    some?: episodesourceWhereInput
    none?: episodesourceWhereInput
  }

  export type episodesourceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type episodeOrderByRelevanceInput = {
    fields: episodeOrderByRelevanceFieldEnum | episodeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type episodeCountOrderByAggregateInput = {
    id?: SortOrder
    content_id?: SortOrder
    season?: SortOrder
    episode_number?: SortOrder
    title?: SortOrder
    created_at?: SortOrder
  }

  export type episodeAvgOrderByAggregateInput = {
    id?: SortOrder
    content_id?: SortOrder
    season?: SortOrder
    episode_number?: SortOrder
  }

  export type episodeMaxOrderByAggregateInput = {
    id?: SortOrder
    content_id?: SortOrder
    season?: SortOrder
    episode_number?: SortOrder
    title?: SortOrder
    created_at?: SortOrder
  }

  export type episodeMinOrderByAggregateInput = {
    id?: SortOrder
    content_id?: SortOrder
    season?: SortOrder
    episode_number?: SortOrder
    title?: SortOrder
    created_at?: SortOrder
  }

  export type episodeSumOrderByAggregateInput = {
    id?: SortOrder
    content_id?: SortOrder
    season?: SortOrder
    episode_number?: SortOrder
  }

  export type genreOrderByRelevanceInput = {
    fields: genreOrderByRelevanceFieldEnum | genreOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type genreCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type genreAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type genreMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type genreMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type genreSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type Enumnotification_typeFilter<$PrismaModel = never> = {
    equals?: $Enums.notification_type | Enumnotification_typeFieldRefInput<$PrismaModel>
    in?: $Enums.notification_type[]
    notIn?: $Enums.notification_type[]
    not?: NestedEnumnotification_typeFilter<$PrismaModel> | $Enums.notification_type
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type notificationOrderByRelevanceInput = {
    fields: notificationOrderByRelevanceFieldEnum | notificationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type notificationCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
    message?: SortOrder
    is_read?: SortOrder
    created_at?: SortOrder
  }

  export type notificationAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type notificationMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
    message?: SortOrder
    is_read?: SortOrder
    created_at?: SortOrder
  }

  export type notificationMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
    message?: SortOrder
    is_read?: SortOrder
    created_at?: SortOrder
  }

  export type notificationSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type Enumnotification_typeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.notification_type | Enumnotification_typeFieldRefInput<$PrismaModel>
    in?: $Enums.notification_type[]
    notIn?: $Enums.notification_type[]
    not?: NestedEnumnotification_typeWithAggregatesFilter<$PrismaModel> | $Enums.notification_type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumnotification_typeFilter<$PrismaModel>
    _max?: NestedEnumnotification_typeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ratingOrderByRelevanceInput = {
    fields: ratingOrderByRelevanceFieldEnum | ratingOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ratingUser_idContent_idCompoundUniqueInput = {
    user_id: number
    content_id: number
  }

  export type ratingCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    created_at?: SortOrder
  }

  export type ratingAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    rating?: SortOrder
  }

  export type ratingMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    created_at?: SortOrder
  }

  export type ratingMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    created_at?: SortOrder
  }

  export type ratingSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    rating?: SortOrder
  }

  export type reportcontentOrderByRelevanceInput = {
    fields: reportcontentOrderByRelevanceFieldEnum | reportcontentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type reportcontentCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
    reason?: SortOrder
    created_at?: SortOrder
  }

  export type reportcontentAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
  }

  export type reportcontentMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
    reason?: SortOrder
    created_at?: SortOrder
  }

  export type reportcontentMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
    reason?: SortOrder
    created_at?: SortOrder
  }

  export type reportcontentSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
  }

  export type searchlogOrderByRelevanceInput = {
    fields: searchlogOrderByRelevanceFieldEnum | searchlogOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type searchlogCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    keyword?: SortOrder
    searched_at?: SortOrder
  }

  export type searchlogAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type searchlogMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    keyword?: SortOrder
    searched_at?: SortOrder
  }

  export type searchlogMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    keyword?: SortOrder
    searched_at?: SortOrder
  }

  export type searchlogSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type seasonOrderByRelevanceInput = {
    fields: seasonOrderByRelevanceFieldEnum | seasonOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type seasonContent_idSeason_numberCompoundUniqueInput = {
    content_id: number
    season_number: number
  }

  export type seasonCountOrderByAggregateInput = {
    id?: SortOrder
    content_id?: SortOrder
    season_number?: SortOrder
    title?: SortOrder
    description?: SortOrder
    thumbnail_url?: SortOrder
    created_at?: SortOrder
  }

  export type seasonAvgOrderByAggregateInput = {
    id?: SortOrder
    content_id?: SortOrder
    season_number?: SortOrder
  }

  export type seasonMaxOrderByAggregateInput = {
    id?: SortOrder
    content_id?: SortOrder
    season_number?: SortOrder
    title?: SortOrder
    description?: SortOrder
    thumbnail_url?: SortOrder
    created_at?: SortOrder
  }

  export type seasonMinOrderByAggregateInput = {
    id?: SortOrder
    content_id?: SortOrder
    season_number?: SortOrder
    title?: SortOrder
    description?: SortOrder
    thumbnail_url?: SortOrder
    created_at?: SortOrder
  }

  export type seasonSumOrderByAggregateInput = {
    id?: SortOrder
    content_id?: SortOrder
    season_number?: SortOrder
  }

  export type subtitleOrderByRelevanceInput = {
    fields: subtitleOrderByRelevanceFieldEnum | subtitleOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type subtitleCountOrderByAggregateInput = {
    id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
    language?: SortOrder
    file_url?: SortOrder
    created_at?: SortOrder
  }

  export type subtitleAvgOrderByAggregateInput = {
    id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
  }

  export type subtitleMaxOrderByAggregateInput = {
    id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
    language?: SortOrder
    file_url?: SortOrder
    created_at?: SortOrder
  }

  export type subtitleMinOrderByAggregateInput = {
    id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
    language?: SortOrder
    file_url?: SortOrder
    created_at?: SortOrder
  }

  export type subtitleSumOrderByAggregateInput = {
    id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
  }

  export type trendingcontentContent_idWeek_startCompoundUniqueInput = {
    content_id: number
    week_start: Date | string
  }

  export type trendingcontentCountOrderByAggregateInput = {
    id?: SortOrder
    content_id?: SortOrder
    week_start?: SortOrder
    view_count?: SortOrder
    created_at?: SortOrder
  }

  export type trendingcontentAvgOrderByAggregateInput = {
    id?: SortOrder
    content_id?: SortOrder
    view_count?: SortOrder
  }

  export type trendingcontentMaxOrderByAggregateInput = {
    id?: SortOrder
    content_id?: SortOrder
    week_start?: SortOrder
    view_count?: SortOrder
    created_at?: SortOrder
  }

  export type trendingcontentMinOrderByAggregateInput = {
    id?: SortOrder
    content_id?: SortOrder
    week_start?: SortOrder
    view_count?: SortOrder
    created_at?: SortOrder
  }

  export type trendingcontentSumOrderByAggregateInput = {
    id?: SortOrder
    content_id?: SortOrder
    view_count?: SortOrder
  }

  export type Enumuser_roleFilter<$PrismaModel = never> = {
    equals?: $Enums.user_role | Enumuser_roleFieldRefInput<$PrismaModel>
    in?: $Enums.user_role[]
    notIn?: $Enums.user_role[]
    not?: NestedEnumuser_roleFilter<$PrismaModel> | $Enums.user_role
  }

  export type NotificationListRelationFilter = {
    every?: notificationWhereInput
    some?: notificationWhereInput
    none?: notificationWhereInput
  }

  export type SearchlogListRelationFilter = {
    every?: searchlogWhereInput
    some?: searchlogWhereInput
    none?: searchlogWhereInput
  }

  export type notificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type searchlogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userOrderByRelevanceInput = {
    fields: userOrderByRelevanceFieldEnum | userOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type Enumuser_roleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.user_role | Enumuser_roleFieldRefInput<$PrismaModel>
    in?: $Enums.user_role[]
    notIn?: $Enums.user_role[]
    not?: NestedEnumuser_roleWithAggregatesFilter<$PrismaModel> | $Enums.user_role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuser_roleFilter<$PrismaModel>
    _max?: NestedEnumuser_roleFilter<$PrismaModel>
  }

  export type watchhistoryCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
    last_watch_seconds?: SortOrder
    updated_at?: SortOrder
  }

  export type watchhistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
    last_watch_seconds?: SortOrder
  }

  export type watchhistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
    last_watch_seconds?: SortOrder
    updated_at?: SortOrder
  }

  export type watchhistoryMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
    last_watch_seconds?: SortOrder
    updated_at?: SortOrder
  }

  export type watchhistorySumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    content_id?: SortOrder
    episode_id?: SortOrder
    last_watch_seconds?: SortOrder
  }

  export type EpisodesourcequalityListRelationFilter = {
    every?: episodesourcequalityWhereInput
    some?: episodesourcequalityWhereInput
    none?: episodesourcequalityWhereInput
  }

  export type episodesourcequalityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type episodesourceOrderByRelevanceInput = {
    fields: episodesourceOrderByRelevanceFieldEnum | episodesourceOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type episodesourceCountOrderByAggregateInput = {
    id?: SortOrder
    episode_id?: SortOrder
    provider?: SortOrder
    priority?: SortOrder
    created_at?: SortOrder
  }

  export type episodesourceAvgOrderByAggregateInput = {
    id?: SortOrder
    episode_id?: SortOrder
    priority?: SortOrder
  }

  export type episodesourceMaxOrderByAggregateInput = {
    id?: SortOrder
    episode_id?: SortOrder
    provider?: SortOrder
    priority?: SortOrder
    created_at?: SortOrder
  }

  export type episodesourceMinOrderByAggregateInput = {
    id?: SortOrder
    episode_id?: SortOrder
    provider?: SortOrder
    priority?: SortOrder
    created_at?: SortOrder
  }

  export type episodesourceSumOrderByAggregateInput = {
    id?: SortOrder
    episode_id?: SortOrder
    priority?: SortOrder
  }

  export type EpisodesourceScalarRelationFilter = {
    is?: episodesourceWhereInput
    isNot?: episodesourceWhereInput
  }

  export type episodesourcequalityOrderByRelevanceInput = {
    fields: episodesourcequalityOrderByRelevanceFieldEnum | episodesourcequalityOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type episodesourcequalityCountOrderByAggregateInput = {
    id?: SortOrder
    episodesource_id?: SortOrder
    resolution?: SortOrder
    url?: SortOrder
    created_at?: SortOrder
  }

  export type episodesourcequalityAvgOrderByAggregateInput = {
    id?: SortOrder
    episodesource_id?: SortOrder
  }

  export type episodesourcequalityMaxOrderByAggregateInput = {
    id?: SortOrder
    episodesource_id?: SortOrder
    resolution?: SortOrder
    url?: SortOrder
    created_at?: SortOrder
  }

  export type episodesourcequalityMinOrderByAggregateInput = {
    id?: SortOrder
    episodesource_id?: SortOrder
    resolution?: SortOrder
    url?: SortOrder
    created_at?: SortOrder
  }

  export type episodesourcequalitySumOrderByAggregateInput = {
    id?: SortOrder
    episodesource_id?: SortOrder
  }

  export type contentCreateNestedOneWithoutBookmarkInput = {
    create?: XOR<contentCreateWithoutBookmarkInput, contentUncheckedCreateWithoutBookmarkInput>
    connectOrCreate?: contentCreateOrConnectWithoutBookmarkInput
    connect?: contentWhereUniqueInput
  }

  export type userCreateNestedOneWithoutBookmarkInput = {
    create?: XOR<userCreateWithoutBookmarkInput, userUncheckedCreateWithoutBookmarkInput>
    connectOrCreate?: userCreateOrConnectWithoutBookmarkInput
    connect?: userWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type contentUpdateOneRequiredWithoutBookmarkNestedInput = {
    create?: XOR<contentCreateWithoutBookmarkInput, contentUncheckedCreateWithoutBookmarkInput>
    connectOrCreate?: contentCreateOrConnectWithoutBookmarkInput
    upsert?: contentUpsertWithoutBookmarkInput
    connect?: contentWhereUniqueInput
    update?: XOR<XOR<contentUpdateToOneWithWhereWithoutBookmarkInput, contentUpdateWithoutBookmarkInput>, contentUncheckedUpdateWithoutBookmarkInput>
  }

  export type userUpdateOneRequiredWithoutBookmarkNestedInput = {
    create?: XOR<userCreateWithoutBookmarkInput, userUncheckedCreateWithoutBookmarkInput>
    connectOrCreate?: userCreateOrConnectWithoutBookmarkInput
    upsert?: userUpsertWithoutBookmarkInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutBookmarkInput, userUpdateWithoutBookmarkInput>, userUncheckedUpdateWithoutBookmarkInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type contentCreateNestedOneWithoutCommentInput = {
    create?: XOR<contentCreateWithoutCommentInput, contentUncheckedCreateWithoutCommentInput>
    connectOrCreate?: contentCreateOrConnectWithoutCommentInput
    connect?: contentWhereUniqueInput
  }

  export type episodeCreateNestedOneWithoutCommentInput = {
    create?: XOR<episodeCreateWithoutCommentInput, episodeUncheckedCreateWithoutCommentInput>
    connectOrCreate?: episodeCreateOrConnectWithoutCommentInput
    connect?: episodeWhereUniqueInput
  }

  export type userCreateNestedOneWithoutCommentInput = {
    create?: XOR<userCreateWithoutCommentInput, userUncheckedCreateWithoutCommentInput>
    connectOrCreate?: userCreateOrConnectWithoutCommentInput
    connect?: userWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type contentUpdateOneRequiredWithoutCommentNestedInput = {
    create?: XOR<contentCreateWithoutCommentInput, contentUncheckedCreateWithoutCommentInput>
    connectOrCreate?: contentCreateOrConnectWithoutCommentInput
    upsert?: contentUpsertWithoutCommentInput
    connect?: contentWhereUniqueInput
    update?: XOR<XOR<contentUpdateToOneWithWhereWithoutCommentInput, contentUpdateWithoutCommentInput>, contentUncheckedUpdateWithoutCommentInput>
  }

  export type episodeUpdateOneRequiredWithoutCommentNestedInput = {
    create?: XOR<episodeCreateWithoutCommentInput, episodeUncheckedCreateWithoutCommentInput>
    connectOrCreate?: episodeCreateOrConnectWithoutCommentInput
    upsert?: episodeUpsertWithoutCommentInput
    connect?: episodeWhereUniqueInput
    update?: XOR<XOR<episodeUpdateToOneWithWhereWithoutCommentInput, episodeUpdateWithoutCommentInput>, episodeUncheckedUpdateWithoutCommentInput>
  }

  export type userUpdateOneRequiredWithoutCommentNestedInput = {
    create?: XOR<userCreateWithoutCommentInput, userUncheckedCreateWithoutCommentInput>
    connectOrCreate?: userCreateOrConnectWithoutCommentInput
    upsert?: userUpsertWithoutCommentInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutCommentInput, userUpdateWithoutCommentInput>, userUncheckedUpdateWithoutCommentInput>
  }

  export type bookmarkCreateNestedManyWithoutContentInput = {
    create?: XOR<bookmarkCreateWithoutContentInput, bookmarkUncheckedCreateWithoutContentInput> | bookmarkCreateWithoutContentInput[] | bookmarkUncheckedCreateWithoutContentInput[]
    connectOrCreate?: bookmarkCreateOrConnectWithoutContentInput | bookmarkCreateOrConnectWithoutContentInput[]
    createMany?: bookmarkCreateManyContentInputEnvelope
    connect?: bookmarkWhereUniqueInput | bookmarkWhereUniqueInput[]
  }

  export type commentCreateNestedManyWithoutContentInput = {
    create?: XOR<commentCreateWithoutContentInput, commentUncheckedCreateWithoutContentInput> | commentCreateWithoutContentInput[] | commentUncheckedCreateWithoutContentInput[]
    connectOrCreate?: commentCreateOrConnectWithoutContentInput | commentCreateOrConnectWithoutContentInput[]
    createMany?: commentCreateManyContentInputEnvelope
    connect?: commentWhereUniqueInput | commentWhereUniqueInput[]
  }

  export type contentgenreCreateNestedManyWithoutContentInput = {
    create?: XOR<contentgenreCreateWithoutContentInput, contentgenreUncheckedCreateWithoutContentInput> | contentgenreCreateWithoutContentInput[] | contentgenreUncheckedCreateWithoutContentInput[]
    connectOrCreate?: contentgenreCreateOrConnectWithoutContentInput | contentgenreCreateOrConnectWithoutContentInput[]
    createMany?: contentgenreCreateManyContentInputEnvelope
    connect?: contentgenreWhereUniqueInput | contentgenreWhereUniqueInput[]
  }

  export type episodeCreateNestedManyWithoutContentInput = {
    create?: XOR<episodeCreateWithoutContentInput, episodeUncheckedCreateWithoutContentInput> | episodeCreateWithoutContentInput[] | episodeUncheckedCreateWithoutContentInput[]
    connectOrCreate?: episodeCreateOrConnectWithoutContentInput | episodeCreateOrConnectWithoutContentInput[]
    createMany?: episodeCreateManyContentInputEnvelope
    connect?: episodeWhereUniqueInput | episodeWhereUniqueInput[]
  }

  export type ratingCreateNestedManyWithoutContentInput = {
    create?: XOR<ratingCreateWithoutContentInput, ratingUncheckedCreateWithoutContentInput> | ratingCreateWithoutContentInput[] | ratingUncheckedCreateWithoutContentInput[]
    connectOrCreate?: ratingCreateOrConnectWithoutContentInput | ratingCreateOrConnectWithoutContentInput[]
    createMany?: ratingCreateManyContentInputEnvelope
    connect?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
  }

  export type reportcontentCreateNestedManyWithoutContentInput = {
    create?: XOR<reportcontentCreateWithoutContentInput, reportcontentUncheckedCreateWithoutContentInput> | reportcontentCreateWithoutContentInput[] | reportcontentUncheckedCreateWithoutContentInput[]
    connectOrCreate?: reportcontentCreateOrConnectWithoutContentInput | reportcontentCreateOrConnectWithoutContentInput[]
    createMany?: reportcontentCreateManyContentInputEnvelope
    connect?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
  }

  export type seasonCreateNestedManyWithoutContentInput = {
    create?: XOR<seasonCreateWithoutContentInput, seasonUncheckedCreateWithoutContentInput> | seasonCreateWithoutContentInput[] | seasonUncheckedCreateWithoutContentInput[]
    connectOrCreate?: seasonCreateOrConnectWithoutContentInput | seasonCreateOrConnectWithoutContentInput[]
    createMany?: seasonCreateManyContentInputEnvelope
    connect?: seasonWhereUniqueInput | seasonWhereUniqueInput[]
  }

  export type subtitleCreateNestedManyWithoutContentInput = {
    create?: XOR<subtitleCreateWithoutContentInput, subtitleUncheckedCreateWithoutContentInput> | subtitleCreateWithoutContentInput[] | subtitleUncheckedCreateWithoutContentInput[]
    connectOrCreate?: subtitleCreateOrConnectWithoutContentInput | subtitleCreateOrConnectWithoutContentInput[]
    createMany?: subtitleCreateManyContentInputEnvelope
    connect?: subtitleWhereUniqueInput | subtitleWhereUniqueInput[]
  }

  export type trendingcontentCreateNestedManyWithoutContentInput = {
    create?: XOR<trendingcontentCreateWithoutContentInput, trendingcontentUncheckedCreateWithoutContentInput> | trendingcontentCreateWithoutContentInput[] | trendingcontentUncheckedCreateWithoutContentInput[]
    connectOrCreate?: trendingcontentCreateOrConnectWithoutContentInput | trendingcontentCreateOrConnectWithoutContentInput[]
    createMany?: trendingcontentCreateManyContentInputEnvelope
    connect?: trendingcontentWhereUniqueInput | trendingcontentWhereUniqueInput[]
  }

  export type watchhistoryCreateNestedManyWithoutContentInput = {
    create?: XOR<watchhistoryCreateWithoutContentInput, watchhistoryUncheckedCreateWithoutContentInput> | watchhistoryCreateWithoutContentInput[] | watchhistoryUncheckedCreateWithoutContentInput[]
    connectOrCreate?: watchhistoryCreateOrConnectWithoutContentInput | watchhistoryCreateOrConnectWithoutContentInput[]
    createMany?: watchhistoryCreateManyContentInputEnvelope
    connect?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
  }

  export type bookmarkUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<bookmarkCreateWithoutContentInput, bookmarkUncheckedCreateWithoutContentInput> | bookmarkCreateWithoutContentInput[] | bookmarkUncheckedCreateWithoutContentInput[]
    connectOrCreate?: bookmarkCreateOrConnectWithoutContentInput | bookmarkCreateOrConnectWithoutContentInput[]
    createMany?: bookmarkCreateManyContentInputEnvelope
    connect?: bookmarkWhereUniqueInput | bookmarkWhereUniqueInput[]
  }

  export type commentUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<commentCreateWithoutContentInput, commentUncheckedCreateWithoutContentInput> | commentCreateWithoutContentInput[] | commentUncheckedCreateWithoutContentInput[]
    connectOrCreate?: commentCreateOrConnectWithoutContentInput | commentCreateOrConnectWithoutContentInput[]
    createMany?: commentCreateManyContentInputEnvelope
    connect?: commentWhereUniqueInput | commentWhereUniqueInput[]
  }

  export type contentgenreUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<contentgenreCreateWithoutContentInput, contentgenreUncheckedCreateWithoutContentInput> | contentgenreCreateWithoutContentInput[] | contentgenreUncheckedCreateWithoutContentInput[]
    connectOrCreate?: contentgenreCreateOrConnectWithoutContentInput | contentgenreCreateOrConnectWithoutContentInput[]
    createMany?: contentgenreCreateManyContentInputEnvelope
    connect?: contentgenreWhereUniqueInput | contentgenreWhereUniqueInput[]
  }

  export type episodeUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<episodeCreateWithoutContentInput, episodeUncheckedCreateWithoutContentInput> | episodeCreateWithoutContentInput[] | episodeUncheckedCreateWithoutContentInput[]
    connectOrCreate?: episodeCreateOrConnectWithoutContentInput | episodeCreateOrConnectWithoutContentInput[]
    createMany?: episodeCreateManyContentInputEnvelope
    connect?: episodeWhereUniqueInput | episodeWhereUniqueInput[]
  }

  export type ratingUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<ratingCreateWithoutContentInput, ratingUncheckedCreateWithoutContentInput> | ratingCreateWithoutContentInput[] | ratingUncheckedCreateWithoutContentInput[]
    connectOrCreate?: ratingCreateOrConnectWithoutContentInput | ratingCreateOrConnectWithoutContentInput[]
    createMany?: ratingCreateManyContentInputEnvelope
    connect?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
  }

  export type reportcontentUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<reportcontentCreateWithoutContentInput, reportcontentUncheckedCreateWithoutContentInput> | reportcontentCreateWithoutContentInput[] | reportcontentUncheckedCreateWithoutContentInput[]
    connectOrCreate?: reportcontentCreateOrConnectWithoutContentInput | reportcontentCreateOrConnectWithoutContentInput[]
    createMany?: reportcontentCreateManyContentInputEnvelope
    connect?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
  }

  export type seasonUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<seasonCreateWithoutContentInput, seasonUncheckedCreateWithoutContentInput> | seasonCreateWithoutContentInput[] | seasonUncheckedCreateWithoutContentInput[]
    connectOrCreate?: seasonCreateOrConnectWithoutContentInput | seasonCreateOrConnectWithoutContentInput[]
    createMany?: seasonCreateManyContentInputEnvelope
    connect?: seasonWhereUniqueInput | seasonWhereUniqueInput[]
  }

  export type subtitleUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<subtitleCreateWithoutContentInput, subtitleUncheckedCreateWithoutContentInput> | subtitleCreateWithoutContentInput[] | subtitleUncheckedCreateWithoutContentInput[]
    connectOrCreate?: subtitleCreateOrConnectWithoutContentInput | subtitleCreateOrConnectWithoutContentInput[]
    createMany?: subtitleCreateManyContentInputEnvelope
    connect?: subtitleWhereUniqueInput | subtitleWhereUniqueInput[]
  }

  export type trendingcontentUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<trendingcontentCreateWithoutContentInput, trendingcontentUncheckedCreateWithoutContentInput> | trendingcontentCreateWithoutContentInput[] | trendingcontentUncheckedCreateWithoutContentInput[]
    connectOrCreate?: trendingcontentCreateOrConnectWithoutContentInput | trendingcontentCreateOrConnectWithoutContentInput[]
    createMany?: trendingcontentCreateManyContentInputEnvelope
    connect?: trendingcontentWhereUniqueInput | trendingcontentWhereUniqueInput[]
  }

  export type watchhistoryUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<watchhistoryCreateWithoutContentInput, watchhistoryUncheckedCreateWithoutContentInput> | watchhistoryCreateWithoutContentInput[] | watchhistoryUncheckedCreateWithoutContentInput[]
    connectOrCreate?: watchhistoryCreateOrConnectWithoutContentInput | watchhistoryCreateOrConnectWithoutContentInput[]
    createMany?: watchhistoryCreateManyContentInputEnvelope
    connect?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type Enumcontent_typeFieldUpdateOperationsInput = {
    set?: $Enums.content_type
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableEnumcontent_season_nameFieldUpdateOperationsInput = {
    set?: $Enums.content_season_name | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type bookmarkUpdateManyWithoutContentNestedInput = {
    create?: XOR<bookmarkCreateWithoutContentInput, bookmarkUncheckedCreateWithoutContentInput> | bookmarkCreateWithoutContentInput[] | bookmarkUncheckedCreateWithoutContentInput[]
    connectOrCreate?: bookmarkCreateOrConnectWithoutContentInput | bookmarkCreateOrConnectWithoutContentInput[]
    upsert?: bookmarkUpsertWithWhereUniqueWithoutContentInput | bookmarkUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: bookmarkCreateManyContentInputEnvelope
    set?: bookmarkWhereUniqueInput | bookmarkWhereUniqueInput[]
    disconnect?: bookmarkWhereUniqueInput | bookmarkWhereUniqueInput[]
    delete?: bookmarkWhereUniqueInput | bookmarkWhereUniqueInput[]
    connect?: bookmarkWhereUniqueInput | bookmarkWhereUniqueInput[]
    update?: bookmarkUpdateWithWhereUniqueWithoutContentInput | bookmarkUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: bookmarkUpdateManyWithWhereWithoutContentInput | bookmarkUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: bookmarkScalarWhereInput | bookmarkScalarWhereInput[]
  }

  export type commentUpdateManyWithoutContentNestedInput = {
    create?: XOR<commentCreateWithoutContentInput, commentUncheckedCreateWithoutContentInput> | commentCreateWithoutContentInput[] | commentUncheckedCreateWithoutContentInput[]
    connectOrCreate?: commentCreateOrConnectWithoutContentInput | commentCreateOrConnectWithoutContentInput[]
    upsert?: commentUpsertWithWhereUniqueWithoutContentInput | commentUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: commentCreateManyContentInputEnvelope
    set?: commentWhereUniqueInput | commentWhereUniqueInput[]
    disconnect?: commentWhereUniqueInput | commentWhereUniqueInput[]
    delete?: commentWhereUniqueInput | commentWhereUniqueInput[]
    connect?: commentWhereUniqueInput | commentWhereUniqueInput[]
    update?: commentUpdateWithWhereUniqueWithoutContentInput | commentUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: commentUpdateManyWithWhereWithoutContentInput | commentUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: commentScalarWhereInput | commentScalarWhereInput[]
  }

  export type contentgenreUpdateManyWithoutContentNestedInput = {
    create?: XOR<contentgenreCreateWithoutContentInput, contentgenreUncheckedCreateWithoutContentInput> | contentgenreCreateWithoutContentInput[] | contentgenreUncheckedCreateWithoutContentInput[]
    connectOrCreate?: contentgenreCreateOrConnectWithoutContentInput | contentgenreCreateOrConnectWithoutContentInput[]
    upsert?: contentgenreUpsertWithWhereUniqueWithoutContentInput | contentgenreUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: contentgenreCreateManyContentInputEnvelope
    set?: contentgenreWhereUniqueInput | contentgenreWhereUniqueInput[]
    disconnect?: contentgenreWhereUniqueInput | contentgenreWhereUniqueInput[]
    delete?: contentgenreWhereUniqueInput | contentgenreWhereUniqueInput[]
    connect?: contentgenreWhereUniqueInput | contentgenreWhereUniqueInput[]
    update?: contentgenreUpdateWithWhereUniqueWithoutContentInput | contentgenreUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: contentgenreUpdateManyWithWhereWithoutContentInput | contentgenreUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: contentgenreScalarWhereInput | contentgenreScalarWhereInput[]
  }

  export type episodeUpdateManyWithoutContentNestedInput = {
    create?: XOR<episodeCreateWithoutContentInput, episodeUncheckedCreateWithoutContentInput> | episodeCreateWithoutContentInput[] | episodeUncheckedCreateWithoutContentInput[]
    connectOrCreate?: episodeCreateOrConnectWithoutContentInput | episodeCreateOrConnectWithoutContentInput[]
    upsert?: episodeUpsertWithWhereUniqueWithoutContentInput | episodeUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: episodeCreateManyContentInputEnvelope
    set?: episodeWhereUniqueInput | episodeWhereUniqueInput[]
    disconnect?: episodeWhereUniqueInput | episodeWhereUniqueInput[]
    delete?: episodeWhereUniqueInput | episodeWhereUniqueInput[]
    connect?: episodeWhereUniqueInput | episodeWhereUniqueInput[]
    update?: episodeUpdateWithWhereUniqueWithoutContentInput | episodeUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: episodeUpdateManyWithWhereWithoutContentInput | episodeUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: episodeScalarWhereInput | episodeScalarWhereInput[]
  }

  export type ratingUpdateManyWithoutContentNestedInput = {
    create?: XOR<ratingCreateWithoutContentInput, ratingUncheckedCreateWithoutContentInput> | ratingCreateWithoutContentInput[] | ratingUncheckedCreateWithoutContentInput[]
    connectOrCreate?: ratingCreateOrConnectWithoutContentInput | ratingCreateOrConnectWithoutContentInput[]
    upsert?: ratingUpsertWithWhereUniqueWithoutContentInput | ratingUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: ratingCreateManyContentInputEnvelope
    set?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    disconnect?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    delete?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    connect?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    update?: ratingUpdateWithWhereUniqueWithoutContentInput | ratingUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: ratingUpdateManyWithWhereWithoutContentInput | ratingUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: ratingScalarWhereInput | ratingScalarWhereInput[]
  }

  export type reportcontentUpdateManyWithoutContentNestedInput = {
    create?: XOR<reportcontentCreateWithoutContentInput, reportcontentUncheckedCreateWithoutContentInput> | reportcontentCreateWithoutContentInput[] | reportcontentUncheckedCreateWithoutContentInput[]
    connectOrCreate?: reportcontentCreateOrConnectWithoutContentInput | reportcontentCreateOrConnectWithoutContentInput[]
    upsert?: reportcontentUpsertWithWhereUniqueWithoutContentInput | reportcontentUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: reportcontentCreateManyContentInputEnvelope
    set?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
    disconnect?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
    delete?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
    connect?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
    update?: reportcontentUpdateWithWhereUniqueWithoutContentInput | reportcontentUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: reportcontentUpdateManyWithWhereWithoutContentInput | reportcontentUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: reportcontentScalarWhereInput | reportcontentScalarWhereInput[]
  }

  export type seasonUpdateManyWithoutContentNestedInput = {
    create?: XOR<seasonCreateWithoutContentInput, seasonUncheckedCreateWithoutContentInput> | seasonCreateWithoutContentInput[] | seasonUncheckedCreateWithoutContentInput[]
    connectOrCreate?: seasonCreateOrConnectWithoutContentInput | seasonCreateOrConnectWithoutContentInput[]
    upsert?: seasonUpsertWithWhereUniqueWithoutContentInput | seasonUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: seasonCreateManyContentInputEnvelope
    set?: seasonWhereUniqueInput | seasonWhereUniqueInput[]
    disconnect?: seasonWhereUniqueInput | seasonWhereUniqueInput[]
    delete?: seasonWhereUniqueInput | seasonWhereUniqueInput[]
    connect?: seasonWhereUniqueInput | seasonWhereUniqueInput[]
    update?: seasonUpdateWithWhereUniqueWithoutContentInput | seasonUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: seasonUpdateManyWithWhereWithoutContentInput | seasonUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: seasonScalarWhereInput | seasonScalarWhereInput[]
  }

  export type subtitleUpdateManyWithoutContentNestedInput = {
    create?: XOR<subtitleCreateWithoutContentInput, subtitleUncheckedCreateWithoutContentInput> | subtitleCreateWithoutContentInput[] | subtitleUncheckedCreateWithoutContentInput[]
    connectOrCreate?: subtitleCreateOrConnectWithoutContentInput | subtitleCreateOrConnectWithoutContentInput[]
    upsert?: subtitleUpsertWithWhereUniqueWithoutContentInput | subtitleUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: subtitleCreateManyContentInputEnvelope
    set?: subtitleWhereUniqueInput | subtitleWhereUniqueInput[]
    disconnect?: subtitleWhereUniqueInput | subtitleWhereUniqueInput[]
    delete?: subtitleWhereUniqueInput | subtitleWhereUniqueInput[]
    connect?: subtitleWhereUniqueInput | subtitleWhereUniqueInput[]
    update?: subtitleUpdateWithWhereUniqueWithoutContentInput | subtitleUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: subtitleUpdateManyWithWhereWithoutContentInput | subtitleUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: subtitleScalarWhereInput | subtitleScalarWhereInput[]
  }

  export type trendingcontentUpdateManyWithoutContentNestedInput = {
    create?: XOR<trendingcontentCreateWithoutContentInput, trendingcontentUncheckedCreateWithoutContentInput> | trendingcontentCreateWithoutContentInput[] | trendingcontentUncheckedCreateWithoutContentInput[]
    connectOrCreate?: trendingcontentCreateOrConnectWithoutContentInput | trendingcontentCreateOrConnectWithoutContentInput[]
    upsert?: trendingcontentUpsertWithWhereUniqueWithoutContentInput | trendingcontentUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: trendingcontentCreateManyContentInputEnvelope
    set?: trendingcontentWhereUniqueInput | trendingcontentWhereUniqueInput[]
    disconnect?: trendingcontentWhereUniqueInput | trendingcontentWhereUniqueInput[]
    delete?: trendingcontentWhereUniqueInput | trendingcontentWhereUniqueInput[]
    connect?: trendingcontentWhereUniqueInput | trendingcontentWhereUniqueInput[]
    update?: trendingcontentUpdateWithWhereUniqueWithoutContentInput | trendingcontentUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: trendingcontentUpdateManyWithWhereWithoutContentInput | trendingcontentUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: trendingcontentScalarWhereInput | trendingcontentScalarWhereInput[]
  }

  export type watchhistoryUpdateManyWithoutContentNestedInput = {
    create?: XOR<watchhistoryCreateWithoutContentInput, watchhistoryUncheckedCreateWithoutContentInput> | watchhistoryCreateWithoutContentInput[] | watchhistoryUncheckedCreateWithoutContentInput[]
    connectOrCreate?: watchhistoryCreateOrConnectWithoutContentInput | watchhistoryCreateOrConnectWithoutContentInput[]
    upsert?: watchhistoryUpsertWithWhereUniqueWithoutContentInput | watchhistoryUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: watchhistoryCreateManyContentInputEnvelope
    set?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
    disconnect?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
    delete?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
    connect?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
    update?: watchhistoryUpdateWithWhereUniqueWithoutContentInput | watchhistoryUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: watchhistoryUpdateManyWithWhereWithoutContentInput | watchhistoryUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: watchhistoryScalarWhereInput | watchhistoryScalarWhereInput[]
  }

  export type bookmarkUncheckedUpdateManyWithoutContentNestedInput = {
    create?: XOR<bookmarkCreateWithoutContentInput, bookmarkUncheckedCreateWithoutContentInput> | bookmarkCreateWithoutContentInput[] | bookmarkUncheckedCreateWithoutContentInput[]
    connectOrCreate?: bookmarkCreateOrConnectWithoutContentInput | bookmarkCreateOrConnectWithoutContentInput[]
    upsert?: bookmarkUpsertWithWhereUniqueWithoutContentInput | bookmarkUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: bookmarkCreateManyContentInputEnvelope
    set?: bookmarkWhereUniqueInput | bookmarkWhereUniqueInput[]
    disconnect?: bookmarkWhereUniqueInput | bookmarkWhereUniqueInput[]
    delete?: bookmarkWhereUniqueInput | bookmarkWhereUniqueInput[]
    connect?: bookmarkWhereUniqueInput | bookmarkWhereUniqueInput[]
    update?: bookmarkUpdateWithWhereUniqueWithoutContentInput | bookmarkUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: bookmarkUpdateManyWithWhereWithoutContentInput | bookmarkUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: bookmarkScalarWhereInput | bookmarkScalarWhereInput[]
  }

  export type commentUncheckedUpdateManyWithoutContentNestedInput = {
    create?: XOR<commentCreateWithoutContentInput, commentUncheckedCreateWithoutContentInput> | commentCreateWithoutContentInput[] | commentUncheckedCreateWithoutContentInput[]
    connectOrCreate?: commentCreateOrConnectWithoutContentInput | commentCreateOrConnectWithoutContentInput[]
    upsert?: commentUpsertWithWhereUniqueWithoutContentInput | commentUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: commentCreateManyContentInputEnvelope
    set?: commentWhereUniqueInput | commentWhereUniqueInput[]
    disconnect?: commentWhereUniqueInput | commentWhereUniqueInput[]
    delete?: commentWhereUniqueInput | commentWhereUniqueInput[]
    connect?: commentWhereUniqueInput | commentWhereUniqueInput[]
    update?: commentUpdateWithWhereUniqueWithoutContentInput | commentUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: commentUpdateManyWithWhereWithoutContentInput | commentUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: commentScalarWhereInput | commentScalarWhereInput[]
  }

  export type contentgenreUncheckedUpdateManyWithoutContentNestedInput = {
    create?: XOR<contentgenreCreateWithoutContentInput, contentgenreUncheckedCreateWithoutContentInput> | contentgenreCreateWithoutContentInput[] | contentgenreUncheckedCreateWithoutContentInput[]
    connectOrCreate?: contentgenreCreateOrConnectWithoutContentInput | contentgenreCreateOrConnectWithoutContentInput[]
    upsert?: contentgenreUpsertWithWhereUniqueWithoutContentInput | contentgenreUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: contentgenreCreateManyContentInputEnvelope
    set?: contentgenreWhereUniqueInput | contentgenreWhereUniqueInput[]
    disconnect?: contentgenreWhereUniqueInput | contentgenreWhereUniqueInput[]
    delete?: contentgenreWhereUniqueInput | contentgenreWhereUniqueInput[]
    connect?: contentgenreWhereUniqueInput | contentgenreWhereUniqueInput[]
    update?: contentgenreUpdateWithWhereUniqueWithoutContentInput | contentgenreUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: contentgenreUpdateManyWithWhereWithoutContentInput | contentgenreUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: contentgenreScalarWhereInput | contentgenreScalarWhereInput[]
  }

  export type episodeUncheckedUpdateManyWithoutContentNestedInput = {
    create?: XOR<episodeCreateWithoutContentInput, episodeUncheckedCreateWithoutContentInput> | episodeCreateWithoutContentInput[] | episodeUncheckedCreateWithoutContentInput[]
    connectOrCreate?: episodeCreateOrConnectWithoutContentInput | episodeCreateOrConnectWithoutContentInput[]
    upsert?: episodeUpsertWithWhereUniqueWithoutContentInput | episodeUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: episodeCreateManyContentInputEnvelope
    set?: episodeWhereUniqueInput | episodeWhereUniqueInput[]
    disconnect?: episodeWhereUniqueInput | episodeWhereUniqueInput[]
    delete?: episodeWhereUniqueInput | episodeWhereUniqueInput[]
    connect?: episodeWhereUniqueInput | episodeWhereUniqueInput[]
    update?: episodeUpdateWithWhereUniqueWithoutContentInput | episodeUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: episodeUpdateManyWithWhereWithoutContentInput | episodeUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: episodeScalarWhereInput | episodeScalarWhereInput[]
  }

  export type ratingUncheckedUpdateManyWithoutContentNestedInput = {
    create?: XOR<ratingCreateWithoutContentInput, ratingUncheckedCreateWithoutContentInput> | ratingCreateWithoutContentInput[] | ratingUncheckedCreateWithoutContentInput[]
    connectOrCreate?: ratingCreateOrConnectWithoutContentInput | ratingCreateOrConnectWithoutContentInput[]
    upsert?: ratingUpsertWithWhereUniqueWithoutContentInput | ratingUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: ratingCreateManyContentInputEnvelope
    set?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    disconnect?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    delete?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    connect?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    update?: ratingUpdateWithWhereUniqueWithoutContentInput | ratingUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: ratingUpdateManyWithWhereWithoutContentInput | ratingUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: ratingScalarWhereInput | ratingScalarWhereInput[]
  }

  export type reportcontentUncheckedUpdateManyWithoutContentNestedInput = {
    create?: XOR<reportcontentCreateWithoutContentInput, reportcontentUncheckedCreateWithoutContentInput> | reportcontentCreateWithoutContentInput[] | reportcontentUncheckedCreateWithoutContentInput[]
    connectOrCreate?: reportcontentCreateOrConnectWithoutContentInput | reportcontentCreateOrConnectWithoutContentInput[]
    upsert?: reportcontentUpsertWithWhereUniqueWithoutContentInput | reportcontentUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: reportcontentCreateManyContentInputEnvelope
    set?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
    disconnect?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
    delete?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
    connect?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
    update?: reportcontentUpdateWithWhereUniqueWithoutContentInput | reportcontentUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: reportcontentUpdateManyWithWhereWithoutContentInput | reportcontentUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: reportcontentScalarWhereInput | reportcontentScalarWhereInput[]
  }

  export type seasonUncheckedUpdateManyWithoutContentNestedInput = {
    create?: XOR<seasonCreateWithoutContentInput, seasonUncheckedCreateWithoutContentInput> | seasonCreateWithoutContentInput[] | seasonUncheckedCreateWithoutContentInput[]
    connectOrCreate?: seasonCreateOrConnectWithoutContentInput | seasonCreateOrConnectWithoutContentInput[]
    upsert?: seasonUpsertWithWhereUniqueWithoutContentInput | seasonUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: seasonCreateManyContentInputEnvelope
    set?: seasonWhereUniqueInput | seasonWhereUniqueInput[]
    disconnect?: seasonWhereUniqueInput | seasonWhereUniqueInput[]
    delete?: seasonWhereUniqueInput | seasonWhereUniqueInput[]
    connect?: seasonWhereUniqueInput | seasonWhereUniqueInput[]
    update?: seasonUpdateWithWhereUniqueWithoutContentInput | seasonUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: seasonUpdateManyWithWhereWithoutContentInput | seasonUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: seasonScalarWhereInput | seasonScalarWhereInput[]
  }

  export type subtitleUncheckedUpdateManyWithoutContentNestedInput = {
    create?: XOR<subtitleCreateWithoutContentInput, subtitleUncheckedCreateWithoutContentInput> | subtitleCreateWithoutContentInput[] | subtitleUncheckedCreateWithoutContentInput[]
    connectOrCreate?: subtitleCreateOrConnectWithoutContentInput | subtitleCreateOrConnectWithoutContentInput[]
    upsert?: subtitleUpsertWithWhereUniqueWithoutContentInput | subtitleUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: subtitleCreateManyContentInputEnvelope
    set?: subtitleWhereUniqueInput | subtitleWhereUniqueInput[]
    disconnect?: subtitleWhereUniqueInput | subtitleWhereUniqueInput[]
    delete?: subtitleWhereUniqueInput | subtitleWhereUniqueInput[]
    connect?: subtitleWhereUniqueInput | subtitleWhereUniqueInput[]
    update?: subtitleUpdateWithWhereUniqueWithoutContentInput | subtitleUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: subtitleUpdateManyWithWhereWithoutContentInput | subtitleUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: subtitleScalarWhereInput | subtitleScalarWhereInput[]
  }

  export type trendingcontentUncheckedUpdateManyWithoutContentNestedInput = {
    create?: XOR<trendingcontentCreateWithoutContentInput, trendingcontentUncheckedCreateWithoutContentInput> | trendingcontentCreateWithoutContentInput[] | trendingcontentUncheckedCreateWithoutContentInput[]
    connectOrCreate?: trendingcontentCreateOrConnectWithoutContentInput | trendingcontentCreateOrConnectWithoutContentInput[]
    upsert?: trendingcontentUpsertWithWhereUniqueWithoutContentInput | trendingcontentUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: trendingcontentCreateManyContentInputEnvelope
    set?: trendingcontentWhereUniqueInput | trendingcontentWhereUniqueInput[]
    disconnect?: trendingcontentWhereUniqueInput | trendingcontentWhereUniqueInput[]
    delete?: trendingcontentWhereUniqueInput | trendingcontentWhereUniqueInput[]
    connect?: trendingcontentWhereUniqueInput | trendingcontentWhereUniqueInput[]
    update?: trendingcontentUpdateWithWhereUniqueWithoutContentInput | trendingcontentUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: trendingcontentUpdateManyWithWhereWithoutContentInput | trendingcontentUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: trendingcontentScalarWhereInput | trendingcontentScalarWhereInput[]
  }

  export type watchhistoryUncheckedUpdateManyWithoutContentNestedInput = {
    create?: XOR<watchhistoryCreateWithoutContentInput, watchhistoryUncheckedCreateWithoutContentInput> | watchhistoryCreateWithoutContentInput[] | watchhistoryUncheckedCreateWithoutContentInput[]
    connectOrCreate?: watchhistoryCreateOrConnectWithoutContentInput | watchhistoryCreateOrConnectWithoutContentInput[]
    upsert?: watchhistoryUpsertWithWhereUniqueWithoutContentInput | watchhistoryUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: watchhistoryCreateManyContentInputEnvelope
    set?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
    disconnect?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
    delete?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
    connect?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
    update?: watchhistoryUpdateWithWhereUniqueWithoutContentInput | watchhistoryUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: watchhistoryUpdateManyWithWhereWithoutContentInput | watchhistoryUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: watchhistoryScalarWhereInput | watchhistoryScalarWhereInput[]
  }

  export type contentCreateNestedOneWithoutContentgenreInput = {
    create?: XOR<contentCreateWithoutContentgenreInput, contentUncheckedCreateWithoutContentgenreInput>
    connectOrCreate?: contentCreateOrConnectWithoutContentgenreInput
    connect?: contentWhereUniqueInput
  }

  export type genreCreateNestedOneWithoutContentgenreInput = {
    create?: XOR<genreCreateWithoutContentgenreInput, genreUncheckedCreateWithoutContentgenreInput>
    connectOrCreate?: genreCreateOrConnectWithoutContentgenreInput
    connect?: genreWhereUniqueInput
  }

  export type contentUpdateOneRequiredWithoutContentgenreNestedInput = {
    create?: XOR<contentCreateWithoutContentgenreInput, contentUncheckedCreateWithoutContentgenreInput>
    connectOrCreate?: contentCreateOrConnectWithoutContentgenreInput
    upsert?: contentUpsertWithoutContentgenreInput
    connect?: contentWhereUniqueInput
    update?: XOR<XOR<contentUpdateToOneWithWhereWithoutContentgenreInput, contentUpdateWithoutContentgenreInput>, contentUncheckedUpdateWithoutContentgenreInput>
  }

  export type genreUpdateOneRequiredWithoutContentgenreNestedInput = {
    create?: XOR<genreCreateWithoutContentgenreInput, genreUncheckedCreateWithoutContentgenreInput>
    connectOrCreate?: genreCreateOrConnectWithoutContentgenreInput
    upsert?: genreUpsertWithoutContentgenreInput
    connect?: genreWhereUniqueInput
    update?: XOR<XOR<genreUpdateToOneWithWhereWithoutContentgenreInput, genreUpdateWithoutContentgenreInput>, genreUncheckedUpdateWithoutContentgenreInput>
  }

  export type commentCreateNestedManyWithoutEpisodeInput = {
    create?: XOR<commentCreateWithoutEpisodeInput, commentUncheckedCreateWithoutEpisodeInput> | commentCreateWithoutEpisodeInput[] | commentUncheckedCreateWithoutEpisodeInput[]
    connectOrCreate?: commentCreateOrConnectWithoutEpisodeInput | commentCreateOrConnectWithoutEpisodeInput[]
    createMany?: commentCreateManyEpisodeInputEnvelope
    connect?: commentWhereUniqueInput | commentWhereUniqueInput[]
  }

  export type contentCreateNestedOneWithoutEpisodeInput = {
    create?: XOR<contentCreateWithoutEpisodeInput, contentUncheckedCreateWithoutEpisodeInput>
    connectOrCreate?: contentCreateOrConnectWithoutEpisodeInput
    connect?: contentWhereUniqueInput
  }

  export type episodesourceCreateNestedManyWithoutEpisodeInput = {
    create?: XOR<episodesourceCreateWithoutEpisodeInput, episodesourceUncheckedCreateWithoutEpisodeInput> | episodesourceCreateWithoutEpisodeInput[] | episodesourceUncheckedCreateWithoutEpisodeInput[]
    connectOrCreate?: episodesourceCreateOrConnectWithoutEpisodeInput | episodesourceCreateOrConnectWithoutEpisodeInput[]
    createMany?: episodesourceCreateManyEpisodeInputEnvelope
    connect?: episodesourceWhereUniqueInput | episodesourceWhereUniqueInput[]
  }

  export type reportcontentCreateNestedManyWithoutEpisodeInput = {
    create?: XOR<reportcontentCreateWithoutEpisodeInput, reportcontentUncheckedCreateWithoutEpisodeInput> | reportcontentCreateWithoutEpisodeInput[] | reportcontentUncheckedCreateWithoutEpisodeInput[]
    connectOrCreate?: reportcontentCreateOrConnectWithoutEpisodeInput | reportcontentCreateOrConnectWithoutEpisodeInput[]
    createMany?: reportcontentCreateManyEpisodeInputEnvelope
    connect?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
  }

  export type subtitleCreateNestedManyWithoutEpisodeInput = {
    create?: XOR<subtitleCreateWithoutEpisodeInput, subtitleUncheckedCreateWithoutEpisodeInput> | subtitleCreateWithoutEpisodeInput[] | subtitleUncheckedCreateWithoutEpisodeInput[]
    connectOrCreate?: subtitleCreateOrConnectWithoutEpisodeInput | subtitleCreateOrConnectWithoutEpisodeInput[]
    createMany?: subtitleCreateManyEpisodeInputEnvelope
    connect?: subtitleWhereUniqueInput | subtitleWhereUniqueInput[]
  }

  export type watchhistoryCreateNestedManyWithoutEpisodeInput = {
    create?: XOR<watchhistoryCreateWithoutEpisodeInput, watchhistoryUncheckedCreateWithoutEpisodeInput> | watchhistoryCreateWithoutEpisodeInput[] | watchhistoryUncheckedCreateWithoutEpisodeInput[]
    connectOrCreate?: watchhistoryCreateOrConnectWithoutEpisodeInput | watchhistoryCreateOrConnectWithoutEpisodeInput[]
    createMany?: watchhistoryCreateManyEpisodeInputEnvelope
    connect?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
  }

  export type commentUncheckedCreateNestedManyWithoutEpisodeInput = {
    create?: XOR<commentCreateWithoutEpisodeInput, commentUncheckedCreateWithoutEpisodeInput> | commentCreateWithoutEpisodeInput[] | commentUncheckedCreateWithoutEpisodeInput[]
    connectOrCreate?: commentCreateOrConnectWithoutEpisodeInput | commentCreateOrConnectWithoutEpisodeInput[]
    createMany?: commentCreateManyEpisodeInputEnvelope
    connect?: commentWhereUniqueInput | commentWhereUniqueInput[]
  }

  export type episodesourceUncheckedCreateNestedManyWithoutEpisodeInput = {
    create?: XOR<episodesourceCreateWithoutEpisodeInput, episodesourceUncheckedCreateWithoutEpisodeInput> | episodesourceCreateWithoutEpisodeInput[] | episodesourceUncheckedCreateWithoutEpisodeInput[]
    connectOrCreate?: episodesourceCreateOrConnectWithoutEpisodeInput | episodesourceCreateOrConnectWithoutEpisodeInput[]
    createMany?: episodesourceCreateManyEpisodeInputEnvelope
    connect?: episodesourceWhereUniqueInput | episodesourceWhereUniqueInput[]
  }

  export type reportcontentUncheckedCreateNestedManyWithoutEpisodeInput = {
    create?: XOR<reportcontentCreateWithoutEpisodeInput, reportcontentUncheckedCreateWithoutEpisodeInput> | reportcontentCreateWithoutEpisodeInput[] | reportcontentUncheckedCreateWithoutEpisodeInput[]
    connectOrCreate?: reportcontentCreateOrConnectWithoutEpisodeInput | reportcontentCreateOrConnectWithoutEpisodeInput[]
    createMany?: reportcontentCreateManyEpisodeInputEnvelope
    connect?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
  }

  export type subtitleUncheckedCreateNestedManyWithoutEpisodeInput = {
    create?: XOR<subtitleCreateWithoutEpisodeInput, subtitleUncheckedCreateWithoutEpisodeInput> | subtitleCreateWithoutEpisodeInput[] | subtitleUncheckedCreateWithoutEpisodeInput[]
    connectOrCreate?: subtitleCreateOrConnectWithoutEpisodeInput | subtitleCreateOrConnectWithoutEpisodeInput[]
    createMany?: subtitleCreateManyEpisodeInputEnvelope
    connect?: subtitleWhereUniqueInput | subtitleWhereUniqueInput[]
  }

  export type watchhistoryUncheckedCreateNestedManyWithoutEpisodeInput = {
    create?: XOR<watchhistoryCreateWithoutEpisodeInput, watchhistoryUncheckedCreateWithoutEpisodeInput> | watchhistoryCreateWithoutEpisodeInput[] | watchhistoryUncheckedCreateWithoutEpisodeInput[]
    connectOrCreate?: watchhistoryCreateOrConnectWithoutEpisodeInput | watchhistoryCreateOrConnectWithoutEpisodeInput[]
    createMany?: watchhistoryCreateManyEpisodeInputEnvelope
    connect?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
  }

  export type commentUpdateManyWithoutEpisodeNestedInput = {
    create?: XOR<commentCreateWithoutEpisodeInput, commentUncheckedCreateWithoutEpisodeInput> | commentCreateWithoutEpisodeInput[] | commentUncheckedCreateWithoutEpisodeInput[]
    connectOrCreate?: commentCreateOrConnectWithoutEpisodeInput | commentCreateOrConnectWithoutEpisodeInput[]
    upsert?: commentUpsertWithWhereUniqueWithoutEpisodeInput | commentUpsertWithWhereUniqueWithoutEpisodeInput[]
    createMany?: commentCreateManyEpisodeInputEnvelope
    set?: commentWhereUniqueInput | commentWhereUniqueInput[]
    disconnect?: commentWhereUniqueInput | commentWhereUniqueInput[]
    delete?: commentWhereUniqueInput | commentWhereUniqueInput[]
    connect?: commentWhereUniqueInput | commentWhereUniqueInput[]
    update?: commentUpdateWithWhereUniqueWithoutEpisodeInput | commentUpdateWithWhereUniqueWithoutEpisodeInput[]
    updateMany?: commentUpdateManyWithWhereWithoutEpisodeInput | commentUpdateManyWithWhereWithoutEpisodeInput[]
    deleteMany?: commentScalarWhereInput | commentScalarWhereInput[]
  }

  export type contentUpdateOneRequiredWithoutEpisodeNestedInput = {
    create?: XOR<contentCreateWithoutEpisodeInput, contentUncheckedCreateWithoutEpisodeInput>
    connectOrCreate?: contentCreateOrConnectWithoutEpisodeInput
    upsert?: contentUpsertWithoutEpisodeInput
    connect?: contentWhereUniqueInput
    update?: XOR<XOR<contentUpdateToOneWithWhereWithoutEpisodeInput, contentUpdateWithoutEpisodeInput>, contentUncheckedUpdateWithoutEpisodeInput>
  }

  export type episodesourceUpdateManyWithoutEpisodeNestedInput = {
    create?: XOR<episodesourceCreateWithoutEpisodeInput, episodesourceUncheckedCreateWithoutEpisodeInput> | episodesourceCreateWithoutEpisodeInput[] | episodesourceUncheckedCreateWithoutEpisodeInput[]
    connectOrCreate?: episodesourceCreateOrConnectWithoutEpisodeInput | episodesourceCreateOrConnectWithoutEpisodeInput[]
    upsert?: episodesourceUpsertWithWhereUniqueWithoutEpisodeInput | episodesourceUpsertWithWhereUniqueWithoutEpisodeInput[]
    createMany?: episodesourceCreateManyEpisodeInputEnvelope
    set?: episodesourceWhereUniqueInput | episodesourceWhereUniqueInput[]
    disconnect?: episodesourceWhereUniqueInput | episodesourceWhereUniqueInput[]
    delete?: episodesourceWhereUniqueInput | episodesourceWhereUniqueInput[]
    connect?: episodesourceWhereUniqueInput | episodesourceWhereUniqueInput[]
    update?: episodesourceUpdateWithWhereUniqueWithoutEpisodeInput | episodesourceUpdateWithWhereUniqueWithoutEpisodeInput[]
    updateMany?: episodesourceUpdateManyWithWhereWithoutEpisodeInput | episodesourceUpdateManyWithWhereWithoutEpisodeInput[]
    deleteMany?: episodesourceScalarWhereInput | episodesourceScalarWhereInput[]
  }

  export type reportcontentUpdateManyWithoutEpisodeNestedInput = {
    create?: XOR<reportcontentCreateWithoutEpisodeInput, reportcontentUncheckedCreateWithoutEpisodeInput> | reportcontentCreateWithoutEpisodeInput[] | reportcontentUncheckedCreateWithoutEpisodeInput[]
    connectOrCreate?: reportcontentCreateOrConnectWithoutEpisodeInput | reportcontentCreateOrConnectWithoutEpisodeInput[]
    upsert?: reportcontentUpsertWithWhereUniqueWithoutEpisodeInput | reportcontentUpsertWithWhereUniqueWithoutEpisodeInput[]
    createMany?: reportcontentCreateManyEpisodeInputEnvelope
    set?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
    disconnect?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
    delete?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
    connect?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
    update?: reportcontentUpdateWithWhereUniqueWithoutEpisodeInput | reportcontentUpdateWithWhereUniqueWithoutEpisodeInput[]
    updateMany?: reportcontentUpdateManyWithWhereWithoutEpisodeInput | reportcontentUpdateManyWithWhereWithoutEpisodeInput[]
    deleteMany?: reportcontentScalarWhereInput | reportcontentScalarWhereInput[]
  }

  export type subtitleUpdateManyWithoutEpisodeNestedInput = {
    create?: XOR<subtitleCreateWithoutEpisodeInput, subtitleUncheckedCreateWithoutEpisodeInput> | subtitleCreateWithoutEpisodeInput[] | subtitleUncheckedCreateWithoutEpisodeInput[]
    connectOrCreate?: subtitleCreateOrConnectWithoutEpisodeInput | subtitleCreateOrConnectWithoutEpisodeInput[]
    upsert?: subtitleUpsertWithWhereUniqueWithoutEpisodeInput | subtitleUpsertWithWhereUniqueWithoutEpisodeInput[]
    createMany?: subtitleCreateManyEpisodeInputEnvelope
    set?: subtitleWhereUniqueInput | subtitleWhereUniqueInput[]
    disconnect?: subtitleWhereUniqueInput | subtitleWhereUniqueInput[]
    delete?: subtitleWhereUniqueInput | subtitleWhereUniqueInput[]
    connect?: subtitleWhereUniqueInput | subtitleWhereUniqueInput[]
    update?: subtitleUpdateWithWhereUniqueWithoutEpisodeInput | subtitleUpdateWithWhereUniqueWithoutEpisodeInput[]
    updateMany?: subtitleUpdateManyWithWhereWithoutEpisodeInput | subtitleUpdateManyWithWhereWithoutEpisodeInput[]
    deleteMany?: subtitleScalarWhereInput | subtitleScalarWhereInput[]
  }

  export type watchhistoryUpdateManyWithoutEpisodeNestedInput = {
    create?: XOR<watchhistoryCreateWithoutEpisodeInput, watchhistoryUncheckedCreateWithoutEpisodeInput> | watchhistoryCreateWithoutEpisodeInput[] | watchhistoryUncheckedCreateWithoutEpisodeInput[]
    connectOrCreate?: watchhistoryCreateOrConnectWithoutEpisodeInput | watchhistoryCreateOrConnectWithoutEpisodeInput[]
    upsert?: watchhistoryUpsertWithWhereUniqueWithoutEpisodeInput | watchhistoryUpsertWithWhereUniqueWithoutEpisodeInput[]
    createMany?: watchhistoryCreateManyEpisodeInputEnvelope
    set?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
    disconnect?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
    delete?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
    connect?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
    update?: watchhistoryUpdateWithWhereUniqueWithoutEpisodeInput | watchhistoryUpdateWithWhereUniqueWithoutEpisodeInput[]
    updateMany?: watchhistoryUpdateManyWithWhereWithoutEpisodeInput | watchhistoryUpdateManyWithWhereWithoutEpisodeInput[]
    deleteMany?: watchhistoryScalarWhereInput | watchhistoryScalarWhereInput[]
  }

  export type commentUncheckedUpdateManyWithoutEpisodeNestedInput = {
    create?: XOR<commentCreateWithoutEpisodeInput, commentUncheckedCreateWithoutEpisodeInput> | commentCreateWithoutEpisodeInput[] | commentUncheckedCreateWithoutEpisodeInput[]
    connectOrCreate?: commentCreateOrConnectWithoutEpisodeInput | commentCreateOrConnectWithoutEpisodeInput[]
    upsert?: commentUpsertWithWhereUniqueWithoutEpisodeInput | commentUpsertWithWhereUniqueWithoutEpisodeInput[]
    createMany?: commentCreateManyEpisodeInputEnvelope
    set?: commentWhereUniqueInput | commentWhereUniqueInput[]
    disconnect?: commentWhereUniqueInput | commentWhereUniqueInput[]
    delete?: commentWhereUniqueInput | commentWhereUniqueInput[]
    connect?: commentWhereUniqueInput | commentWhereUniqueInput[]
    update?: commentUpdateWithWhereUniqueWithoutEpisodeInput | commentUpdateWithWhereUniqueWithoutEpisodeInput[]
    updateMany?: commentUpdateManyWithWhereWithoutEpisodeInput | commentUpdateManyWithWhereWithoutEpisodeInput[]
    deleteMany?: commentScalarWhereInput | commentScalarWhereInput[]
  }

  export type episodesourceUncheckedUpdateManyWithoutEpisodeNestedInput = {
    create?: XOR<episodesourceCreateWithoutEpisodeInput, episodesourceUncheckedCreateWithoutEpisodeInput> | episodesourceCreateWithoutEpisodeInput[] | episodesourceUncheckedCreateWithoutEpisodeInput[]
    connectOrCreate?: episodesourceCreateOrConnectWithoutEpisodeInput | episodesourceCreateOrConnectWithoutEpisodeInput[]
    upsert?: episodesourceUpsertWithWhereUniqueWithoutEpisodeInput | episodesourceUpsertWithWhereUniqueWithoutEpisodeInput[]
    createMany?: episodesourceCreateManyEpisodeInputEnvelope
    set?: episodesourceWhereUniqueInput | episodesourceWhereUniqueInput[]
    disconnect?: episodesourceWhereUniqueInput | episodesourceWhereUniqueInput[]
    delete?: episodesourceWhereUniqueInput | episodesourceWhereUniqueInput[]
    connect?: episodesourceWhereUniqueInput | episodesourceWhereUniqueInput[]
    update?: episodesourceUpdateWithWhereUniqueWithoutEpisodeInput | episodesourceUpdateWithWhereUniqueWithoutEpisodeInput[]
    updateMany?: episodesourceUpdateManyWithWhereWithoutEpisodeInput | episodesourceUpdateManyWithWhereWithoutEpisodeInput[]
    deleteMany?: episodesourceScalarWhereInput | episodesourceScalarWhereInput[]
  }

  export type reportcontentUncheckedUpdateManyWithoutEpisodeNestedInput = {
    create?: XOR<reportcontentCreateWithoutEpisodeInput, reportcontentUncheckedCreateWithoutEpisodeInput> | reportcontentCreateWithoutEpisodeInput[] | reportcontentUncheckedCreateWithoutEpisodeInput[]
    connectOrCreate?: reportcontentCreateOrConnectWithoutEpisodeInput | reportcontentCreateOrConnectWithoutEpisodeInput[]
    upsert?: reportcontentUpsertWithWhereUniqueWithoutEpisodeInput | reportcontentUpsertWithWhereUniqueWithoutEpisodeInput[]
    createMany?: reportcontentCreateManyEpisodeInputEnvelope
    set?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
    disconnect?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
    delete?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
    connect?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
    update?: reportcontentUpdateWithWhereUniqueWithoutEpisodeInput | reportcontentUpdateWithWhereUniqueWithoutEpisodeInput[]
    updateMany?: reportcontentUpdateManyWithWhereWithoutEpisodeInput | reportcontentUpdateManyWithWhereWithoutEpisodeInput[]
    deleteMany?: reportcontentScalarWhereInput | reportcontentScalarWhereInput[]
  }

  export type subtitleUncheckedUpdateManyWithoutEpisodeNestedInput = {
    create?: XOR<subtitleCreateWithoutEpisodeInput, subtitleUncheckedCreateWithoutEpisodeInput> | subtitleCreateWithoutEpisodeInput[] | subtitleUncheckedCreateWithoutEpisodeInput[]
    connectOrCreate?: subtitleCreateOrConnectWithoutEpisodeInput | subtitleCreateOrConnectWithoutEpisodeInput[]
    upsert?: subtitleUpsertWithWhereUniqueWithoutEpisodeInput | subtitleUpsertWithWhereUniqueWithoutEpisodeInput[]
    createMany?: subtitleCreateManyEpisodeInputEnvelope
    set?: subtitleWhereUniqueInput | subtitleWhereUniqueInput[]
    disconnect?: subtitleWhereUniqueInput | subtitleWhereUniqueInput[]
    delete?: subtitleWhereUniqueInput | subtitleWhereUniqueInput[]
    connect?: subtitleWhereUniqueInput | subtitleWhereUniqueInput[]
    update?: subtitleUpdateWithWhereUniqueWithoutEpisodeInput | subtitleUpdateWithWhereUniqueWithoutEpisodeInput[]
    updateMany?: subtitleUpdateManyWithWhereWithoutEpisodeInput | subtitleUpdateManyWithWhereWithoutEpisodeInput[]
    deleteMany?: subtitleScalarWhereInput | subtitleScalarWhereInput[]
  }

  export type watchhistoryUncheckedUpdateManyWithoutEpisodeNestedInput = {
    create?: XOR<watchhistoryCreateWithoutEpisodeInput, watchhistoryUncheckedCreateWithoutEpisodeInput> | watchhistoryCreateWithoutEpisodeInput[] | watchhistoryUncheckedCreateWithoutEpisodeInput[]
    connectOrCreate?: watchhistoryCreateOrConnectWithoutEpisodeInput | watchhistoryCreateOrConnectWithoutEpisodeInput[]
    upsert?: watchhistoryUpsertWithWhereUniqueWithoutEpisodeInput | watchhistoryUpsertWithWhereUniqueWithoutEpisodeInput[]
    createMany?: watchhistoryCreateManyEpisodeInputEnvelope
    set?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
    disconnect?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
    delete?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
    connect?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
    update?: watchhistoryUpdateWithWhereUniqueWithoutEpisodeInput | watchhistoryUpdateWithWhereUniqueWithoutEpisodeInput[]
    updateMany?: watchhistoryUpdateManyWithWhereWithoutEpisodeInput | watchhistoryUpdateManyWithWhereWithoutEpisodeInput[]
    deleteMany?: watchhistoryScalarWhereInput | watchhistoryScalarWhereInput[]
  }

  export type contentgenreCreateNestedManyWithoutGenreInput = {
    create?: XOR<contentgenreCreateWithoutGenreInput, contentgenreUncheckedCreateWithoutGenreInput> | contentgenreCreateWithoutGenreInput[] | contentgenreUncheckedCreateWithoutGenreInput[]
    connectOrCreate?: contentgenreCreateOrConnectWithoutGenreInput | contentgenreCreateOrConnectWithoutGenreInput[]
    createMany?: contentgenreCreateManyGenreInputEnvelope
    connect?: contentgenreWhereUniqueInput | contentgenreWhereUniqueInput[]
  }

  export type contentgenreUncheckedCreateNestedManyWithoutGenreInput = {
    create?: XOR<contentgenreCreateWithoutGenreInput, contentgenreUncheckedCreateWithoutGenreInput> | contentgenreCreateWithoutGenreInput[] | contentgenreUncheckedCreateWithoutGenreInput[]
    connectOrCreate?: contentgenreCreateOrConnectWithoutGenreInput | contentgenreCreateOrConnectWithoutGenreInput[]
    createMany?: contentgenreCreateManyGenreInputEnvelope
    connect?: contentgenreWhereUniqueInput | contentgenreWhereUniqueInput[]
  }

  export type contentgenreUpdateManyWithoutGenreNestedInput = {
    create?: XOR<contentgenreCreateWithoutGenreInput, contentgenreUncheckedCreateWithoutGenreInput> | contentgenreCreateWithoutGenreInput[] | contentgenreUncheckedCreateWithoutGenreInput[]
    connectOrCreate?: contentgenreCreateOrConnectWithoutGenreInput | contentgenreCreateOrConnectWithoutGenreInput[]
    upsert?: contentgenreUpsertWithWhereUniqueWithoutGenreInput | contentgenreUpsertWithWhereUniqueWithoutGenreInput[]
    createMany?: contentgenreCreateManyGenreInputEnvelope
    set?: contentgenreWhereUniqueInput | contentgenreWhereUniqueInput[]
    disconnect?: contentgenreWhereUniqueInput | contentgenreWhereUniqueInput[]
    delete?: contentgenreWhereUniqueInput | contentgenreWhereUniqueInput[]
    connect?: contentgenreWhereUniqueInput | contentgenreWhereUniqueInput[]
    update?: contentgenreUpdateWithWhereUniqueWithoutGenreInput | contentgenreUpdateWithWhereUniqueWithoutGenreInput[]
    updateMany?: contentgenreUpdateManyWithWhereWithoutGenreInput | contentgenreUpdateManyWithWhereWithoutGenreInput[]
    deleteMany?: contentgenreScalarWhereInput | contentgenreScalarWhereInput[]
  }

  export type contentgenreUncheckedUpdateManyWithoutGenreNestedInput = {
    create?: XOR<contentgenreCreateWithoutGenreInput, contentgenreUncheckedCreateWithoutGenreInput> | contentgenreCreateWithoutGenreInput[] | contentgenreUncheckedCreateWithoutGenreInput[]
    connectOrCreate?: contentgenreCreateOrConnectWithoutGenreInput | contentgenreCreateOrConnectWithoutGenreInput[]
    upsert?: contentgenreUpsertWithWhereUniqueWithoutGenreInput | contentgenreUpsertWithWhereUniqueWithoutGenreInput[]
    createMany?: contentgenreCreateManyGenreInputEnvelope
    set?: contentgenreWhereUniqueInput | contentgenreWhereUniqueInput[]
    disconnect?: contentgenreWhereUniqueInput | contentgenreWhereUniqueInput[]
    delete?: contentgenreWhereUniqueInput | contentgenreWhereUniqueInput[]
    connect?: contentgenreWhereUniqueInput | contentgenreWhereUniqueInput[]
    update?: contentgenreUpdateWithWhereUniqueWithoutGenreInput | contentgenreUpdateWithWhereUniqueWithoutGenreInput[]
    updateMany?: contentgenreUpdateManyWithWhereWithoutGenreInput | contentgenreUpdateManyWithWhereWithoutGenreInput[]
    deleteMany?: contentgenreScalarWhereInput | contentgenreScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutNotificationInput = {
    create?: XOR<userCreateWithoutNotificationInput, userUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: userCreateOrConnectWithoutNotificationInput
    connect?: userWhereUniqueInput
  }

  export type Enumnotification_typeFieldUpdateOperationsInput = {
    set?: $Enums.notification_type
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type userUpdateOneRequiredWithoutNotificationNestedInput = {
    create?: XOR<userCreateWithoutNotificationInput, userUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: userCreateOrConnectWithoutNotificationInput
    upsert?: userUpsertWithoutNotificationInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutNotificationInput, userUpdateWithoutNotificationInput>, userUncheckedUpdateWithoutNotificationInput>
  }

  export type contentCreateNestedOneWithoutRatingInput = {
    create?: XOR<contentCreateWithoutRatingInput, contentUncheckedCreateWithoutRatingInput>
    connectOrCreate?: contentCreateOrConnectWithoutRatingInput
    connect?: contentWhereUniqueInput
  }

  export type userCreateNestedOneWithoutRatingInput = {
    create?: XOR<userCreateWithoutRatingInput, userUncheckedCreateWithoutRatingInput>
    connectOrCreate?: userCreateOrConnectWithoutRatingInput
    connect?: userWhereUniqueInput
  }

  export type contentUpdateOneRequiredWithoutRatingNestedInput = {
    create?: XOR<contentCreateWithoutRatingInput, contentUncheckedCreateWithoutRatingInput>
    connectOrCreate?: contentCreateOrConnectWithoutRatingInput
    upsert?: contentUpsertWithoutRatingInput
    connect?: contentWhereUniqueInput
    update?: XOR<XOR<contentUpdateToOneWithWhereWithoutRatingInput, contentUpdateWithoutRatingInput>, contentUncheckedUpdateWithoutRatingInput>
  }

  export type userUpdateOneRequiredWithoutRatingNestedInput = {
    create?: XOR<userCreateWithoutRatingInput, userUncheckedCreateWithoutRatingInput>
    connectOrCreate?: userCreateOrConnectWithoutRatingInput
    upsert?: userUpsertWithoutRatingInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutRatingInput, userUpdateWithoutRatingInput>, userUncheckedUpdateWithoutRatingInput>
  }

  export type contentCreateNestedOneWithoutReportcontentInput = {
    create?: XOR<contentCreateWithoutReportcontentInput, contentUncheckedCreateWithoutReportcontentInput>
    connectOrCreate?: contentCreateOrConnectWithoutReportcontentInput
    connect?: contentWhereUniqueInput
  }

  export type episodeCreateNestedOneWithoutReportcontentInput = {
    create?: XOR<episodeCreateWithoutReportcontentInput, episodeUncheckedCreateWithoutReportcontentInput>
    connectOrCreate?: episodeCreateOrConnectWithoutReportcontentInput
    connect?: episodeWhereUniqueInput
  }

  export type userCreateNestedOneWithoutReportcontentInput = {
    create?: XOR<userCreateWithoutReportcontentInput, userUncheckedCreateWithoutReportcontentInput>
    connectOrCreate?: userCreateOrConnectWithoutReportcontentInput
    connect?: userWhereUniqueInput
  }

  export type contentUpdateOneRequiredWithoutReportcontentNestedInput = {
    create?: XOR<contentCreateWithoutReportcontentInput, contentUncheckedCreateWithoutReportcontentInput>
    connectOrCreate?: contentCreateOrConnectWithoutReportcontentInput
    upsert?: contentUpsertWithoutReportcontentInput
    connect?: contentWhereUniqueInput
    update?: XOR<XOR<contentUpdateToOneWithWhereWithoutReportcontentInput, contentUpdateWithoutReportcontentInput>, contentUncheckedUpdateWithoutReportcontentInput>
  }

  export type episodeUpdateOneRequiredWithoutReportcontentNestedInput = {
    create?: XOR<episodeCreateWithoutReportcontentInput, episodeUncheckedCreateWithoutReportcontentInput>
    connectOrCreate?: episodeCreateOrConnectWithoutReportcontentInput
    upsert?: episodeUpsertWithoutReportcontentInput
    connect?: episodeWhereUniqueInput
    update?: XOR<XOR<episodeUpdateToOneWithWhereWithoutReportcontentInput, episodeUpdateWithoutReportcontentInput>, episodeUncheckedUpdateWithoutReportcontentInput>
  }

  export type userUpdateOneRequiredWithoutReportcontentNestedInput = {
    create?: XOR<userCreateWithoutReportcontentInput, userUncheckedCreateWithoutReportcontentInput>
    connectOrCreate?: userCreateOrConnectWithoutReportcontentInput
    upsert?: userUpsertWithoutReportcontentInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutReportcontentInput, userUpdateWithoutReportcontentInput>, userUncheckedUpdateWithoutReportcontentInput>
  }

  export type userCreateNestedOneWithoutSearchlogInput = {
    create?: XOR<userCreateWithoutSearchlogInput, userUncheckedCreateWithoutSearchlogInput>
    connectOrCreate?: userCreateOrConnectWithoutSearchlogInput
    connect?: userWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutSearchlogNestedInput = {
    create?: XOR<userCreateWithoutSearchlogInput, userUncheckedCreateWithoutSearchlogInput>
    connectOrCreate?: userCreateOrConnectWithoutSearchlogInput
    upsert?: userUpsertWithoutSearchlogInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutSearchlogInput, userUpdateWithoutSearchlogInput>, userUncheckedUpdateWithoutSearchlogInput>
  }

  export type contentCreateNestedOneWithoutSeasonInput = {
    create?: XOR<contentCreateWithoutSeasonInput, contentUncheckedCreateWithoutSeasonInput>
    connectOrCreate?: contentCreateOrConnectWithoutSeasonInput
    connect?: contentWhereUniqueInput
  }

  export type contentUpdateOneRequiredWithoutSeasonNestedInput = {
    create?: XOR<contentCreateWithoutSeasonInput, contentUncheckedCreateWithoutSeasonInput>
    connectOrCreate?: contentCreateOrConnectWithoutSeasonInput
    upsert?: contentUpsertWithoutSeasonInput
    connect?: contentWhereUniqueInput
    update?: XOR<XOR<contentUpdateToOneWithWhereWithoutSeasonInput, contentUpdateWithoutSeasonInput>, contentUncheckedUpdateWithoutSeasonInput>
  }

  export type contentCreateNestedOneWithoutSubtitleInput = {
    create?: XOR<contentCreateWithoutSubtitleInput, contentUncheckedCreateWithoutSubtitleInput>
    connectOrCreate?: contentCreateOrConnectWithoutSubtitleInput
    connect?: contentWhereUniqueInput
  }

  export type episodeCreateNestedOneWithoutSubtitleInput = {
    create?: XOR<episodeCreateWithoutSubtitleInput, episodeUncheckedCreateWithoutSubtitleInput>
    connectOrCreate?: episodeCreateOrConnectWithoutSubtitleInput
    connect?: episodeWhereUniqueInput
  }

  export type contentUpdateOneRequiredWithoutSubtitleNestedInput = {
    create?: XOR<contentCreateWithoutSubtitleInput, contentUncheckedCreateWithoutSubtitleInput>
    connectOrCreate?: contentCreateOrConnectWithoutSubtitleInput
    upsert?: contentUpsertWithoutSubtitleInput
    connect?: contentWhereUniqueInput
    update?: XOR<XOR<contentUpdateToOneWithWhereWithoutSubtitleInput, contentUpdateWithoutSubtitleInput>, contentUncheckedUpdateWithoutSubtitleInput>
  }

  export type episodeUpdateOneRequiredWithoutSubtitleNestedInput = {
    create?: XOR<episodeCreateWithoutSubtitleInput, episodeUncheckedCreateWithoutSubtitleInput>
    connectOrCreate?: episodeCreateOrConnectWithoutSubtitleInput
    upsert?: episodeUpsertWithoutSubtitleInput
    connect?: episodeWhereUniqueInput
    update?: XOR<XOR<episodeUpdateToOneWithWhereWithoutSubtitleInput, episodeUpdateWithoutSubtitleInput>, episodeUncheckedUpdateWithoutSubtitleInput>
  }

  export type contentCreateNestedOneWithoutTrendingcontentInput = {
    create?: XOR<contentCreateWithoutTrendingcontentInput, contentUncheckedCreateWithoutTrendingcontentInput>
    connectOrCreate?: contentCreateOrConnectWithoutTrendingcontentInput
    connect?: contentWhereUniqueInput
  }

  export type contentUpdateOneRequiredWithoutTrendingcontentNestedInput = {
    create?: XOR<contentCreateWithoutTrendingcontentInput, contentUncheckedCreateWithoutTrendingcontentInput>
    connectOrCreate?: contentCreateOrConnectWithoutTrendingcontentInput
    upsert?: contentUpsertWithoutTrendingcontentInput
    connect?: contentWhereUniqueInput
    update?: XOR<XOR<contentUpdateToOneWithWhereWithoutTrendingcontentInput, contentUpdateWithoutTrendingcontentInput>, contentUncheckedUpdateWithoutTrendingcontentInput>
  }

  export type bookmarkCreateNestedManyWithoutUserInput = {
    create?: XOR<bookmarkCreateWithoutUserInput, bookmarkUncheckedCreateWithoutUserInput> | bookmarkCreateWithoutUserInput[] | bookmarkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: bookmarkCreateOrConnectWithoutUserInput | bookmarkCreateOrConnectWithoutUserInput[]
    createMany?: bookmarkCreateManyUserInputEnvelope
    connect?: bookmarkWhereUniqueInput | bookmarkWhereUniqueInput[]
  }

  export type commentCreateNestedManyWithoutUserInput = {
    create?: XOR<commentCreateWithoutUserInput, commentUncheckedCreateWithoutUserInput> | commentCreateWithoutUserInput[] | commentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: commentCreateOrConnectWithoutUserInput | commentCreateOrConnectWithoutUserInput[]
    createMany?: commentCreateManyUserInputEnvelope
    connect?: commentWhereUniqueInput | commentWhereUniqueInput[]
  }

  export type notificationCreateNestedManyWithoutUserInput = {
    create?: XOR<notificationCreateWithoutUserInput, notificationUncheckedCreateWithoutUserInput> | notificationCreateWithoutUserInput[] | notificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: notificationCreateOrConnectWithoutUserInput | notificationCreateOrConnectWithoutUserInput[]
    createMany?: notificationCreateManyUserInputEnvelope
    connect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
  }

  export type ratingCreateNestedManyWithoutUserInput = {
    create?: XOR<ratingCreateWithoutUserInput, ratingUncheckedCreateWithoutUserInput> | ratingCreateWithoutUserInput[] | ratingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ratingCreateOrConnectWithoutUserInput | ratingCreateOrConnectWithoutUserInput[]
    createMany?: ratingCreateManyUserInputEnvelope
    connect?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
  }

  export type reportcontentCreateNestedManyWithoutUserInput = {
    create?: XOR<reportcontentCreateWithoutUserInput, reportcontentUncheckedCreateWithoutUserInput> | reportcontentCreateWithoutUserInput[] | reportcontentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reportcontentCreateOrConnectWithoutUserInput | reportcontentCreateOrConnectWithoutUserInput[]
    createMany?: reportcontentCreateManyUserInputEnvelope
    connect?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
  }

  export type searchlogCreateNestedManyWithoutUserInput = {
    create?: XOR<searchlogCreateWithoutUserInput, searchlogUncheckedCreateWithoutUserInput> | searchlogCreateWithoutUserInput[] | searchlogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: searchlogCreateOrConnectWithoutUserInput | searchlogCreateOrConnectWithoutUserInput[]
    createMany?: searchlogCreateManyUserInputEnvelope
    connect?: searchlogWhereUniqueInput | searchlogWhereUniqueInput[]
  }

  export type watchhistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<watchhistoryCreateWithoutUserInput, watchhistoryUncheckedCreateWithoutUserInput> | watchhistoryCreateWithoutUserInput[] | watchhistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: watchhistoryCreateOrConnectWithoutUserInput | watchhistoryCreateOrConnectWithoutUserInput[]
    createMany?: watchhistoryCreateManyUserInputEnvelope
    connect?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
  }

  export type bookmarkUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<bookmarkCreateWithoutUserInput, bookmarkUncheckedCreateWithoutUserInput> | bookmarkCreateWithoutUserInput[] | bookmarkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: bookmarkCreateOrConnectWithoutUserInput | bookmarkCreateOrConnectWithoutUserInput[]
    createMany?: bookmarkCreateManyUserInputEnvelope
    connect?: bookmarkWhereUniqueInput | bookmarkWhereUniqueInput[]
  }

  export type commentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<commentCreateWithoutUserInput, commentUncheckedCreateWithoutUserInput> | commentCreateWithoutUserInput[] | commentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: commentCreateOrConnectWithoutUserInput | commentCreateOrConnectWithoutUserInput[]
    createMany?: commentCreateManyUserInputEnvelope
    connect?: commentWhereUniqueInput | commentWhereUniqueInput[]
  }

  export type notificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<notificationCreateWithoutUserInput, notificationUncheckedCreateWithoutUserInput> | notificationCreateWithoutUserInput[] | notificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: notificationCreateOrConnectWithoutUserInput | notificationCreateOrConnectWithoutUserInput[]
    createMany?: notificationCreateManyUserInputEnvelope
    connect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
  }

  export type ratingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ratingCreateWithoutUserInput, ratingUncheckedCreateWithoutUserInput> | ratingCreateWithoutUserInput[] | ratingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ratingCreateOrConnectWithoutUserInput | ratingCreateOrConnectWithoutUserInput[]
    createMany?: ratingCreateManyUserInputEnvelope
    connect?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
  }

  export type reportcontentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<reportcontentCreateWithoutUserInput, reportcontentUncheckedCreateWithoutUserInput> | reportcontentCreateWithoutUserInput[] | reportcontentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reportcontentCreateOrConnectWithoutUserInput | reportcontentCreateOrConnectWithoutUserInput[]
    createMany?: reportcontentCreateManyUserInputEnvelope
    connect?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
  }

  export type searchlogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<searchlogCreateWithoutUserInput, searchlogUncheckedCreateWithoutUserInput> | searchlogCreateWithoutUserInput[] | searchlogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: searchlogCreateOrConnectWithoutUserInput | searchlogCreateOrConnectWithoutUserInput[]
    createMany?: searchlogCreateManyUserInputEnvelope
    connect?: searchlogWhereUniqueInput | searchlogWhereUniqueInput[]
  }

  export type watchhistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<watchhistoryCreateWithoutUserInput, watchhistoryUncheckedCreateWithoutUserInput> | watchhistoryCreateWithoutUserInput[] | watchhistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: watchhistoryCreateOrConnectWithoutUserInput | watchhistoryCreateOrConnectWithoutUserInput[]
    createMany?: watchhistoryCreateManyUserInputEnvelope
    connect?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
  }

  export type Enumuser_roleFieldUpdateOperationsInput = {
    set?: $Enums.user_role
  }

  export type bookmarkUpdateManyWithoutUserNestedInput = {
    create?: XOR<bookmarkCreateWithoutUserInput, bookmarkUncheckedCreateWithoutUserInput> | bookmarkCreateWithoutUserInput[] | bookmarkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: bookmarkCreateOrConnectWithoutUserInput | bookmarkCreateOrConnectWithoutUserInput[]
    upsert?: bookmarkUpsertWithWhereUniqueWithoutUserInput | bookmarkUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: bookmarkCreateManyUserInputEnvelope
    set?: bookmarkWhereUniqueInput | bookmarkWhereUniqueInput[]
    disconnect?: bookmarkWhereUniqueInput | bookmarkWhereUniqueInput[]
    delete?: bookmarkWhereUniqueInput | bookmarkWhereUniqueInput[]
    connect?: bookmarkWhereUniqueInput | bookmarkWhereUniqueInput[]
    update?: bookmarkUpdateWithWhereUniqueWithoutUserInput | bookmarkUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: bookmarkUpdateManyWithWhereWithoutUserInput | bookmarkUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: bookmarkScalarWhereInput | bookmarkScalarWhereInput[]
  }

  export type commentUpdateManyWithoutUserNestedInput = {
    create?: XOR<commentCreateWithoutUserInput, commentUncheckedCreateWithoutUserInput> | commentCreateWithoutUserInput[] | commentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: commentCreateOrConnectWithoutUserInput | commentCreateOrConnectWithoutUserInput[]
    upsert?: commentUpsertWithWhereUniqueWithoutUserInput | commentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: commentCreateManyUserInputEnvelope
    set?: commentWhereUniqueInput | commentWhereUniqueInput[]
    disconnect?: commentWhereUniqueInput | commentWhereUniqueInput[]
    delete?: commentWhereUniqueInput | commentWhereUniqueInput[]
    connect?: commentWhereUniqueInput | commentWhereUniqueInput[]
    update?: commentUpdateWithWhereUniqueWithoutUserInput | commentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: commentUpdateManyWithWhereWithoutUserInput | commentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: commentScalarWhereInput | commentScalarWhereInput[]
  }

  export type notificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<notificationCreateWithoutUserInput, notificationUncheckedCreateWithoutUserInput> | notificationCreateWithoutUserInput[] | notificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: notificationCreateOrConnectWithoutUserInput | notificationCreateOrConnectWithoutUserInput[]
    upsert?: notificationUpsertWithWhereUniqueWithoutUserInput | notificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: notificationCreateManyUserInputEnvelope
    set?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    disconnect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    delete?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    connect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    update?: notificationUpdateWithWhereUniqueWithoutUserInput | notificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: notificationUpdateManyWithWhereWithoutUserInput | notificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: notificationScalarWhereInput | notificationScalarWhereInput[]
  }

  export type ratingUpdateManyWithoutUserNestedInput = {
    create?: XOR<ratingCreateWithoutUserInput, ratingUncheckedCreateWithoutUserInput> | ratingCreateWithoutUserInput[] | ratingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ratingCreateOrConnectWithoutUserInput | ratingCreateOrConnectWithoutUserInput[]
    upsert?: ratingUpsertWithWhereUniqueWithoutUserInput | ratingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ratingCreateManyUserInputEnvelope
    set?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    disconnect?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    delete?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    connect?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    update?: ratingUpdateWithWhereUniqueWithoutUserInput | ratingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ratingUpdateManyWithWhereWithoutUserInput | ratingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ratingScalarWhereInput | ratingScalarWhereInput[]
  }

  export type reportcontentUpdateManyWithoutUserNestedInput = {
    create?: XOR<reportcontentCreateWithoutUserInput, reportcontentUncheckedCreateWithoutUserInput> | reportcontentCreateWithoutUserInput[] | reportcontentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reportcontentCreateOrConnectWithoutUserInput | reportcontentCreateOrConnectWithoutUserInput[]
    upsert?: reportcontentUpsertWithWhereUniqueWithoutUserInput | reportcontentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: reportcontentCreateManyUserInputEnvelope
    set?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
    disconnect?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
    delete?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
    connect?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
    update?: reportcontentUpdateWithWhereUniqueWithoutUserInput | reportcontentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: reportcontentUpdateManyWithWhereWithoutUserInput | reportcontentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: reportcontentScalarWhereInput | reportcontentScalarWhereInput[]
  }

  export type searchlogUpdateManyWithoutUserNestedInput = {
    create?: XOR<searchlogCreateWithoutUserInput, searchlogUncheckedCreateWithoutUserInput> | searchlogCreateWithoutUserInput[] | searchlogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: searchlogCreateOrConnectWithoutUserInput | searchlogCreateOrConnectWithoutUserInput[]
    upsert?: searchlogUpsertWithWhereUniqueWithoutUserInput | searchlogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: searchlogCreateManyUserInputEnvelope
    set?: searchlogWhereUniqueInput | searchlogWhereUniqueInput[]
    disconnect?: searchlogWhereUniqueInput | searchlogWhereUniqueInput[]
    delete?: searchlogWhereUniqueInput | searchlogWhereUniqueInput[]
    connect?: searchlogWhereUniqueInput | searchlogWhereUniqueInput[]
    update?: searchlogUpdateWithWhereUniqueWithoutUserInput | searchlogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: searchlogUpdateManyWithWhereWithoutUserInput | searchlogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: searchlogScalarWhereInput | searchlogScalarWhereInput[]
  }

  export type watchhistoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<watchhistoryCreateWithoutUserInput, watchhistoryUncheckedCreateWithoutUserInput> | watchhistoryCreateWithoutUserInput[] | watchhistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: watchhistoryCreateOrConnectWithoutUserInput | watchhistoryCreateOrConnectWithoutUserInput[]
    upsert?: watchhistoryUpsertWithWhereUniqueWithoutUserInput | watchhistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: watchhistoryCreateManyUserInputEnvelope
    set?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
    disconnect?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
    delete?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
    connect?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
    update?: watchhistoryUpdateWithWhereUniqueWithoutUserInput | watchhistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: watchhistoryUpdateManyWithWhereWithoutUserInput | watchhistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: watchhistoryScalarWhereInput | watchhistoryScalarWhereInput[]
  }

  export type bookmarkUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<bookmarkCreateWithoutUserInput, bookmarkUncheckedCreateWithoutUserInput> | bookmarkCreateWithoutUserInput[] | bookmarkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: bookmarkCreateOrConnectWithoutUserInput | bookmarkCreateOrConnectWithoutUserInput[]
    upsert?: bookmarkUpsertWithWhereUniqueWithoutUserInput | bookmarkUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: bookmarkCreateManyUserInputEnvelope
    set?: bookmarkWhereUniqueInput | bookmarkWhereUniqueInput[]
    disconnect?: bookmarkWhereUniqueInput | bookmarkWhereUniqueInput[]
    delete?: bookmarkWhereUniqueInput | bookmarkWhereUniqueInput[]
    connect?: bookmarkWhereUniqueInput | bookmarkWhereUniqueInput[]
    update?: bookmarkUpdateWithWhereUniqueWithoutUserInput | bookmarkUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: bookmarkUpdateManyWithWhereWithoutUserInput | bookmarkUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: bookmarkScalarWhereInput | bookmarkScalarWhereInput[]
  }

  export type commentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<commentCreateWithoutUserInput, commentUncheckedCreateWithoutUserInput> | commentCreateWithoutUserInput[] | commentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: commentCreateOrConnectWithoutUserInput | commentCreateOrConnectWithoutUserInput[]
    upsert?: commentUpsertWithWhereUniqueWithoutUserInput | commentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: commentCreateManyUserInputEnvelope
    set?: commentWhereUniqueInput | commentWhereUniqueInput[]
    disconnect?: commentWhereUniqueInput | commentWhereUniqueInput[]
    delete?: commentWhereUniqueInput | commentWhereUniqueInput[]
    connect?: commentWhereUniqueInput | commentWhereUniqueInput[]
    update?: commentUpdateWithWhereUniqueWithoutUserInput | commentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: commentUpdateManyWithWhereWithoutUserInput | commentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: commentScalarWhereInput | commentScalarWhereInput[]
  }

  export type notificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<notificationCreateWithoutUserInput, notificationUncheckedCreateWithoutUserInput> | notificationCreateWithoutUserInput[] | notificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: notificationCreateOrConnectWithoutUserInput | notificationCreateOrConnectWithoutUserInput[]
    upsert?: notificationUpsertWithWhereUniqueWithoutUserInput | notificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: notificationCreateManyUserInputEnvelope
    set?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    disconnect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    delete?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    connect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    update?: notificationUpdateWithWhereUniqueWithoutUserInput | notificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: notificationUpdateManyWithWhereWithoutUserInput | notificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: notificationScalarWhereInput | notificationScalarWhereInput[]
  }

  export type ratingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ratingCreateWithoutUserInput, ratingUncheckedCreateWithoutUserInput> | ratingCreateWithoutUserInput[] | ratingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ratingCreateOrConnectWithoutUserInput | ratingCreateOrConnectWithoutUserInput[]
    upsert?: ratingUpsertWithWhereUniqueWithoutUserInput | ratingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ratingCreateManyUserInputEnvelope
    set?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    disconnect?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    delete?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    connect?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    update?: ratingUpdateWithWhereUniqueWithoutUserInput | ratingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ratingUpdateManyWithWhereWithoutUserInput | ratingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ratingScalarWhereInput | ratingScalarWhereInput[]
  }

  export type reportcontentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<reportcontentCreateWithoutUserInput, reportcontentUncheckedCreateWithoutUserInput> | reportcontentCreateWithoutUserInput[] | reportcontentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reportcontentCreateOrConnectWithoutUserInput | reportcontentCreateOrConnectWithoutUserInput[]
    upsert?: reportcontentUpsertWithWhereUniqueWithoutUserInput | reportcontentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: reportcontentCreateManyUserInputEnvelope
    set?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
    disconnect?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
    delete?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
    connect?: reportcontentWhereUniqueInput | reportcontentWhereUniqueInput[]
    update?: reportcontentUpdateWithWhereUniqueWithoutUserInput | reportcontentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: reportcontentUpdateManyWithWhereWithoutUserInput | reportcontentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: reportcontentScalarWhereInput | reportcontentScalarWhereInput[]
  }

  export type searchlogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<searchlogCreateWithoutUserInput, searchlogUncheckedCreateWithoutUserInput> | searchlogCreateWithoutUserInput[] | searchlogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: searchlogCreateOrConnectWithoutUserInput | searchlogCreateOrConnectWithoutUserInput[]
    upsert?: searchlogUpsertWithWhereUniqueWithoutUserInput | searchlogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: searchlogCreateManyUserInputEnvelope
    set?: searchlogWhereUniqueInput | searchlogWhereUniqueInput[]
    disconnect?: searchlogWhereUniqueInput | searchlogWhereUniqueInput[]
    delete?: searchlogWhereUniqueInput | searchlogWhereUniqueInput[]
    connect?: searchlogWhereUniqueInput | searchlogWhereUniqueInput[]
    update?: searchlogUpdateWithWhereUniqueWithoutUserInput | searchlogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: searchlogUpdateManyWithWhereWithoutUserInput | searchlogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: searchlogScalarWhereInput | searchlogScalarWhereInput[]
  }

  export type watchhistoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<watchhistoryCreateWithoutUserInput, watchhistoryUncheckedCreateWithoutUserInput> | watchhistoryCreateWithoutUserInput[] | watchhistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: watchhistoryCreateOrConnectWithoutUserInput | watchhistoryCreateOrConnectWithoutUserInput[]
    upsert?: watchhistoryUpsertWithWhereUniqueWithoutUserInput | watchhistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: watchhistoryCreateManyUserInputEnvelope
    set?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
    disconnect?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
    delete?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
    connect?: watchhistoryWhereUniqueInput | watchhistoryWhereUniqueInput[]
    update?: watchhistoryUpdateWithWhereUniqueWithoutUserInput | watchhistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: watchhistoryUpdateManyWithWhereWithoutUserInput | watchhistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: watchhistoryScalarWhereInput | watchhistoryScalarWhereInput[]
  }

  export type contentCreateNestedOneWithoutWatchhistoryInput = {
    create?: XOR<contentCreateWithoutWatchhistoryInput, contentUncheckedCreateWithoutWatchhistoryInput>
    connectOrCreate?: contentCreateOrConnectWithoutWatchhistoryInput
    connect?: contentWhereUniqueInput
  }

  export type episodeCreateNestedOneWithoutWatchhistoryInput = {
    create?: XOR<episodeCreateWithoutWatchhistoryInput, episodeUncheckedCreateWithoutWatchhistoryInput>
    connectOrCreate?: episodeCreateOrConnectWithoutWatchhistoryInput
    connect?: episodeWhereUniqueInput
  }

  export type userCreateNestedOneWithoutWatchhistoryInput = {
    create?: XOR<userCreateWithoutWatchhistoryInput, userUncheckedCreateWithoutWatchhistoryInput>
    connectOrCreate?: userCreateOrConnectWithoutWatchhistoryInput
    connect?: userWhereUniqueInput
  }

  export type contentUpdateOneRequiredWithoutWatchhistoryNestedInput = {
    create?: XOR<contentCreateWithoutWatchhistoryInput, contentUncheckedCreateWithoutWatchhistoryInput>
    connectOrCreate?: contentCreateOrConnectWithoutWatchhistoryInput
    upsert?: contentUpsertWithoutWatchhistoryInput
    connect?: contentWhereUniqueInput
    update?: XOR<XOR<contentUpdateToOneWithWhereWithoutWatchhistoryInput, contentUpdateWithoutWatchhistoryInput>, contentUncheckedUpdateWithoutWatchhistoryInput>
  }

  export type episodeUpdateOneRequiredWithoutWatchhistoryNestedInput = {
    create?: XOR<episodeCreateWithoutWatchhistoryInput, episodeUncheckedCreateWithoutWatchhistoryInput>
    connectOrCreate?: episodeCreateOrConnectWithoutWatchhistoryInput
    upsert?: episodeUpsertWithoutWatchhistoryInput
    connect?: episodeWhereUniqueInput
    update?: XOR<XOR<episodeUpdateToOneWithWhereWithoutWatchhistoryInput, episodeUpdateWithoutWatchhistoryInput>, episodeUncheckedUpdateWithoutWatchhistoryInput>
  }

  export type userUpdateOneRequiredWithoutWatchhistoryNestedInput = {
    create?: XOR<userCreateWithoutWatchhistoryInput, userUncheckedCreateWithoutWatchhistoryInput>
    connectOrCreate?: userCreateOrConnectWithoutWatchhistoryInput
    upsert?: userUpsertWithoutWatchhistoryInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutWatchhistoryInput, userUpdateWithoutWatchhistoryInput>, userUncheckedUpdateWithoutWatchhistoryInput>
  }

  export type episodeCreateNestedOneWithoutEpisodesourceInput = {
    create?: XOR<episodeCreateWithoutEpisodesourceInput, episodeUncheckedCreateWithoutEpisodesourceInput>
    connectOrCreate?: episodeCreateOrConnectWithoutEpisodesourceInput
    connect?: episodeWhereUniqueInput
  }

  export type episodesourcequalityCreateNestedManyWithoutEpisodesourceInput = {
    create?: XOR<episodesourcequalityCreateWithoutEpisodesourceInput, episodesourcequalityUncheckedCreateWithoutEpisodesourceInput> | episodesourcequalityCreateWithoutEpisodesourceInput[] | episodesourcequalityUncheckedCreateWithoutEpisodesourceInput[]
    connectOrCreate?: episodesourcequalityCreateOrConnectWithoutEpisodesourceInput | episodesourcequalityCreateOrConnectWithoutEpisodesourceInput[]
    createMany?: episodesourcequalityCreateManyEpisodesourceInputEnvelope
    connect?: episodesourcequalityWhereUniqueInput | episodesourcequalityWhereUniqueInput[]
  }

  export type episodesourcequalityUncheckedCreateNestedManyWithoutEpisodesourceInput = {
    create?: XOR<episodesourcequalityCreateWithoutEpisodesourceInput, episodesourcequalityUncheckedCreateWithoutEpisodesourceInput> | episodesourcequalityCreateWithoutEpisodesourceInput[] | episodesourcequalityUncheckedCreateWithoutEpisodesourceInput[]
    connectOrCreate?: episodesourcequalityCreateOrConnectWithoutEpisodesourceInput | episodesourcequalityCreateOrConnectWithoutEpisodesourceInput[]
    createMany?: episodesourcequalityCreateManyEpisodesourceInputEnvelope
    connect?: episodesourcequalityWhereUniqueInput | episodesourcequalityWhereUniqueInput[]
  }

  export type episodeUpdateOneRequiredWithoutEpisodesourceNestedInput = {
    create?: XOR<episodeCreateWithoutEpisodesourceInput, episodeUncheckedCreateWithoutEpisodesourceInput>
    connectOrCreate?: episodeCreateOrConnectWithoutEpisodesourceInput
    upsert?: episodeUpsertWithoutEpisodesourceInput
    connect?: episodeWhereUniqueInput
    update?: XOR<XOR<episodeUpdateToOneWithWhereWithoutEpisodesourceInput, episodeUpdateWithoutEpisodesourceInput>, episodeUncheckedUpdateWithoutEpisodesourceInput>
  }

  export type episodesourcequalityUpdateManyWithoutEpisodesourceNestedInput = {
    create?: XOR<episodesourcequalityCreateWithoutEpisodesourceInput, episodesourcequalityUncheckedCreateWithoutEpisodesourceInput> | episodesourcequalityCreateWithoutEpisodesourceInput[] | episodesourcequalityUncheckedCreateWithoutEpisodesourceInput[]
    connectOrCreate?: episodesourcequalityCreateOrConnectWithoutEpisodesourceInput | episodesourcequalityCreateOrConnectWithoutEpisodesourceInput[]
    upsert?: episodesourcequalityUpsertWithWhereUniqueWithoutEpisodesourceInput | episodesourcequalityUpsertWithWhereUniqueWithoutEpisodesourceInput[]
    createMany?: episodesourcequalityCreateManyEpisodesourceInputEnvelope
    set?: episodesourcequalityWhereUniqueInput | episodesourcequalityWhereUniqueInput[]
    disconnect?: episodesourcequalityWhereUniqueInput | episodesourcequalityWhereUniqueInput[]
    delete?: episodesourcequalityWhereUniqueInput | episodesourcequalityWhereUniqueInput[]
    connect?: episodesourcequalityWhereUniqueInput | episodesourcequalityWhereUniqueInput[]
    update?: episodesourcequalityUpdateWithWhereUniqueWithoutEpisodesourceInput | episodesourcequalityUpdateWithWhereUniqueWithoutEpisodesourceInput[]
    updateMany?: episodesourcequalityUpdateManyWithWhereWithoutEpisodesourceInput | episodesourcequalityUpdateManyWithWhereWithoutEpisodesourceInput[]
    deleteMany?: episodesourcequalityScalarWhereInput | episodesourcequalityScalarWhereInput[]
  }

  export type episodesourcequalityUncheckedUpdateManyWithoutEpisodesourceNestedInput = {
    create?: XOR<episodesourcequalityCreateWithoutEpisodesourceInput, episodesourcequalityUncheckedCreateWithoutEpisodesourceInput> | episodesourcequalityCreateWithoutEpisodesourceInput[] | episodesourcequalityUncheckedCreateWithoutEpisodesourceInput[]
    connectOrCreate?: episodesourcequalityCreateOrConnectWithoutEpisodesourceInput | episodesourcequalityCreateOrConnectWithoutEpisodesourceInput[]
    upsert?: episodesourcequalityUpsertWithWhereUniqueWithoutEpisodesourceInput | episodesourcequalityUpsertWithWhereUniqueWithoutEpisodesourceInput[]
    createMany?: episodesourcequalityCreateManyEpisodesourceInputEnvelope
    set?: episodesourcequalityWhereUniqueInput | episodesourcequalityWhereUniqueInput[]
    disconnect?: episodesourcequalityWhereUniqueInput | episodesourcequalityWhereUniqueInput[]
    delete?: episodesourcequalityWhereUniqueInput | episodesourcequalityWhereUniqueInput[]
    connect?: episodesourcequalityWhereUniqueInput | episodesourcequalityWhereUniqueInput[]
    update?: episodesourcequalityUpdateWithWhereUniqueWithoutEpisodesourceInput | episodesourcequalityUpdateWithWhereUniqueWithoutEpisodesourceInput[]
    updateMany?: episodesourcequalityUpdateManyWithWhereWithoutEpisodesourceInput | episodesourcequalityUpdateManyWithWhereWithoutEpisodesourceInput[]
    deleteMany?: episodesourcequalityScalarWhereInput | episodesourcequalityScalarWhereInput[]
  }

  export type episodesourceCreateNestedOneWithoutQualitiesInput = {
    create?: XOR<episodesourceCreateWithoutQualitiesInput, episodesourceUncheckedCreateWithoutQualitiesInput>
    connectOrCreate?: episodesourceCreateOrConnectWithoutQualitiesInput
    connect?: episodesourceWhereUniqueInput
  }

  export type episodesourceUpdateOneRequiredWithoutQualitiesNestedInput = {
    create?: XOR<episodesourceCreateWithoutQualitiesInput, episodesourceUncheckedCreateWithoutQualitiesInput>
    connectOrCreate?: episodesourceCreateOrConnectWithoutQualitiesInput
    upsert?: episodesourceUpsertWithoutQualitiesInput
    connect?: episodesourceWhereUniqueInput
    update?: XOR<XOR<episodesourceUpdateToOneWithWhereWithoutQualitiesInput, episodesourceUpdateWithoutQualitiesInput>, episodesourceUncheckedUpdateWithoutQualitiesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumcontent_typeFilter<$PrismaModel = never> = {
    equals?: $Enums.content_type | Enumcontent_typeFieldRefInput<$PrismaModel>
    in?: $Enums.content_type[]
    notIn?: $Enums.content_type[]
    not?: NestedEnumcontent_typeFilter<$PrismaModel> | $Enums.content_type
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumcontent_season_nameNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.content_season_name | Enumcontent_season_nameFieldRefInput<$PrismaModel> | null
    in?: $Enums.content_season_name[] | null
    notIn?: $Enums.content_season_name[] | null
    not?: NestedEnumcontent_season_nameNullableFilter<$PrismaModel> | $Enums.content_season_name | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumcontent_typeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.content_type | Enumcontent_typeFieldRefInput<$PrismaModel>
    in?: $Enums.content_type[]
    notIn?: $Enums.content_type[]
    not?: NestedEnumcontent_typeWithAggregatesFilter<$PrismaModel> | $Enums.content_type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumcontent_typeFilter<$PrismaModel>
    _max?: NestedEnumcontent_typeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedEnumcontent_season_nameNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.content_season_name | Enumcontent_season_nameFieldRefInput<$PrismaModel> | null
    in?: $Enums.content_season_name[] | null
    notIn?: $Enums.content_season_name[] | null
    not?: NestedEnumcontent_season_nameNullableWithAggregatesFilter<$PrismaModel> | $Enums.content_season_name | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumcontent_season_nameNullableFilter<$PrismaModel>
    _max?: NestedEnumcontent_season_nameNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumnotification_typeFilter<$PrismaModel = never> = {
    equals?: $Enums.notification_type | Enumnotification_typeFieldRefInput<$PrismaModel>
    in?: $Enums.notification_type[]
    notIn?: $Enums.notification_type[]
    not?: NestedEnumnotification_typeFilter<$PrismaModel> | $Enums.notification_type
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumnotification_typeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.notification_type | Enumnotification_typeFieldRefInput<$PrismaModel>
    in?: $Enums.notification_type[]
    notIn?: $Enums.notification_type[]
    not?: NestedEnumnotification_typeWithAggregatesFilter<$PrismaModel> | $Enums.notification_type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumnotification_typeFilter<$PrismaModel>
    _max?: NestedEnumnotification_typeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumuser_roleFilter<$PrismaModel = never> = {
    equals?: $Enums.user_role | Enumuser_roleFieldRefInput<$PrismaModel>
    in?: $Enums.user_role[]
    notIn?: $Enums.user_role[]
    not?: NestedEnumuser_roleFilter<$PrismaModel> | $Enums.user_role
  }

  export type NestedEnumuser_roleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.user_role | Enumuser_roleFieldRefInput<$PrismaModel>
    in?: $Enums.user_role[]
    notIn?: $Enums.user_role[]
    not?: NestedEnumuser_roleWithAggregatesFilter<$PrismaModel> | $Enums.user_role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuser_roleFilter<$PrismaModel>
    _max?: NestedEnumuser_roleFilter<$PrismaModel>
  }

  export type contentCreateWithoutBookmarkInput = {
    title: string
    slug: string
    title_english?: string | null
    title_japanese?: string | null
    description?: string | null
    type: $Enums.content_type
    release_year?: number | null
    season_name?: $Enums.content_season_name | null
    studios?: string | null
    actor?: string | null
    score?: number | null
    thumbnail_url?: string | null
    backdrop_url?: string | null
    video_url?: string | null
    created_at?: Date | string
    duration_minutes?: number | null
    num_seasons?: number | null
    num_episodes?: number | null
    comment?: commentCreateNestedManyWithoutContentInput
    contentgenre?: contentgenreCreateNestedManyWithoutContentInput
    episode?: episodeCreateNestedManyWithoutContentInput
    rating?: ratingCreateNestedManyWithoutContentInput
    reportcontent?: reportcontentCreateNestedManyWithoutContentInput
    season?: seasonCreateNestedManyWithoutContentInput
    subtitle?: subtitleCreateNestedManyWithoutContentInput
    trendingcontent?: trendingcontentCreateNestedManyWithoutContentInput
    watchhistory?: watchhistoryCreateNestedManyWithoutContentInput
  }

  export type contentUncheckedCreateWithoutBookmarkInput = {
    id?: number
    title: string
    slug: string
    title_english?: string | null
    title_japanese?: string | null
    description?: string | null
    type: $Enums.content_type
    release_year?: number | null
    season_name?: $Enums.content_season_name | null
    studios?: string | null
    actor?: string | null
    score?: number | null
    thumbnail_url?: string | null
    backdrop_url?: string | null
    video_url?: string | null
    created_at?: Date | string
    duration_minutes?: number | null
    num_seasons?: number | null
    num_episodes?: number | null
    comment?: commentUncheckedCreateNestedManyWithoutContentInput
    contentgenre?: contentgenreUncheckedCreateNestedManyWithoutContentInput
    episode?: episodeUncheckedCreateNestedManyWithoutContentInput
    rating?: ratingUncheckedCreateNestedManyWithoutContentInput
    reportcontent?: reportcontentUncheckedCreateNestedManyWithoutContentInput
    season?: seasonUncheckedCreateNestedManyWithoutContentInput
    subtitle?: subtitleUncheckedCreateNestedManyWithoutContentInput
    trendingcontent?: trendingcontentUncheckedCreateNestedManyWithoutContentInput
    watchhistory?: watchhistoryUncheckedCreateNestedManyWithoutContentInput
  }

  export type contentCreateOrConnectWithoutBookmarkInput = {
    where: contentWhereUniqueInput
    create: XOR<contentCreateWithoutBookmarkInput, contentUncheckedCreateWithoutBookmarkInput>
  }

  export type userCreateWithoutBookmarkInput = {
    email: string
    password: string
    role?: $Enums.user_role
    created_at?: Date | string
    comment?: commentCreateNestedManyWithoutUserInput
    notification?: notificationCreateNestedManyWithoutUserInput
    rating?: ratingCreateNestedManyWithoutUserInput
    reportcontent?: reportcontentCreateNestedManyWithoutUserInput
    searchlog?: searchlogCreateNestedManyWithoutUserInput
    watchhistory?: watchhistoryCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutBookmarkInput = {
    id?: number
    email: string
    password: string
    role?: $Enums.user_role
    created_at?: Date | string
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
    notification?: notificationUncheckedCreateNestedManyWithoutUserInput
    rating?: ratingUncheckedCreateNestedManyWithoutUserInput
    reportcontent?: reportcontentUncheckedCreateNestedManyWithoutUserInput
    searchlog?: searchlogUncheckedCreateNestedManyWithoutUserInput
    watchhistory?: watchhistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutBookmarkInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutBookmarkInput, userUncheckedCreateWithoutBookmarkInput>
  }

  export type contentUpsertWithoutBookmarkInput = {
    update: XOR<contentUpdateWithoutBookmarkInput, contentUncheckedUpdateWithoutBookmarkInput>
    create: XOR<contentCreateWithoutBookmarkInput, contentUncheckedCreateWithoutBookmarkInput>
    where?: contentWhereInput
  }

  export type contentUpdateToOneWithWhereWithoutBookmarkInput = {
    where?: contentWhereInput
    data: XOR<contentUpdateWithoutBookmarkInput, contentUncheckedUpdateWithoutBookmarkInput>
  }

  export type contentUpdateWithoutBookmarkInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title_english?: NullableStringFieldUpdateOperationsInput | string | null
    title_japanese?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enumcontent_typeFieldUpdateOperationsInput | $Enums.content_type
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    season_name?: NullableEnumcontent_season_nameFieldUpdateOperationsInput | $Enums.content_season_name | null
    studios?: NullableStringFieldUpdateOperationsInput | string | null
    actor?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    backdrop_url?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration_minutes?: NullableIntFieldUpdateOperationsInput | number | null
    num_seasons?: NullableIntFieldUpdateOperationsInput | number | null
    num_episodes?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: commentUpdateManyWithoutContentNestedInput
    contentgenre?: contentgenreUpdateManyWithoutContentNestedInput
    episode?: episodeUpdateManyWithoutContentNestedInput
    rating?: ratingUpdateManyWithoutContentNestedInput
    reportcontent?: reportcontentUpdateManyWithoutContentNestedInput
    season?: seasonUpdateManyWithoutContentNestedInput
    subtitle?: subtitleUpdateManyWithoutContentNestedInput
    trendingcontent?: trendingcontentUpdateManyWithoutContentNestedInput
    watchhistory?: watchhistoryUpdateManyWithoutContentNestedInput
  }

  export type contentUncheckedUpdateWithoutBookmarkInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title_english?: NullableStringFieldUpdateOperationsInput | string | null
    title_japanese?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enumcontent_typeFieldUpdateOperationsInput | $Enums.content_type
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    season_name?: NullableEnumcontent_season_nameFieldUpdateOperationsInput | $Enums.content_season_name | null
    studios?: NullableStringFieldUpdateOperationsInput | string | null
    actor?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    backdrop_url?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration_minutes?: NullableIntFieldUpdateOperationsInput | number | null
    num_seasons?: NullableIntFieldUpdateOperationsInput | number | null
    num_episodes?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: commentUncheckedUpdateManyWithoutContentNestedInput
    contentgenre?: contentgenreUncheckedUpdateManyWithoutContentNestedInput
    episode?: episodeUncheckedUpdateManyWithoutContentNestedInput
    rating?: ratingUncheckedUpdateManyWithoutContentNestedInput
    reportcontent?: reportcontentUncheckedUpdateManyWithoutContentNestedInput
    season?: seasonUncheckedUpdateManyWithoutContentNestedInput
    subtitle?: subtitleUncheckedUpdateManyWithoutContentNestedInput
    trendingcontent?: trendingcontentUncheckedUpdateManyWithoutContentNestedInput
    watchhistory?: watchhistoryUncheckedUpdateManyWithoutContentNestedInput
  }

  export type userUpsertWithoutBookmarkInput = {
    update: XOR<userUpdateWithoutBookmarkInput, userUncheckedUpdateWithoutBookmarkInput>
    create: XOR<userCreateWithoutBookmarkInput, userUncheckedCreateWithoutBookmarkInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutBookmarkInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutBookmarkInput, userUncheckedUpdateWithoutBookmarkInput>
  }

  export type userUpdateWithoutBookmarkInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | $Enums.user_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: commentUpdateManyWithoutUserNestedInput
    notification?: notificationUpdateManyWithoutUserNestedInput
    rating?: ratingUpdateManyWithoutUserNestedInput
    reportcontent?: reportcontentUpdateManyWithoutUserNestedInput
    searchlog?: searchlogUpdateManyWithoutUserNestedInput
    watchhistory?: watchhistoryUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutBookmarkInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | $Enums.user_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
    notification?: notificationUncheckedUpdateManyWithoutUserNestedInput
    rating?: ratingUncheckedUpdateManyWithoutUserNestedInput
    reportcontent?: reportcontentUncheckedUpdateManyWithoutUserNestedInput
    searchlog?: searchlogUncheckedUpdateManyWithoutUserNestedInput
    watchhistory?: watchhistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type contentCreateWithoutCommentInput = {
    title: string
    slug: string
    title_english?: string | null
    title_japanese?: string | null
    description?: string | null
    type: $Enums.content_type
    release_year?: number | null
    season_name?: $Enums.content_season_name | null
    studios?: string | null
    actor?: string | null
    score?: number | null
    thumbnail_url?: string | null
    backdrop_url?: string | null
    video_url?: string | null
    created_at?: Date | string
    duration_minutes?: number | null
    num_seasons?: number | null
    num_episodes?: number | null
    bookmark?: bookmarkCreateNestedManyWithoutContentInput
    contentgenre?: contentgenreCreateNestedManyWithoutContentInput
    episode?: episodeCreateNestedManyWithoutContentInput
    rating?: ratingCreateNestedManyWithoutContentInput
    reportcontent?: reportcontentCreateNestedManyWithoutContentInput
    season?: seasonCreateNestedManyWithoutContentInput
    subtitle?: subtitleCreateNestedManyWithoutContentInput
    trendingcontent?: trendingcontentCreateNestedManyWithoutContentInput
    watchhistory?: watchhistoryCreateNestedManyWithoutContentInput
  }

  export type contentUncheckedCreateWithoutCommentInput = {
    id?: number
    title: string
    slug: string
    title_english?: string | null
    title_japanese?: string | null
    description?: string | null
    type: $Enums.content_type
    release_year?: number | null
    season_name?: $Enums.content_season_name | null
    studios?: string | null
    actor?: string | null
    score?: number | null
    thumbnail_url?: string | null
    backdrop_url?: string | null
    video_url?: string | null
    created_at?: Date | string
    duration_minutes?: number | null
    num_seasons?: number | null
    num_episodes?: number | null
    bookmark?: bookmarkUncheckedCreateNestedManyWithoutContentInput
    contentgenre?: contentgenreUncheckedCreateNestedManyWithoutContentInput
    episode?: episodeUncheckedCreateNestedManyWithoutContentInput
    rating?: ratingUncheckedCreateNestedManyWithoutContentInput
    reportcontent?: reportcontentUncheckedCreateNestedManyWithoutContentInput
    season?: seasonUncheckedCreateNestedManyWithoutContentInput
    subtitle?: subtitleUncheckedCreateNestedManyWithoutContentInput
    trendingcontent?: trendingcontentUncheckedCreateNestedManyWithoutContentInput
    watchhistory?: watchhistoryUncheckedCreateNestedManyWithoutContentInput
  }

  export type contentCreateOrConnectWithoutCommentInput = {
    where: contentWhereUniqueInput
    create: XOR<contentCreateWithoutCommentInput, contentUncheckedCreateWithoutCommentInput>
  }

  export type episodeCreateWithoutCommentInput = {
    season: number
    episode_number: number
    title?: string | null
    created_at?: Date | string
    content: contentCreateNestedOneWithoutEpisodeInput
    episodesource?: episodesourceCreateNestedManyWithoutEpisodeInput
    reportcontent?: reportcontentCreateNestedManyWithoutEpisodeInput
    subtitle?: subtitleCreateNestedManyWithoutEpisodeInput
    watchhistory?: watchhistoryCreateNestedManyWithoutEpisodeInput
  }

  export type episodeUncheckedCreateWithoutCommentInput = {
    id?: number
    content_id: number
    season: number
    episode_number: number
    title?: string | null
    created_at?: Date | string
    episodesource?: episodesourceUncheckedCreateNestedManyWithoutEpisodeInput
    reportcontent?: reportcontentUncheckedCreateNestedManyWithoutEpisodeInput
    subtitle?: subtitleUncheckedCreateNestedManyWithoutEpisodeInput
    watchhistory?: watchhistoryUncheckedCreateNestedManyWithoutEpisodeInput
  }

  export type episodeCreateOrConnectWithoutCommentInput = {
    where: episodeWhereUniqueInput
    create: XOR<episodeCreateWithoutCommentInput, episodeUncheckedCreateWithoutCommentInput>
  }

  export type userCreateWithoutCommentInput = {
    email: string
    password: string
    role?: $Enums.user_role
    created_at?: Date | string
    bookmark?: bookmarkCreateNestedManyWithoutUserInput
    notification?: notificationCreateNestedManyWithoutUserInput
    rating?: ratingCreateNestedManyWithoutUserInput
    reportcontent?: reportcontentCreateNestedManyWithoutUserInput
    searchlog?: searchlogCreateNestedManyWithoutUserInput
    watchhistory?: watchhistoryCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutCommentInput = {
    id?: number
    email: string
    password: string
    role?: $Enums.user_role
    created_at?: Date | string
    bookmark?: bookmarkUncheckedCreateNestedManyWithoutUserInput
    notification?: notificationUncheckedCreateNestedManyWithoutUserInput
    rating?: ratingUncheckedCreateNestedManyWithoutUserInput
    reportcontent?: reportcontentUncheckedCreateNestedManyWithoutUserInput
    searchlog?: searchlogUncheckedCreateNestedManyWithoutUserInput
    watchhistory?: watchhistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutCommentInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutCommentInput, userUncheckedCreateWithoutCommentInput>
  }

  export type contentUpsertWithoutCommentInput = {
    update: XOR<contentUpdateWithoutCommentInput, contentUncheckedUpdateWithoutCommentInput>
    create: XOR<contentCreateWithoutCommentInput, contentUncheckedCreateWithoutCommentInput>
    where?: contentWhereInput
  }

  export type contentUpdateToOneWithWhereWithoutCommentInput = {
    where?: contentWhereInput
    data: XOR<contentUpdateWithoutCommentInput, contentUncheckedUpdateWithoutCommentInput>
  }

  export type contentUpdateWithoutCommentInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title_english?: NullableStringFieldUpdateOperationsInput | string | null
    title_japanese?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enumcontent_typeFieldUpdateOperationsInput | $Enums.content_type
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    season_name?: NullableEnumcontent_season_nameFieldUpdateOperationsInput | $Enums.content_season_name | null
    studios?: NullableStringFieldUpdateOperationsInput | string | null
    actor?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    backdrop_url?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration_minutes?: NullableIntFieldUpdateOperationsInput | number | null
    num_seasons?: NullableIntFieldUpdateOperationsInput | number | null
    num_episodes?: NullableIntFieldUpdateOperationsInput | number | null
    bookmark?: bookmarkUpdateManyWithoutContentNestedInput
    contentgenre?: contentgenreUpdateManyWithoutContentNestedInput
    episode?: episodeUpdateManyWithoutContentNestedInput
    rating?: ratingUpdateManyWithoutContentNestedInput
    reportcontent?: reportcontentUpdateManyWithoutContentNestedInput
    season?: seasonUpdateManyWithoutContentNestedInput
    subtitle?: subtitleUpdateManyWithoutContentNestedInput
    trendingcontent?: trendingcontentUpdateManyWithoutContentNestedInput
    watchhistory?: watchhistoryUpdateManyWithoutContentNestedInput
  }

  export type contentUncheckedUpdateWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title_english?: NullableStringFieldUpdateOperationsInput | string | null
    title_japanese?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enumcontent_typeFieldUpdateOperationsInput | $Enums.content_type
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    season_name?: NullableEnumcontent_season_nameFieldUpdateOperationsInput | $Enums.content_season_name | null
    studios?: NullableStringFieldUpdateOperationsInput | string | null
    actor?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    backdrop_url?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration_minutes?: NullableIntFieldUpdateOperationsInput | number | null
    num_seasons?: NullableIntFieldUpdateOperationsInput | number | null
    num_episodes?: NullableIntFieldUpdateOperationsInput | number | null
    bookmark?: bookmarkUncheckedUpdateManyWithoutContentNestedInput
    contentgenre?: contentgenreUncheckedUpdateManyWithoutContentNestedInput
    episode?: episodeUncheckedUpdateManyWithoutContentNestedInput
    rating?: ratingUncheckedUpdateManyWithoutContentNestedInput
    reportcontent?: reportcontentUncheckedUpdateManyWithoutContentNestedInput
    season?: seasonUncheckedUpdateManyWithoutContentNestedInput
    subtitle?: subtitleUncheckedUpdateManyWithoutContentNestedInput
    trendingcontent?: trendingcontentUncheckedUpdateManyWithoutContentNestedInput
    watchhistory?: watchhistoryUncheckedUpdateManyWithoutContentNestedInput
  }

  export type episodeUpsertWithoutCommentInput = {
    update: XOR<episodeUpdateWithoutCommentInput, episodeUncheckedUpdateWithoutCommentInput>
    create: XOR<episodeCreateWithoutCommentInput, episodeUncheckedCreateWithoutCommentInput>
    where?: episodeWhereInput
  }

  export type episodeUpdateToOneWithWhereWithoutCommentInput = {
    where?: episodeWhereInput
    data: XOR<episodeUpdateWithoutCommentInput, episodeUncheckedUpdateWithoutCommentInput>
  }

  export type episodeUpdateWithoutCommentInput = {
    season?: IntFieldUpdateOperationsInput | number
    episode_number?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: contentUpdateOneRequiredWithoutEpisodeNestedInput
    episodesource?: episodesourceUpdateManyWithoutEpisodeNestedInput
    reportcontent?: reportcontentUpdateManyWithoutEpisodeNestedInput
    subtitle?: subtitleUpdateManyWithoutEpisodeNestedInput
    watchhistory?: watchhistoryUpdateManyWithoutEpisodeNestedInput
  }

  export type episodeUncheckedUpdateWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    season?: IntFieldUpdateOperationsInput | number
    episode_number?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    episodesource?: episodesourceUncheckedUpdateManyWithoutEpisodeNestedInput
    reportcontent?: reportcontentUncheckedUpdateManyWithoutEpisodeNestedInput
    subtitle?: subtitleUncheckedUpdateManyWithoutEpisodeNestedInput
    watchhistory?: watchhistoryUncheckedUpdateManyWithoutEpisodeNestedInput
  }

  export type userUpsertWithoutCommentInput = {
    update: XOR<userUpdateWithoutCommentInput, userUncheckedUpdateWithoutCommentInput>
    create: XOR<userCreateWithoutCommentInput, userUncheckedCreateWithoutCommentInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutCommentInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutCommentInput, userUncheckedUpdateWithoutCommentInput>
  }

  export type userUpdateWithoutCommentInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | $Enums.user_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    bookmark?: bookmarkUpdateManyWithoutUserNestedInput
    notification?: notificationUpdateManyWithoutUserNestedInput
    rating?: ratingUpdateManyWithoutUserNestedInput
    reportcontent?: reportcontentUpdateManyWithoutUserNestedInput
    searchlog?: searchlogUpdateManyWithoutUserNestedInput
    watchhistory?: watchhistoryUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | $Enums.user_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    bookmark?: bookmarkUncheckedUpdateManyWithoutUserNestedInput
    notification?: notificationUncheckedUpdateManyWithoutUserNestedInput
    rating?: ratingUncheckedUpdateManyWithoutUserNestedInput
    reportcontent?: reportcontentUncheckedUpdateManyWithoutUserNestedInput
    searchlog?: searchlogUncheckedUpdateManyWithoutUserNestedInput
    watchhistory?: watchhistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type bookmarkCreateWithoutContentInput = {
    created_at?: Date | string
    user: userCreateNestedOneWithoutBookmarkInput
  }

  export type bookmarkUncheckedCreateWithoutContentInput = {
    id?: number
    user_id: number
    created_at?: Date | string
  }

  export type bookmarkCreateOrConnectWithoutContentInput = {
    where: bookmarkWhereUniqueInput
    create: XOR<bookmarkCreateWithoutContentInput, bookmarkUncheckedCreateWithoutContentInput>
  }

  export type bookmarkCreateManyContentInputEnvelope = {
    data: bookmarkCreateManyContentInput | bookmarkCreateManyContentInput[]
    skipDuplicates?: boolean
  }

  export type commentCreateWithoutContentInput = {
    comment: string
    created_at?: Date | string
    episode: episodeCreateNestedOneWithoutCommentInput
    user: userCreateNestedOneWithoutCommentInput
  }

  export type commentUncheckedCreateWithoutContentInput = {
    id?: number
    user_id: number
    episode_id: number
    comment: string
    created_at?: Date | string
  }

  export type commentCreateOrConnectWithoutContentInput = {
    where: commentWhereUniqueInput
    create: XOR<commentCreateWithoutContentInput, commentUncheckedCreateWithoutContentInput>
  }

  export type commentCreateManyContentInputEnvelope = {
    data: commentCreateManyContentInput | commentCreateManyContentInput[]
    skipDuplicates?: boolean
  }

  export type contentgenreCreateWithoutContentInput = {
    genre: genreCreateNestedOneWithoutContentgenreInput
  }

  export type contentgenreUncheckedCreateWithoutContentInput = {
    genre_id: number
  }

  export type contentgenreCreateOrConnectWithoutContentInput = {
    where: contentgenreWhereUniqueInput
    create: XOR<contentgenreCreateWithoutContentInput, contentgenreUncheckedCreateWithoutContentInput>
  }

  export type contentgenreCreateManyContentInputEnvelope = {
    data: contentgenreCreateManyContentInput | contentgenreCreateManyContentInput[]
    skipDuplicates?: boolean
  }

  export type episodeCreateWithoutContentInput = {
    season: number
    episode_number: number
    title?: string | null
    created_at?: Date | string
    comment?: commentCreateNestedManyWithoutEpisodeInput
    episodesource?: episodesourceCreateNestedManyWithoutEpisodeInput
    reportcontent?: reportcontentCreateNestedManyWithoutEpisodeInput
    subtitle?: subtitleCreateNestedManyWithoutEpisodeInput
    watchhistory?: watchhistoryCreateNestedManyWithoutEpisodeInput
  }

  export type episodeUncheckedCreateWithoutContentInput = {
    id?: number
    season: number
    episode_number: number
    title?: string | null
    created_at?: Date | string
    comment?: commentUncheckedCreateNestedManyWithoutEpisodeInput
    episodesource?: episodesourceUncheckedCreateNestedManyWithoutEpisodeInput
    reportcontent?: reportcontentUncheckedCreateNestedManyWithoutEpisodeInput
    subtitle?: subtitleUncheckedCreateNestedManyWithoutEpisodeInput
    watchhistory?: watchhistoryUncheckedCreateNestedManyWithoutEpisodeInput
  }

  export type episodeCreateOrConnectWithoutContentInput = {
    where: episodeWhereUniqueInput
    create: XOR<episodeCreateWithoutContentInput, episodeUncheckedCreateWithoutContentInput>
  }

  export type episodeCreateManyContentInputEnvelope = {
    data: episodeCreateManyContentInput | episodeCreateManyContentInput[]
    skipDuplicates?: boolean
  }

  export type ratingCreateWithoutContentInput = {
    rating: number
    comment?: string | null
    created_at?: Date | string
    user: userCreateNestedOneWithoutRatingInput
  }

  export type ratingUncheckedCreateWithoutContentInput = {
    id?: number
    user_id: number
    rating: number
    comment?: string | null
    created_at?: Date | string
  }

  export type ratingCreateOrConnectWithoutContentInput = {
    where: ratingWhereUniqueInput
    create: XOR<ratingCreateWithoutContentInput, ratingUncheckedCreateWithoutContentInput>
  }

  export type ratingCreateManyContentInputEnvelope = {
    data: ratingCreateManyContentInput | ratingCreateManyContentInput[]
    skipDuplicates?: boolean
  }

  export type reportcontentCreateWithoutContentInput = {
    reason: string
    created_at?: Date | string
    episode: episodeCreateNestedOneWithoutReportcontentInput
    user: userCreateNestedOneWithoutReportcontentInput
  }

  export type reportcontentUncheckedCreateWithoutContentInput = {
    id?: number
    user_id: number
    episode_id: number
    reason: string
    created_at?: Date | string
  }

  export type reportcontentCreateOrConnectWithoutContentInput = {
    where: reportcontentWhereUniqueInput
    create: XOR<reportcontentCreateWithoutContentInput, reportcontentUncheckedCreateWithoutContentInput>
  }

  export type reportcontentCreateManyContentInputEnvelope = {
    data: reportcontentCreateManyContentInput | reportcontentCreateManyContentInput[]
    skipDuplicates?: boolean
  }

  export type seasonCreateWithoutContentInput = {
    season_number: number
    title: string
    description?: string | null
    thumbnail_url?: string | null
    created_at?: Date | string
  }

  export type seasonUncheckedCreateWithoutContentInput = {
    id?: number
    season_number: number
    title: string
    description?: string | null
    thumbnail_url?: string | null
    created_at?: Date | string
  }

  export type seasonCreateOrConnectWithoutContentInput = {
    where: seasonWhereUniqueInput
    create: XOR<seasonCreateWithoutContentInput, seasonUncheckedCreateWithoutContentInput>
  }

  export type seasonCreateManyContentInputEnvelope = {
    data: seasonCreateManyContentInput | seasonCreateManyContentInput[]
    skipDuplicates?: boolean
  }

  export type subtitleCreateWithoutContentInput = {
    language: string
    file_url: string
    created_at?: Date | string
    episode: episodeCreateNestedOneWithoutSubtitleInput
  }

  export type subtitleUncheckedCreateWithoutContentInput = {
    id?: number
    episode_id: number
    language: string
    file_url: string
    created_at?: Date | string
  }

  export type subtitleCreateOrConnectWithoutContentInput = {
    where: subtitleWhereUniqueInput
    create: XOR<subtitleCreateWithoutContentInput, subtitleUncheckedCreateWithoutContentInput>
  }

  export type subtitleCreateManyContentInputEnvelope = {
    data: subtitleCreateManyContentInput | subtitleCreateManyContentInput[]
    skipDuplicates?: boolean
  }

  export type trendingcontentCreateWithoutContentInput = {
    week_start: Date | string
    view_count: number
    created_at?: Date | string
  }

  export type trendingcontentUncheckedCreateWithoutContentInput = {
    id?: number
    week_start: Date | string
    view_count: number
    created_at?: Date | string
  }

  export type trendingcontentCreateOrConnectWithoutContentInput = {
    where: trendingcontentWhereUniqueInput
    create: XOR<trendingcontentCreateWithoutContentInput, trendingcontentUncheckedCreateWithoutContentInput>
  }

  export type trendingcontentCreateManyContentInputEnvelope = {
    data: trendingcontentCreateManyContentInput | trendingcontentCreateManyContentInput[]
    skipDuplicates?: boolean
  }

  export type watchhistoryCreateWithoutContentInput = {
    last_watch_seconds: number
    updated_at?: Date | string
    episode: episodeCreateNestedOneWithoutWatchhistoryInput
    user: userCreateNestedOneWithoutWatchhistoryInput
  }

  export type watchhistoryUncheckedCreateWithoutContentInput = {
    id?: number
    user_id: number
    episode_id: number
    last_watch_seconds: number
    updated_at?: Date | string
  }

  export type watchhistoryCreateOrConnectWithoutContentInput = {
    where: watchhistoryWhereUniqueInput
    create: XOR<watchhistoryCreateWithoutContentInput, watchhistoryUncheckedCreateWithoutContentInput>
  }

  export type watchhistoryCreateManyContentInputEnvelope = {
    data: watchhistoryCreateManyContentInput | watchhistoryCreateManyContentInput[]
    skipDuplicates?: boolean
  }

  export type bookmarkUpsertWithWhereUniqueWithoutContentInput = {
    where: bookmarkWhereUniqueInput
    update: XOR<bookmarkUpdateWithoutContentInput, bookmarkUncheckedUpdateWithoutContentInput>
    create: XOR<bookmarkCreateWithoutContentInput, bookmarkUncheckedCreateWithoutContentInput>
  }

  export type bookmarkUpdateWithWhereUniqueWithoutContentInput = {
    where: bookmarkWhereUniqueInput
    data: XOR<bookmarkUpdateWithoutContentInput, bookmarkUncheckedUpdateWithoutContentInput>
  }

  export type bookmarkUpdateManyWithWhereWithoutContentInput = {
    where: bookmarkScalarWhereInput
    data: XOR<bookmarkUpdateManyMutationInput, bookmarkUncheckedUpdateManyWithoutContentInput>
  }

  export type bookmarkScalarWhereInput = {
    AND?: bookmarkScalarWhereInput | bookmarkScalarWhereInput[]
    OR?: bookmarkScalarWhereInput[]
    NOT?: bookmarkScalarWhereInput | bookmarkScalarWhereInput[]
    id?: IntFilter<"bookmark"> | number
    user_id?: IntFilter<"bookmark"> | number
    content_id?: IntFilter<"bookmark"> | number
    created_at?: DateTimeFilter<"bookmark"> | Date | string
  }

  export type commentUpsertWithWhereUniqueWithoutContentInput = {
    where: commentWhereUniqueInput
    update: XOR<commentUpdateWithoutContentInput, commentUncheckedUpdateWithoutContentInput>
    create: XOR<commentCreateWithoutContentInput, commentUncheckedCreateWithoutContentInput>
  }

  export type commentUpdateWithWhereUniqueWithoutContentInput = {
    where: commentWhereUniqueInput
    data: XOR<commentUpdateWithoutContentInput, commentUncheckedUpdateWithoutContentInput>
  }

  export type commentUpdateManyWithWhereWithoutContentInput = {
    where: commentScalarWhereInput
    data: XOR<commentUpdateManyMutationInput, commentUncheckedUpdateManyWithoutContentInput>
  }

  export type commentScalarWhereInput = {
    AND?: commentScalarWhereInput | commentScalarWhereInput[]
    OR?: commentScalarWhereInput[]
    NOT?: commentScalarWhereInput | commentScalarWhereInput[]
    id?: IntFilter<"comment"> | number
    user_id?: IntFilter<"comment"> | number
    content_id?: IntFilter<"comment"> | number
    episode_id?: IntFilter<"comment"> | number
    comment?: StringFilter<"comment"> | string
    created_at?: DateTimeFilter<"comment"> | Date | string
  }

  export type contentgenreUpsertWithWhereUniqueWithoutContentInput = {
    where: contentgenreWhereUniqueInput
    update: XOR<contentgenreUpdateWithoutContentInput, contentgenreUncheckedUpdateWithoutContentInput>
    create: XOR<contentgenreCreateWithoutContentInput, contentgenreUncheckedCreateWithoutContentInput>
  }

  export type contentgenreUpdateWithWhereUniqueWithoutContentInput = {
    where: contentgenreWhereUniqueInput
    data: XOR<contentgenreUpdateWithoutContentInput, contentgenreUncheckedUpdateWithoutContentInput>
  }

  export type contentgenreUpdateManyWithWhereWithoutContentInput = {
    where: contentgenreScalarWhereInput
    data: XOR<contentgenreUpdateManyMutationInput, contentgenreUncheckedUpdateManyWithoutContentInput>
  }

  export type contentgenreScalarWhereInput = {
    AND?: contentgenreScalarWhereInput | contentgenreScalarWhereInput[]
    OR?: contentgenreScalarWhereInput[]
    NOT?: contentgenreScalarWhereInput | contentgenreScalarWhereInput[]
    content_id?: IntFilter<"contentgenre"> | number
    genre_id?: IntFilter<"contentgenre"> | number
  }

  export type episodeUpsertWithWhereUniqueWithoutContentInput = {
    where: episodeWhereUniqueInput
    update: XOR<episodeUpdateWithoutContentInput, episodeUncheckedUpdateWithoutContentInput>
    create: XOR<episodeCreateWithoutContentInput, episodeUncheckedCreateWithoutContentInput>
  }

  export type episodeUpdateWithWhereUniqueWithoutContentInput = {
    where: episodeWhereUniqueInput
    data: XOR<episodeUpdateWithoutContentInput, episodeUncheckedUpdateWithoutContentInput>
  }

  export type episodeUpdateManyWithWhereWithoutContentInput = {
    where: episodeScalarWhereInput
    data: XOR<episodeUpdateManyMutationInput, episodeUncheckedUpdateManyWithoutContentInput>
  }

  export type episodeScalarWhereInput = {
    AND?: episodeScalarWhereInput | episodeScalarWhereInput[]
    OR?: episodeScalarWhereInput[]
    NOT?: episodeScalarWhereInput | episodeScalarWhereInput[]
    id?: IntFilter<"episode"> | number
    content_id?: IntFilter<"episode"> | number
    season?: IntFilter<"episode"> | number
    episode_number?: IntFilter<"episode"> | number
    title?: StringNullableFilter<"episode"> | string | null
    created_at?: DateTimeFilter<"episode"> | Date | string
  }

  export type ratingUpsertWithWhereUniqueWithoutContentInput = {
    where: ratingWhereUniqueInput
    update: XOR<ratingUpdateWithoutContentInput, ratingUncheckedUpdateWithoutContentInput>
    create: XOR<ratingCreateWithoutContentInput, ratingUncheckedCreateWithoutContentInput>
  }

  export type ratingUpdateWithWhereUniqueWithoutContentInput = {
    where: ratingWhereUniqueInput
    data: XOR<ratingUpdateWithoutContentInput, ratingUncheckedUpdateWithoutContentInput>
  }

  export type ratingUpdateManyWithWhereWithoutContentInput = {
    where: ratingScalarWhereInput
    data: XOR<ratingUpdateManyMutationInput, ratingUncheckedUpdateManyWithoutContentInput>
  }

  export type ratingScalarWhereInput = {
    AND?: ratingScalarWhereInput | ratingScalarWhereInput[]
    OR?: ratingScalarWhereInput[]
    NOT?: ratingScalarWhereInput | ratingScalarWhereInput[]
    id?: IntFilter<"rating"> | number
    user_id?: IntFilter<"rating"> | number
    content_id?: IntFilter<"rating"> | number
    rating?: IntFilter<"rating"> | number
    comment?: StringNullableFilter<"rating"> | string | null
    created_at?: DateTimeFilter<"rating"> | Date | string
  }

  export type reportcontentUpsertWithWhereUniqueWithoutContentInput = {
    where: reportcontentWhereUniqueInput
    update: XOR<reportcontentUpdateWithoutContentInput, reportcontentUncheckedUpdateWithoutContentInput>
    create: XOR<reportcontentCreateWithoutContentInput, reportcontentUncheckedCreateWithoutContentInput>
  }

  export type reportcontentUpdateWithWhereUniqueWithoutContentInput = {
    where: reportcontentWhereUniqueInput
    data: XOR<reportcontentUpdateWithoutContentInput, reportcontentUncheckedUpdateWithoutContentInput>
  }

  export type reportcontentUpdateManyWithWhereWithoutContentInput = {
    where: reportcontentScalarWhereInput
    data: XOR<reportcontentUpdateManyMutationInput, reportcontentUncheckedUpdateManyWithoutContentInput>
  }

  export type reportcontentScalarWhereInput = {
    AND?: reportcontentScalarWhereInput | reportcontentScalarWhereInput[]
    OR?: reportcontentScalarWhereInput[]
    NOT?: reportcontentScalarWhereInput | reportcontentScalarWhereInput[]
    id?: IntFilter<"reportcontent"> | number
    user_id?: IntFilter<"reportcontent"> | number
    content_id?: IntFilter<"reportcontent"> | number
    episode_id?: IntFilter<"reportcontent"> | number
    reason?: StringFilter<"reportcontent"> | string
    created_at?: DateTimeFilter<"reportcontent"> | Date | string
  }

  export type seasonUpsertWithWhereUniqueWithoutContentInput = {
    where: seasonWhereUniqueInput
    update: XOR<seasonUpdateWithoutContentInput, seasonUncheckedUpdateWithoutContentInput>
    create: XOR<seasonCreateWithoutContentInput, seasonUncheckedCreateWithoutContentInput>
  }

  export type seasonUpdateWithWhereUniqueWithoutContentInput = {
    where: seasonWhereUniqueInput
    data: XOR<seasonUpdateWithoutContentInput, seasonUncheckedUpdateWithoutContentInput>
  }

  export type seasonUpdateManyWithWhereWithoutContentInput = {
    where: seasonScalarWhereInput
    data: XOR<seasonUpdateManyMutationInput, seasonUncheckedUpdateManyWithoutContentInput>
  }

  export type seasonScalarWhereInput = {
    AND?: seasonScalarWhereInput | seasonScalarWhereInput[]
    OR?: seasonScalarWhereInput[]
    NOT?: seasonScalarWhereInput | seasonScalarWhereInput[]
    id?: IntFilter<"season"> | number
    content_id?: IntFilter<"season"> | number
    season_number?: IntFilter<"season"> | number
    title?: StringFilter<"season"> | string
    description?: StringNullableFilter<"season"> | string | null
    thumbnail_url?: StringNullableFilter<"season"> | string | null
    created_at?: DateTimeFilter<"season"> | Date | string
  }

  export type subtitleUpsertWithWhereUniqueWithoutContentInput = {
    where: subtitleWhereUniqueInput
    update: XOR<subtitleUpdateWithoutContentInput, subtitleUncheckedUpdateWithoutContentInput>
    create: XOR<subtitleCreateWithoutContentInput, subtitleUncheckedCreateWithoutContentInput>
  }

  export type subtitleUpdateWithWhereUniqueWithoutContentInput = {
    where: subtitleWhereUniqueInput
    data: XOR<subtitleUpdateWithoutContentInput, subtitleUncheckedUpdateWithoutContentInput>
  }

  export type subtitleUpdateManyWithWhereWithoutContentInput = {
    where: subtitleScalarWhereInput
    data: XOR<subtitleUpdateManyMutationInput, subtitleUncheckedUpdateManyWithoutContentInput>
  }

  export type subtitleScalarWhereInput = {
    AND?: subtitleScalarWhereInput | subtitleScalarWhereInput[]
    OR?: subtitleScalarWhereInput[]
    NOT?: subtitleScalarWhereInput | subtitleScalarWhereInput[]
    id?: IntFilter<"subtitle"> | number
    content_id?: IntFilter<"subtitle"> | number
    episode_id?: IntFilter<"subtitle"> | number
    language?: StringFilter<"subtitle"> | string
    file_url?: StringFilter<"subtitle"> | string
    created_at?: DateTimeFilter<"subtitle"> | Date | string
  }

  export type trendingcontentUpsertWithWhereUniqueWithoutContentInput = {
    where: trendingcontentWhereUniqueInput
    update: XOR<trendingcontentUpdateWithoutContentInput, trendingcontentUncheckedUpdateWithoutContentInput>
    create: XOR<trendingcontentCreateWithoutContentInput, trendingcontentUncheckedCreateWithoutContentInput>
  }

  export type trendingcontentUpdateWithWhereUniqueWithoutContentInput = {
    where: trendingcontentWhereUniqueInput
    data: XOR<trendingcontentUpdateWithoutContentInput, trendingcontentUncheckedUpdateWithoutContentInput>
  }

  export type trendingcontentUpdateManyWithWhereWithoutContentInput = {
    where: trendingcontentScalarWhereInput
    data: XOR<trendingcontentUpdateManyMutationInput, trendingcontentUncheckedUpdateManyWithoutContentInput>
  }

  export type trendingcontentScalarWhereInput = {
    AND?: trendingcontentScalarWhereInput | trendingcontentScalarWhereInput[]
    OR?: trendingcontentScalarWhereInput[]
    NOT?: trendingcontentScalarWhereInput | trendingcontentScalarWhereInput[]
    id?: IntFilter<"trendingcontent"> | number
    content_id?: IntFilter<"trendingcontent"> | number
    week_start?: DateTimeFilter<"trendingcontent"> | Date | string
    view_count?: IntFilter<"trendingcontent"> | number
    created_at?: DateTimeFilter<"trendingcontent"> | Date | string
  }

  export type watchhistoryUpsertWithWhereUniqueWithoutContentInput = {
    where: watchhistoryWhereUniqueInput
    update: XOR<watchhistoryUpdateWithoutContentInput, watchhistoryUncheckedUpdateWithoutContentInput>
    create: XOR<watchhistoryCreateWithoutContentInput, watchhistoryUncheckedCreateWithoutContentInput>
  }

  export type watchhistoryUpdateWithWhereUniqueWithoutContentInput = {
    where: watchhistoryWhereUniqueInput
    data: XOR<watchhistoryUpdateWithoutContentInput, watchhistoryUncheckedUpdateWithoutContentInput>
  }

  export type watchhistoryUpdateManyWithWhereWithoutContentInput = {
    where: watchhistoryScalarWhereInput
    data: XOR<watchhistoryUpdateManyMutationInput, watchhistoryUncheckedUpdateManyWithoutContentInput>
  }

  export type watchhistoryScalarWhereInput = {
    AND?: watchhistoryScalarWhereInput | watchhistoryScalarWhereInput[]
    OR?: watchhistoryScalarWhereInput[]
    NOT?: watchhistoryScalarWhereInput | watchhistoryScalarWhereInput[]
    id?: IntFilter<"watchhistory"> | number
    user_id?: IntFilter<"watchhistory"> | number
    content_id?: IntFilter<"watchhistory"> | number
    episode_id?: IntFilter<"watchhistory"> | number
    last_watch_seconds?: IntFilter<"watchhistory"> | number
    updated_at?: DateTimeFilter<"watchhistory"> | Date | string
  }

  export type contentCreateWithoutContentgenreInput = {
    title: string
    slug: string
    title_english?: string | null
    title_japanese?: string | null
    description?: string | null
    type: $Enums.content_type
    release_year?: number | null
    season_name?: $Enums.content_season_name | null
    studios?: string | null
    actor?: string | null
    score?: number | null
    thumbnail_url?: string | null
    backdrop_url?: string | null
    video_url?: string | null
    created_at?: Date | string
    duration_minutes?: number | null
    num_seasons?: number | null
    num_episodes?: number | null
    bookmark?: bookmarkCreateNestedManyWithoutContentInput
    comment?: commentCreateNestedManyWithoutContentInput
    episode?: episodeCreateNestedManyWithoutContentInput
    rating?: ratingCreateNestedManyWithoutContentInput
    reportcontent?: reportcontentCreateNestedManyWithoutContentInput
    season?: seasonCreateNestedManyWithoutContentInput
    subtitle?: subtitleCreateNestedManyWithoutContentInput
    trendingcontent?: trendingcontentCreateNestedManyWithoutContentInput
    watchhistory?: watchhistoryCreateNestedManyWithoutContentInput
  }

  export type contentUncheckedCreateWithoutContentgenreInput = {
    id?: number
    title: string
    slug: string
    title_english?: string | null
    title_japanese?: string | null
    description?: string | null
    type: $Enums.content_type
    release_year?: number | null
    season_name?: $Enums.content_season_name | null
    studios?: string | null
    actor?: string | null
    score?: number | null
    thumbnail_url?: string | null
    backdrop_url?: string | null
    video_url?: string | null
    created_at?: Date | string
    duration_minutes?: number | null
    num_seasons?: number | null
    num_episodes?: number | null
    bookmark?: bookmarkUncheckedCreateNestedManyWithoutContentInput
    comment?: commentUncheckedCreateNestedManyWithoutContentInput
    episode?: episodeUncheckedCreateNestedManyWithoutContentInput
    rating?: ratingUncheckedCreateNestedManyWithoutContentInput
    reportcontent?: reportcontentUncheckedCreateNestedManyWithoutContentInput
    season?: seasonUncheckedCreateNestedManyWithoutContentInput
    subtitle?: subtitleUncheckedCreateNestedManyWithoutContentInput
    trendingcontent?: trendingcontentUncheckedCreateNestedManyWithoutContentInput
    watchhistory?: watchhistoryUncheckedCreateNestedManyWithoutContentInput
  }

  export type contentCreateOrConnectWithoutContentgenreInput = {
    where: contentWhereUniqueInput
    create: XOR<contentCreateWithoutContentgenreInput, contentUncheckedCreateWithoutContentgenreInput>
  }

  export type genreCreateWithoutContentgenreInput = {
    name: string
  }

  export type genreUncheckedCreateWithoutContentgenreInput = {
    id?: number
    name: string
  }

  export type genreCreateOrConnectWithoutContentgenreInput = {
    where: genreWhereUniqueInput
    create: XOR<genreCreateWithoutContentgenreInput, genreUncheckedCreateWithoutContentgenreInput>
  }

  export type contentUpsertWithoutContentgenreInput = {
    update: XOR<contentUpdateWithoutContentgenreInput, contentUncheckedUpdateWithoutContentgenreInput>
    create: XOR<contentCreateWithoutContentgenreInput, contentUncheckedCreateWithoutContentgenreInput>
    where?: contentWhereInput
  }

  export type contentUpdateToOneWithWhereWithoutContentgenreInput = {
    where?: contentWhereInput
    data: XOR<contentUpdateWithoutContentgenreInput, contentUncheckedUpdateWithoutContentgenreInput>
  }

  export type contentUpdateWithoutContentgenreInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title_english?: NullableStringFieldUpdateOperationsInput | string | null
    title_japanese?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enumcontent_typeFieldUpdateOperationsInput | $Enums.content_type
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    season_name?: NullableEnumcontent_season_nameFieldUpdateOperationsInput | $Enums.content_season_name | null
    studios?: NullableStringFieldUpdateOperationsInput | string | null
    actor?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    backdrop_url?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration_minutes?: NullableIntFieldUpdateOperationsInput | number | null
    num_seasons?: NullableIntFieldUpdateOperationsInput | number | null
    num_episodes?: NullableIntFieldUpdateOperationsInput | number | null
    bookmark?: bookmarkUpdateManyWithoutContentNestedInput
    comment?: commentUpdateManyWithoutContentNestedInput
    episode?: episodeUpdateManyWithoutContentNestedInput
    rating?: ratingUpdateManyWithoutContentNestedInput
    reportcontent?: reportcontentUpdateManyWithoutContentNestedInput
    season?: seasonUpdateManyWithoutContentNestedInput
    subtitle?: subtitleUpdateManyWithoutContentNestedInput
    trendingcontent?: trendingcontentUpdateManyWithoutContentNestedInput
    watchhistory?: watchhistoryUpdateManyWithoutContentNestedInput
  }

  export type contentUncheckedUpdateWithoutContentgenreInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title_english?: NullableStringFieldUpdateOperationsInput | string | null
    title_japanese?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enumcontent_typeFieldUpdateOperationsInput | $Enums.content_type
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    season_name?: NullableEnumcontent_season_nameFieldUpdateOperationsInput | $Enums.content_season_name | null
    studios?: NullableStringFieldUpdateOperationsInput | string | null
    actor?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    backdrop_url?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration_minutes?: NullableIntFieldUpdateOperationsInput | number | null
    num_seasons?: NullableIntFieldUpdateOperationsInput | number | null
    num_episodes?: NullableIntFieldUpdateOperationsInput | number | null
    bookmark?: bookmarkUncheckedUpdateManyWithoutContentNestedInput
    comment?: commentUncheckedUpdateManyWithoutContentNestedInput
    episode?: episodeUncheckedUpdateManyWithoutContentNestedInput
    rating?: ratingUncheckedUpdateManyWithoutContentNestedInput
    reportcontent?: reportcontentUncheckedUpdateManyWithoutContentNestedInput
    season?: seasonUncheckedUpdateManyWithoutContentNestedInput
    subtitle?: subtitleUncheckedUpdateManyWithoutContentNestedInput
    trendingcontent?: trendingcontentUncheckedUpdateManyWithoutContentNestedInput
    watchhistory?: watchhistoryUncheckedUpdateManyWithoutContentNestedInput
  }

  export type genreUpsertWithoutContentgenreInput = {
    update: XOR<genreUpdateWithoutContentgenreInput, genreUncheckedUpdateWithoutContentgenreInput>
    create: XOR<genreCreateWithoutContentgenreInput, genreUncheckedCreateWithoutContentgenreInput>
    where?: genreWhereInput
  }

  export type genreUpdateToOneWithWhereWithoutContentgenreInput = {
    where?: genreWhereInput
    data: XOR<genreUpdateWithoutContentgenreInput, genreUncheckedUpdateWithoutContentgenreInput>
  }

  export type genreUpdateWithoutContentgenreInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type genreUncheckedUpdateWithoutContentgenreInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type commentCreateWithoutEpisodeInput = {
    comment: string
    created_at?: Date | string
    content: contentCreateNestedOneWithoutCommentInput
    user: userCreateNestedOneWithoutCommentInput
  }

  export type commentUncheckedCreateWithoutEpisodeInput = {
    id?: number
    user_id: number
    content_id: number
    comment: string
    created_at?: Date | string
  }

  export type commentCreateOrConnectWithoutEpisodeInput = {
    where: commentWhereUniqueInput
    create: XOR<commentCreateWithoutEpisodeInput, commentUncheckedCreateWithoutEpisodeInput>
  }

  export type commentCreateManyEpisodeInputEnvelope = {
    data: commentCreateManyEpisodeInput | commentCreateManyEpisodeInput[]
    skipDuplicates?: boolean
  }

  export type contentCreateWithoutEpisodeInput = {
    title: string
    slug: string
    title_english?: string | null
    title_japanese?: string | null
    description?: string | null
    type: $Enums.content_type
    release_year?: number | null
    season_name?: $Enums.content_season_name | null
    studios?: string | null
    actor?: string | null
    score?: number | null
    thumbnail_url?: string | null
    backdrop_url?: string | null
    video_url?: string | null
    created_at?: Date | string
    duration_minutes?: number | null
    num_seasons?: number | null
    num_episodes?: number | null
    bookmark?: bookmarkCreateNestedManyWithoutContentInput
    comment?: commentCreateNestedManyWithoutContentInput
    contentgenre?: contentgenreCreateNestedManyWithoutContentInput
    rating?: ratingCreateNestedManyWithoutContentInput
    reportcontent?: reportcontentCreateNestedManyWithoutContentInput
    season?: seasonCreateNestedManyWithoutContentInput
    subtitle?: subtitleCreateNestedManyWithoutContentInput
    trendingcontent?: trendingcontentCreateNestedManyWithoutContentInput
    watchhistory?: watchhistoryCreateNestedManyWithoutContentInput
  }

  export type contentUncheckedCreateWithoutEpisodeInput = {
    id?: number
    title: string
    slug: string
    title_english?: string | null
    title_japanese?: string | null
    description?: string | null
    type: $Enums.content_type
    release_year?: number | null
    season_name?: $Enums.content_season_name | null
    studios?: string | null
    actor?: string | null
    score?: number | null
    thumbnail_url?: string | null
    backdrop_url?: string | null
    video_url?: string | null
    created_at?: Date | string
    duration_minutes?: number | null
    num_seasons?: number | null
    num_episodes?: number | null
    bookmark?: bookmarkUncheckedCreateNestedManyWithoutContentInput
    comment?: commentUncheckedCreateNestedManyWithoutContentInput
    contentgenre?: contentgenreUncheckedCreateNestedManyWithoutContentInput
    rating?: ratingUncheckedCreateNestedManyWithoutContentInput
    reportcontent?: reportcontentUncheckedCreateNestedManyWithoutContentInput
    season?: seasonUncheckedCreateNestedManyWithoutContentInput
    subtitle?: subtitleUncheckedCreateNestedManyWithoutContentInput
    trendingcontent?: trendingcontentUncheckedCreateNestedManyWithoutContentInput
    watchhistory?: watchhistoryUncheckedCreateNestedManyWithoutContentInput
  }

  export type contentCreateOrConnectWithoutEpisodeInput = {
    where: contentWhereUniqueInput
    create: XOR<contentCreateWithoutEpisodeInput, contentUncheckedCreateWithoutEpisodeInput>
  }

  export type episodesourceCreateWithoutEpisodeInput = {
    provider: string
    priority?: number
    created_at?: Date | string
    qualities?: episodesourcequalityCreateNestedManyWithoutEpisodesourceInput
  }

  export type episodesourceUncheckedCreateWithoutEpisodeInput = {
    id?: number
    provider: string
    priority?: number
    created_at?: Date | string
    qualities?: episodesourcequalityUncheckedCreateNestedManyWithoutEpisodesourceInput
  }

  export type episodesourceCreateOrConnectWithoutEpisodeInput = {
    where: episodesourceWhereUniqueInput
    create: XOR<episodesourceCreateWithoutEpisodeInput, episodesourceUncheckedCreateWithoutEpisodeInput>
  }

  export type episodesourceCreateManyEpisodeInputEnvelope = {
    data: episodesourceCreateManyEpisodeInput | episodesourceCreateManyEpisodeInput[]
    skipDuplicates?: boolean
  }

  export type reportcontentCreateWithoutEpisodeInput = {
    reason: string
    created_at?: Date | string
    content: contentCreateNestedOneWithoutReportcontentInput
    user: userCreateNestedOneWithoutReportcontentInput
  }

  export type reportcontentUncheckedCreateWithoutEpisodeInput = {
    id?: number
    user_id: number
    content_id: number
    reason: string
    created_at?: Date | string
  }

  export type reportcontentCreateOrConnectWithoutEpisodeInput = {
    where: reportcontentWhereUniqueInput
    create: XOR<reportcontentCreateWithoutEpisodeInput, reportcontentUncheckedCreateWithoutEpisodeInput>
  }

  export type reportcontentCreateManyEpisodeInputEnvelope = {
    data: reportcontentCreateManyEpisodeInput | reportcontentCreateManyEpisodeInput[]
    skipDuplicates?: boolean
  }

  export type subtitleCreateWithoutEpisodeInput = {
    language: string
    file_url: string
    created_at?: Date | string
    content: contentCreateNestedOneWithoutSubtitleInput
  }

  export type subtitleUncheckedCreateWithoutEpisodeInput = {
    id?: number
    content_id: number
    language: string
    file_url: string
    created_at?: Date | string
  }

  export type subtitleCreateOrConnectWithoutEpisodeInput = {
    where: subtitleWhereUniqueInput
    create: XOR<subtitleCreateWithoutEpisodeInput, subtitleUncheckedCreateWithoutEpisodeInput>
  }

  export type subtitleCreateManyEpisodeInputEnvelope = {
    data: subtitleCreateManyEpisodeInput | subtitleCreateManyEpisodeInput[]
    skipDuplicates?: boolean
  }

  export type watchhistoryCreateWithoutEpisodeInput = {
    last_watch_seconds: number
    updated_at?: Date | string
    content: contentCreateNestedOneWithoutWatchhistoryInput
    user: userCreateNestedOneWithoutWatchhistoryInput
  }

  export type watchhistoryUncheckedCreateWithoutEpisodeInput = {
    id?: number
    user_id: number
    content_id: number
    last_watch_seconds: number
    updated_at?: Date | string
  }

  export type watchhistoryCreateOrConnectWithoutEpisodeInput = {
    where: watchhistoryWhereUniqueInput
    create: XOR<watchhistoryCreateWithoutEpisodeInput, watchhistoryUncheckedCreateWithoutEpisodeInput>
  }

  export type watchhistoryCreateManyEpisodeInputEnvelope = {
    data: watchhistoryCreateManyEpisodeInput | watchhistoryCreateManyEpisodeInput[]
    skipDuplicates?: boolean
  }

  export type commentUpsertWithWhereUniqueWithoutEpisodeInput = {
    where: commentWhereUniqueInput
    update: XOR<commentUpdateWithoutEpisodeInput, commentUncheckedUpdateWithoutEpisodeInput>
    create: XOR<commentCreateWithoutEpisodeInput, commentUncheckedCreateWithoutEpisodeInput>
  }

  export type commentUpdateWithWhereUniqueWithoutEpisodeInput = {
    where: commentWhereUniqueInput
    data: XOR<commentUpdateWithoutEpisodeInput, commentUncheckedUpdateWithoutEpisodeInput>
  }

  export type commentUpdateManyWithWhereWithoutEpisodeInput = {
    where: commentScalarWhereInput
    data: XOR<commentUpdateManyMutationInput, commentUncheckedUpdateManyWithoutEpisodeInput>
  }

  export type contentUpsertWithoutEpisodeInput = {
    update: XOR<contentUpdateWithoutEpisodeInput, contentUncheckedUpdateWithoutEpisodeInput>
    create: XOR<contentCreateWithoutEpisodeInput, contentUncheckedCreateWithoutEpisodeInput>
    where?: contentWhereInput
  }

  export type contentUpdateToOneWithWhereWithoutEpisodeInput = {
    where?: contentWhereInput
    data: XOR<contentUpdateWithoutEpisodeInput, contentUncheckedUpdateWithoutEpisodeInput>
  }

  export type contentUpdateWithoutEpisodeInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title_english?: NullableStringFieldUpdateOperationsInput | string | null
    title_japanese?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enumcontent_typeFieldUpdateOperationsInput | $Enums.content_type
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    season_name?: NullableEnumcontent_season_nameFieldUpdateOperationsInput | $Enums.content_season_name | null
    studios?: NullableStringFieldUpdateOperationsInput | string | null
    actor?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    backdrop_url?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration_minutes?: NullableIntFieldUpdateOperationsInput | number | null
    num_seasons?: NullableIntFieldUpdateOperationsInput | number | null
    num_episodes?: NullableIntFieldUpdateOperationsInput | number | null
    bookmark?: bookmarkUpdateManyWithoutContentNestedInput
    comment?: commentUpdateManyWithoutContentNestedInput
    contentgenre?: contentgenreUpdateManyWithoutContentNestedInput
    rating?: ratingUpdateManyWithoutContentNestedInput
    reportcontent?: reportcontentUpdateManyWithoutContentNestedInput
    season?: seasonUpdateManyWithoutContentNestedInput
    subtitle?: subtitleUpdateManyWithoutContentNestedInput
    trendingcontent?: trendingcontentUpdateManyWithoutContentNestedInput
    watchhistory?: watchhistoryUpdateManyWithoutContentNestedInput
  }

  export type contentUncheckedUpdateWithoutEpisodeInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title_english?: NullableStringFieldUpdateOperationsInput | string | null
    title_japanese?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enumcontent_typeFieldUpdateOperationsInput | $Enums.content_type
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    season_name?: NullableEnumcontent_season_nameFieldUpdateOperationsInput | $Enums.content_season_name | null
    studios?: NullableStringFieldUpdateOperationsInput | string | null
    actor?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    backdrop_url?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration_minutes?: NullableIntFieldUpdateOperationsInput | number | null
    num_seasons?: NullableIntFieldUpdateOperationsInput | number | null
    num_episodes?: NullableIntFieldUpdateOperationsInput | number | null
    bookmark?: bookmarkUncheckedUpdateManyWithoutContentNestedInput
    comment?: commentUncheckedUpdateManyWithoutContentNestedInput
    contentgenre?: contentgenreUncheckedUpdateManyWithoutContentNestedInput
    rating?: ratingUncheckedUpdateManyWithoutContentNestedInput
    reportcontent?: reportcontentUncheckedUpdateManyWithoutContentNestedInput
    season?: seasonUncheckedUpdateManyWithoutContentNestedInput
    subtitle?: subtitleUncheckedUpdateManyWithoutContentNestedInput
    trendingcontent?: trendingcontentUncheckedUpdateManyWithoutContentNestedInput
    watchhistory?: watchhistoryUncheckedUpdateManyWithoutContentNestedInput
  }

  export type episodesourceUpsertWithWhereUniqueWithoutEpisodeInput = {
    where: episodesourceWhereUniqueInput
    update: XOR<episodesourceUpdateWithoutEpisodeInput, episodesourceUncheckedUpdateWithoutEpisodeInput>
    create: XOR<episodesourceCreateWithoutEpisodeInput, episodesourceUncheckedCreateWithoutEpisodeInput>
  }

  export type episodesourceUpdateWithWhereUniqueWithoutEpisodeInput = {
    where: episodesourceWhereUniqueInput
    data: XOR<episodesourceUpdateWithoutEpisodeInput, episodesourceUncheckedUpdateWithoutEpisodeInput>
  }

  export type episodesourceUpdateManyWithWhereWithoutEpisodeInput = {
    where: episodesourceScalarWhereInput
    data: XOR<episodesourceUpdateManyMutationInput, episodesourceUncheckedUpdateManyWithoutEpisodeInput>
  }

  export type episodesourceScalarWhereInput = {
    AND?: episodesourceScalarWhereInput | episodesourceScalarWhereInput[]
    OR?: episodesourceScalarWhereInput[]
    NOT?: episodesourceScalarWhereInput | episodesourceScalarWhereInput[]
    id?: IntFilter<"episodesource"> | number
    episode_id?: IntFilter<"episodesource"> | number
    provider?: StringFilter<"episodesource"> | string
    priority?: IntFilter<"episodesource"> | number
    created_at?: DateTimeFilter<"episodesource"> | Date | string
  }

  export type reportcontentUpsertWithWhereUniqueWithoutEpisodeInput = {
    where: reportcontentWhereUniqueInput
    update: XOR<reportcontentUpdateWithoutEpisodeInput, reportcontentUncheckedUpdateWithoutEpisodeInput>
    create: XOR<reportcontentCreateWithoutEpisodeInput, reportcontentUncheckedCreateWithoutEpisodeInput>
  }

  export type reportcontentUpdateWithWhereUniqueWithoutEpisodeInput = {
    where: reportcontentWhereUniqueInput
    data: XOR<reportcontentUpdateWithoutEpisodeInput, reportcontentUncheckedUpdateWithoutEpisodeInput>
  }

  export type reportcontentUpdateManyWithWhereWithoutEpisodeInput = {
    where: reportcontentScalarWhereInput
    data: XOR<reportcontentUpdateManyMutationInput, reportcontentUncheckedUpdateManyWithoutEpisodeInput>
  }

  export type subtitleUpsertWithWhereUniqueWithoutEpisodeInput = {
    where: subtitleWhereUniqueInput
    update: XOR<subtitleUpdateWithoutEpisodeInput, subtitleUncheckedUpdateWithoutEpisodeInput>
    create: XOR<subtitleCreateWithoutEpisodeInput, subtitleUncheckedCreateWithoutEpisodeInput>
  }

  export type subtitleUpdateWithWhereUniqueWithoutEpisodeInput = {
    where: subtitleWhereUniqueInput
    data: XOR<subtitleUpdateWithoutEpisodeInput, subtitleUncheckedUpdateWithoutEpisodeInput>
  }

  export type subtitleUpdateManyWithWhereWithoutEpisodeInput = {
    where: subtitleScalarWhereInput
    data: XOR<subtitleUpdateManyMutationInput, subtitleUncheckedUpdateManyWithoutEpisodeInput>
  }

  export type watchhistoryUpsertWithWhereUniqueWithoutEpisodeInput = {
    where: watchhistoryWhereUniqueInput
    update: XOR<watchhistoryUpdateWithoutEpisodeInput, watchhistoryUncheckedUpdateWithoutEpisodeInput>
    create: XOR<watchhistoryCreateWithoutEpisodeInput, watchhistoryUncheckedCreateWithoutEpisodeInput>
  }

  export type watchhistoryUpdateWithWhereUniqueWithoutEpisodeInput = {
    where: watchhistoryWhereUniqueInput
    data: XOR<watchhistoryUpdateWithoutEpisodeInput, watchhistoryUncheckedUpdateWithoutEpisodeInput>
  }

  export type watchhistoryUpdateManyWithWhereWithoutEpisodeInput = {
    where: watchhistoryScalarWhereInput
    data: XOR<watchhistoryUpdateManyMutationInput, watchhistoryUncheckedUpdateManyWithoutEpisodeInput>
  }

  export type contentgenreCreateWithoutGenreInput = {
    content: contentCreateNestedOneWithoutContentgenreInput
  }

  export type contentgenreUncheckedCreateWithoutGenreInput = {
    content_id: number
  }

  export type contentgenreCreateOrConnectWithoutGenreInput = {
    where: contentgenreWhereUniqueInput
    create: XOR<contentgenreCreateWithoutGenreInput, contentgenreUncheckedCreateWithoutGenreInput>
  }

  export type contentgenreCreateManyGenreInputEnvelope = {
    data: contentgenreCreateManyGenreInput | contentgenreCreateManyGenreInput[]
    skipDuplicates?: boolean
  }

  export type contentgenreUpsertWithWhereUniqueWithoutGenreInput = {
    where: contentgenreWhereUniqueInput
    update: XOR<contentgenreUpdateWithoutGenreInput, contentgenreUncheckedUpdateWithoutGenreInput>
    create: XOR<contentgenreCreateWithoutGenreInput, contentgenreUncheckedCreateWithoutGenreInput>
  }

  export type contentgenreUpdateWithWhereUniqueWithoutGenreInput = {
    where: contentgenreWhereUniqueInput
    data: XOR<contentgenreUpdateWithoutGenreInput, contentgenreUncheckedUpdateWithoutGenreInput>
  }

  export type contentgenreUpdateManyWithWhereWithoutGenreInput = {
    where: contentgenreScalarWhereInput
    data: XOR<contentgenreUpdateManyMutationInput, contentgenreUncheckedUpdateManyWithoutGenreInput>
  }

  export type userCreateWithoutNotificationInput = {
    email: string
    password: string
    role?: $Enums.user_role
    created_at?: Date | string
    bookmark?: bookmarkCreateNestedManyWithoutUserInput
    comment?: commentCreateNestedManyWithoutUserInput
    rating?: ratingCreateNestedManyWithoutUserInput
    reportcontent?: reportcontentCreateNestedManyWithoutUserInput
    searchlog?: searchlogCreateNestedManyWithoutUserInput
    watchhistory?: watchhistoryCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutNotificationInput = {
    id?: number
    email: string
    password: string
    role?: $Enums.user_role
    created_at?: Date | string
    bookmark?: bookmarkUncheckedCreateNestedManyWithoutUserInput
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
    rating?: ratingUncheckedCreateNestedManyWithoutUserInput
    reportcontent?: reportcontentUncheckedCreateNestedManyWithoutUserInput
    searchlog?: searchlogUncheckedCreateNestedManyWithoutUserInput
    watchhistory?: watchhistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutNotificationInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutNotificationInput, userUncheckedCreateWithoutNotificationInput>
  }

  export type userUpsertWithoutNotificationInput = {
    update: XOR<userUpdateWithoutNotificationInput, userUncheckedUpdateWithoutNotificationInput>
    create: XOR<userCreateWithoutNotificationInput, userUncheckedCreateWithoutNotificationInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutNotificationInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutNotificationInput, userUncheckedUpdateWithoutNotificationInput>
  }

  export type userUpdateWithoutNotificationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | $Enums.user_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    bookmark?: bookmarkUpdateManyWithoutUserNestedInput
    comment?: commentUpdateManyWithoutUserNestedInput
    rating?: ratingUpdateManyWithoutUserNestedInput
    reportcontent?: reportcontentUpdateManyWithoutUserNestedInput
    searchlog?: searchlogUpdateManyWithoutUserNestedInput
    watchhistory?: watchhistoryUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutNotificationInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | $Enums.user_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    bookmark?: bookmarkUncheckedUpdateManyWithoutUserNestedInput
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
    rating?: ratingUncheckedUpdateManyWithoutUserNestedInput
    reportcontent?: reportcontentUncheckedUpdateManyWithoutUserNestedInput
    searchlog?: searchlogUncheckedUpdateManyWithoutUserNestedInput
    watchhistory?: watchhistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type contentCreateWithoutRatingInput = {
    title: string
    slug: string
    title_english?: string | null
    title_japanese?: string | null
    description?: string | null
    type: $Enums.content_type
    release_year?: number | null
    season_name?: $Enums.content_season_name | null
    studios?: string | null
    actor?: string | null
    score?: number | null
    thumbnail_url?: string | null
    backdrop_url?: string | null
    video_url?: string | null
    created_at?: Date | string
    duration_minutes?: number | null
    num_seasons?: number | null
    num_episodes?: number | null
    bookmark?: bookmarkCreateNestedManyWithoutContentInput
    comment?: commentCreateNestedManyWithoutContentInput
    contentgenre?: contentgenreCreateNestedManyWithoutContentInput
    episode?: episodeCreateNestedManyWithoutContentInput
    reportcontent?: reportcontentCreateNestedManyWithoutContentInput
    season?: seasonCreateNestedManyWithoutContentInput
    subtitle?: subtitleCreateNestedManyWithoutContentInput
    trendingcontent?: trendingcontentCreateNestedManyWithoutContentInput
    watchhistory?: watchhistoryCreateNestedManyWithoutContentInput
  }

  export type contentUncheckedCreateWithoutRatingInput = {
    id?: number
    title: string
    slug: string
    title_english?: string | null
    title_japanese?: string | null
    description?: string | null
    type: $Enums.content_type
    release_year?: number | null
    season_name?: $Enums.content_season_name | null
    studios?: string | null
    actor?: string | null
    score?: number | null
    thumbnail_url?: string | null
    backdrop_url?: string | null
    video_url?: string | null
    created_at?: Date | string
    duration_minutes?: number | null
    num_seasons?: number | null
    num_episodes?: number | null
    bookmark?: bookmarkUncheckedCreateNestedManyWithoutContentInput
    comment?: commentUncheckedCreateNestedManyWithoutContentInput
    contentgenre?: contentgenreUncheckedCreateNestedManyWithoutContentInput
    episode?: episodeUncheckedCreateNestedManyWithoutContentInput
    reportcontent?: reportcontentUncheckedCreateNestedManyWithoutContentInput
    season?: seasonUncheckedCreateNestedManyWithoutContentInput
    subtitle?: subtitleUncheckedCreateNestedManyWithoutContentInput
    trendingcontent?: trendingcontentUncheckedCreateNestedManyWithoutContentInput
    watchhistory?: watchhistoryUncheckedCreateNestedManyWithoutContentInput
  }

  export type contentCreateOrConnectWithoutRatingInput = {
    where: contentWhereUniqueInput
    create: XOR<contentCreateWithoutRatingInput, contentUncheckedCreateWithoutRatingInput>
  }

  export type userCreateWithoutRatingInput = {
    email: string
    password: string
    role?: $Enums.user_role
    created_at?: Date | string
    bookmark?: bookmarkCreateNestedManyWithoutUserInput
    comment?: commentCreateNestedManyWithoutUserInput
    notification?: notificationCreateNestedManyWithoutUserInput
    reportcontent?: reportcontentCreateNestedManyWithoutUserInput
    searchlog?: searchlogCreateNestedManyWithoutUserInput
    watchhistory?: watchhistoryCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutRatingInput = {
    id?: number
    email: string
    password: string
    role?: $Enums.user_role
    created_at?: Date | string
    bookmark?: bookmarkUncheckedCreateNestedManyWithoutUserInput
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
    notification?: notificationUncheckedCreateNestedManyWithoutUserInput
    reportcontent?: reportcontentUncheckedCreateNestedManyWithoutUserInput
    searchlog?: searchlogUncheckedCreateNestedManyWithoutUserInput
    watchhistory?: watchhistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutRatingInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutRatingInput, userUncheckedCreateWithoutRatingInput>
  }

  export type contentUpsertWithoutRatingInput = {
    update: XOR<contentUpdateWithoutRatingInput, contentUncheckedUpdateWithoutRatingInput>
    create: XOR<contentCreateWithoutRatingInput, contentUncheckedCreateWithoutRatingInput>
    where?: contentWhereInput
  }

  export type contentUpdateToOneWithWhereWithoutRatingInput = {
    where?: contentWhereInput
    data: XOR<contentUpdateWithoutRatingInput, contentUncheckedUpdateWithoutRatingInput>
  }

  export type contentUpdateWithoutRatingInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title_english?: NullableStringFieldUpdateOperationsInput | string | null
    title_japanese?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enumcontent_typeFieldUpdateOperationsInput | $Enums.content_type
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    season_name?: NullableEnumcontent_season_nameFieldUpdateOperationsInput | $Enums.content_season_name | null
    studios?: NullableStringFieldUpdateOperationsInput | string | null
    actor?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    backdrop_url?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration_minutes?: NullableIntFieldUpdateOperationsInput | number | null
    num_seasons?: NullableIntFieldUpdateOperationsInput | number | null
    num_episodes?: NullableIntFieldUpdateOperationsInput | number | null
    bookmark?: bookmarkUpdateManyWithoutContentNestedInput
    comment?: commentUpdateManyWithoutContentNestedInput
    contentgenre?: contentgenreUpdateManyWithoutContentNestedInput
    episode?: episodeUpdateManyWithoutContentNestedInput
    reportcontent?: reportcontentUpdateManyWithoutContentNestedInput
    season?: seasonUpdateManyWithoutContentNestedInput
    subtitle?: subtitleUpdateManyWithoutContentNestedInput
    trendingcontent?: trendingcontentUpdateManyWithoutContentNestedInput
    watchhistory?: watchhistoryUpdateManyWithoutContentNestedInput
  }

  export type contentUncheckedUpdateWithoutRatingInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title_english?: NullableStringFieldUpdateOperationsInput | string | null
    title_japanese?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enumcontent_typeFieldUpdateOperationsInput | $Enums.content_type
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    season_name?: NullableEnumcontent_season_nameFieldUpdateOperationsInput | $Enums.content_season_name | null
    studios?: NullableStringFieldUpdateOperationsInput | string | null
    actor?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    backdrop_url?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration_minutes?: NullableIntFieldUpdateOperationsInput | number | null
    num_seasons?: NullableIntFieldUpdateOperationsInput | number | null
    num_episodes?: NullableIntFieldUpdateOperationsInput | number | null
    bookmark?: bookmarkUncheckedUpdateManyWithoutContentNestedInput
    comment?: commentUncheckedUpdateManyWithoutContentNestedInput
    contentgenre?: contentgenreUncheckedUpdateManyWithoutContentNestedInput
    episode?: episodeUncheckedUpdateManyWithoutContentNestedInput
    reportcontent?: reportcontentUncheckedUpdateManyWithoutContentNestedInput
    season?: seasonUncheckedUpdateManyWithoutContentNestedInput
    subtitle?: subtitleUncheckedUpdateManyWithoutContentNestedInput
    trendingcontent?: trendingcontentUncheckedUpdateManyWithoutContentNestedInput
    watchhistory?: watchhistoryUncheckedUpdateManyWithoutContentNestedInput
  }

  export type userUpsertWithoutRatingInput = {
    update: XOR<userUpdateWithoutRatingInput, userUncheckedUpdateWithoutRatingInput>
    create: XOR<userCreateWithoutRatingInput, userUncheckedCreateWithoutRatingInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutRatingInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutRatingInput, userUncheckedUpdateWithoutRatingInput>
  }

  export type userUpdateWithoutRatingInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | $Enums.user_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    bookmark?: bookmarkUpdateManyWithoutUserNestedInput
    comment?: commentUpdateManyWithoutUserNestedInput
    notification?: notificationUpdateManyWithoutUserNestedInput
    reportcontent?: reportcontentUpdateManyWithoutUserNestedInput
    searchlog?: searchlogUpdateManyWithoutUserNestedInput
    watchhistory?: watchhistoryUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutRatingInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | $Enums.user_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    bookmark?: bookmarkUncheckedUpdateManyWithoutUserNestedInput
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
    notification?: notificationUncheckedUpdateManyWithoutUserNestedInput
    reportcontent?: reportcontentUncheckedUpdateManyWithoutUserNestedInput
    searchlog?: searchlogUncheckedUpdateManyWithoutUserNestedInput
    watchhistory?: watchhistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type contentCreateWithoutReportcontentInput = {
    title: string
    slug: string
    title_english?: string | null
    title_japanese?: string | null
    description?: string | null
    type: $Enums.content_type
    release_year?: number | null
    season_name?: $Enums.content_season_name | null
    studios?: string | null
    actor?: string | null
    score?: number | null
    thumbnail_url?: string | null
    backdrop_url?: string | null
    video_url?: string | null
    created_at?: Date | string
    duration_minutes?: number | null
    num_seasons?: number | null
    num_episodes?: number | null
    bookmark?: bookmarkCreateNestedManyWithoutContentInput
    comment?: commentCreateNestedManyWithoutContentInput
    contentgenre?: contentgenreCreateNestedManyWithoutContentInput
    episode?: episodeCreateNestedManyWithoutContentInput
    rating?: ratingCreateNestedManyWithoutContentInput
    season?: seasonCreateNestedManyWithoutContentInput
    subtitle?: subtitleCreateNestedManyWithoutContentInput
    trendingcontent?: trendingcontentCreateNestedManyWithoutContentInput
    watchhistory?: watchhistoryCreateNestedManyWithoutContentInput
  }

  export type contentUncheckedCreateWithoutReportcontentInput = {
    id?: number
    title: string
    slug: string
    title_english?: string | null
    title_japanese?: string | null
    description?: string | null
    type: $Enums.content_type
    release_year?: number | null
    season_name?: $Enums.content_season_name | null
    studios?: string | null
    actor?: string | null
    score?: number | null
    thumbnail_url?: string | null
    backdrop_url?: string | null
    video_url?: string | null
    created_at?: Date | string
    duration_minutes?: number | null
    num_seasons?: number | null
    num_episodes?: number | null
    bookmark?: bookmarkUncheckedCreateNestedManyWithoutContentInput
    comment?: commentUncheckedCreateNestedManyWithoutContentInput
    contentgenre?: contentgenreUncheckedCreateNestedManyWithoutContentInput
    episode?: episodeUncheckedCreateNestedManyWithoutContentInput
    rating?: ratingUncheckedCreateNestedManyWithoutContentInput
    season?: seasonUncheckedCreateNestedManyWithoutContentInput
    subtitle?: subtitleUncheckedCreateNestedManyWithoutContentInput
    trendingcontent?: trendingcontentUncheckedCreateNestedManyWithoutContentInput
    watchhistory?: watchhistoryUncheckedCreateNestedManyWithoutContentInput
  }

  export type contentCreateOrConnectWithoutReportcontentInput = {
    where: contentWhereUniqueInput
    create: XOR<contentCreateWithoutReportcontentInput, contentUncheckedCreateWithoutReportcontentInput>
  }

  export type episodeCreateWithoutReportcontentInput = {
    season: number
    episode_number: number
    title?: string | null
    created_at?: Date | string
    comment?: commentCreateNestedManyWithoutEpisodeInput
    content: contentCreateNestedOneWithoutEpisodeInput
    episodesource?: episodesourceCreateNestedManyWithoutEpisodeInput
    subtitle?: subtitleCreateNestedManyWithoutEpisodeInput
    watchhistory?: watchhistoryCreateNestedManyWithoutEpisodeInput
  }

  export type episodeUncheckedCreateWithoutReportcontentInput = {
    id?: number
    content_id: number
    season: number
    episode_number: number
    title?: string | null
    created_at?: Date | string
    comment?: commentUncheckedCreateNestedManyWithoutEpisodeInput
    episodesource?: episodesourceUncheckedCreateNestedManyWithoutEpisodeInput
    subtitle?: subtitleUncheckedCreateNestedManyWithoutEpisodeInput
    watchhistory?: watchhistoryUncheckedCreateNestedManyWithoutEpisodeInput
  }

  export type episodeCreateOrConnectWithoutReportcontentInput = {
    where: episodeWhereUniqueInput
    create: XOR<episodeCreateWithoutReportcontentInput, episodeUncheckedCreateWithoutReportcontentInput>
  }

  export type userCreateWithoutReportcontentInput = {
    email: string
    password: string
    role?: $Enums.user_role
    created_at?: Date | string
    bookmark?: bookmarkCreateNestedManyWithoutUserInput
    comment?: commentCreateNestedManyWithoutUserInput
    notification?: notificationCreateNestedManyWithoutUserInput
    rating?: ratingCreateNestedManyWithoutUserInput
    searchlog?: searchlogCreateNestedManyWithoutUserInput
    watchhistory?: watchhistoryCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutReportcontentInput = {
    id?: number
    email: string
    password: string
    role?: $Enums.user_role
    created_at?: Date | string
    bookmark?: bookmarkUncheckedCreateNestedManyWithoutUserInput
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
    notification?: notificationUncheckedCreateNestedManyWithoutUserInput
    rating?: ratingUncheckedCreateNestedManyWithoutUserInput
    searchlog?: searchlogUncheckedCreateNestedManyWithoutUserInput
    watchhistory?: watchhistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutReportcontentInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutReportcontentInput, userUncheckedCreateWithoutReportcontentInput>
  }

  export type contentUpsertWithoutReportcontentInput = {
    update: XOR<contentUpdateWithoutReportcontentInput, contentUncheckedUpdateWithoutReportcontentInput>
    create: XOR<contentCreateWithoutReportcontentInput, contentUncheckedCreateWithoutReportcontentInput>
    where?: contentWhereInput
  }

  export type contentUpdateToOneWithWhereWithoutReportcontentInput = {
    where?: contentWhereInput
    data: XOR<contentUpdateWithoutReportcontentInput, contentUncheckedUpdateWithoutReportcontentInput>
  }

  export type contentUpdateWithoutReportcontentInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title_english?: NullableStringFieldUpdateOperationsInput | string | null
    title_japanese?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enumcontent_typeFieldUpdateOperationsInput | $Enums.content_type
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    season_name?: NullableEnumcontent_season_nameFieldUpdateOperationsInput | $Enums.content_season_name | null
    studios?: NullableStringFieldUpdateOperationsInput | string | null
    actor?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    backdrop_url?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration_minutes?: NullableIntFieldUpdateOperationsInput | number | null
    num_seasons?: NullableIntFieldUpdateOperationsInput | number | null
    num_episodes?: NullableIntFieldUpdateOperationsInput | number | null
    bookmark?: bookmarkUpdateManyWithoutContentNestedInput
    comment?: commentUpdateManyWithoutContentNestedInput
    contentgenre?: contentgenreUpdateManyWithoutContentNestedInput
    episode?: episodeUpdateManyWithoutContentNestedInput
    rating?: ratingUpdateManyWithoutContentNestedInput
    season?: seasonUpdateManyWithoutContentNestedInput
    subtitle?: subtitleUpdateManyWithoutContentNestedInput
    trendingcontent?: trendingcontentUpdateManyWithoutContentNestedInput
    watchhistory?: watchhistoryUpdateManyWithoutContentNestedInput
  }

  export type contentUncheckedUpdateWithoutReportcontentInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title_english?: NullableStringFieldUpdateOperationsInput | string | null
    title_japanese?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enumcontent_typeFieldUpdateOperationsInput | $Enums.content_type
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    season_name?: NullableEnumcontent_season_nameFieldUpdateOperationsInput | $Enums.content_season_name | null
    studios?: NullableStringFieldUpdateOperationsInput | string | null
    actor?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    backdrop_url?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration_minutes?: NullableIntFieldUpdateOperationsInput | number | null
    num_seasons?: NullableIntFieldUpdateOperationsInput | number | null
    num_episodes?: NullableIntFieldUpdateOperationsInput | number | null
    bookmark?: bookmarkUncheckedUpdateManyWithoutContentNestedInput
    comment?: commentUncheckedUpdateManyWithoutContentNestedInput
    contentgenre?: contentgenreUncheckedUpdateManyWithoutContentNestedInput
    episode?: episodeUncheckedUpdateManyWithoutContentNestedInput
    rating?: ratingUncheckedUpdateManyWithoutContentNestedInput
    season?: seasonUncheckedUpdateManyWithoutContentNestedInput
    subtitle?: subtitleUncheckedUpdateManyWithoutContentNestedInput
    trendingcontent?: trendingcontentUncheckedUpdateManyWithoutContentNestedInput
    watchhistory?: watchhistoryUncheckedUpdateManyWithoutContentNestedInput
  }

  export type episodeUpsertWithoutReportcontentInput = {
    update: XOR<episodeUpdateWithoutReportcontentInput, episodeUncheckedUpdateWithoutReportcontentInput>
    create: XOR<episodeCreateWithoutReportcontentInput, episodeUncheckedCreateWithoutReportcontentInput>
    where?: episodeWhereInput
  }

  export type episodeUpdateToOneWithWhereWithoutReportcontentInput = {
    where?: episodeWhereInput
    data: XOR<episodeUpdateWithoutReportcontentInput, episodeUncheckedUpdateWithoutReportcontentInput>
  }

  export type episodeUpdateWithoutReportcontentInput = {
    season?: IntFieldUpdateOperationsInput | number
    episode_number?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: commentUpdateManyWithoutEpisodeNestedInput
    content?: contentUpdateOneRequiredWithoutEpisodeNestedInput
    episodesource?: episodesourceUpdateManyWithoutEpisodeNestedInput
    subtitle?: subtitleUpdateManyWithoutEpisodeNestedInput
    watchhistory?: watchhistoryUpdateManyWithoutEpisodeNestedInput
  }

  export type episodeUncheckedUpdateWithoutReportcontentInput = {
    id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    season?: IntFieldUpdateOperationsInput | number
    episode_number?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: commentUncheckedUpdateManyWithoutEpisodeNestedInput
    episodesource?: episodesourceUncheckedUpdateManyWithoutEpisodeNestedInput
    subtitle?: subtitleUncheckedUpdateManyWithoutEpisodeNestedInput
    watchhistory?: watchhistoryUncheckedUpdateManyWithoutEpisodeNestedInput
  }

  export type userUpsertWithoutReportcontentInput = {
    update: XOR<userUpdateWithoutReportcontentInput, userUncheckedUpdateWithoutReportcontentInput>
    create: XOR<userCreateWithoutReportcontentInput, userUncheckedCreateWithoutReportcontentInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutReportcontentInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutReportcontentInput, userUncheckedUpdateWithoutReportcontentInput>
  }

  export type userUpdateWithoutReportcontentInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | $Enums.user_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    bookmark?: bookmarkUpdateManyWithoutUserNestedInput
    comment?: commentUpdateManyWithoutUserNestedInput
    notification?: notificationUpdateManyWithoutUserNestedInput
    rating?: ratingUpdateManyWithoutUserNestedInput
    searchlog?: searchlogUpdateManyWithoutUserNestedInput
    watchhistory?: watchhistoryUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutReportcontentInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | $Enums.user_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    bookmark?: bookmarkUncheckedUpdateManyWithoutUserNestedInput
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
    notification?: notificationUncheckedUpdateManyWithoutUserNestedInput
    rating?: ratingUncheckedUpdateManyWithoutUserNestedInput
    searchlog?: searchlogUncheckedUpdateManyWithoutUserNestedInput
    watchhistory?: watchhistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateWithoutSearchlogInput = {
    email: string
    password: string
    role?: $Enums.user_role
    created_at?: Date | string
    bookmark?: bookmarkCreateNestedManyWithoutUserInput
    comment?: commentCreateNestedManyWithoutUserInput
    notification?: notificationCreateNestedManyWithoutUserInput
    rating?: ratingCreateNestedManyWithoutUserInput
    reportcontent?: reportcontentCreateNestedManyWithoutUserInput
    watchhistory?: watchhistoryCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutSearchlogInput = {
    id?: number
    email: string
    password: string
    role?: $Enums.user_role
    created_at?: Date | string
    bookmark?: bookmarkUncheckedCreateNestedManyWithoutUserInput
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
    notification?: notificationUncheckedCreateNestedManyWithoutUserInput
    rating?: ratingUncheckedCreateNestedManyWithoutUserInput
    reportcontent?: reportcontentUncheckedCreateNestedManyWithoutUserInput
    watchhistory?: watchhistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutSearchlogInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutSearchlogInput, userUncheckedCreateWithoutSearchlogInput>
  }

  export type userUpsertWithoutSearchlogInput = {
    update: XOR<userUpdateWithoutSearchlogInput, userUncheckedUpdateWithoutSearchlogInput>
    create: XOR<userCreateWithoutSearchlogInput, userUncheckedCreateWithoutSearchlogInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutSearchlogInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutSearchlogInput, userUncheckedUpdateWithoutSearchlogInput>
  }

  export type userUpdateWithoutSearchlogInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | $Enums.user_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    bookmark?: bookmarkUpdateManyWithoutUserNestedInput
    comment?: commentUpdateManyWithoutUserNestedInput
    notification?: notificationUpdateManyWithoutUserNestedInput
    rating?: ratingUpdateManyWithoutUserNestedInput
    reportcontent?: reportcontentUpdateManyWithoutUserNestedInput
    watchhistory?: watchhistoryUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutSearchlogInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | $Enums.user_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    bookmark?: bookmarkUncheckedUpdateManyWithoutUserNestedInput
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
    notification?: notificationUncheckedUpdateManyWithoutUserNestedInput
    rating?: ratingUncheckedUpdateManyWithoutUserNestedInput
    reportcontent?: reportcontentUncheckedUpdateManyWithoutUserNestedInput
    watchhistory?: watchhistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type contentCreateWithoutSeasonInput = {
    title: string
    slug: string
    title_english?: string | null
    title_japanese?: string | null
    description?: string | null
    type: $Enums.content_type
    release_year?: number | null
    season_name?: $Enums.content_season_name | null
    studios?: string | null
    actor?: string | null
    score?: number | null
    thumbnail_url?: string | null
    backdrop_url?: string | null
    video_url?: string | null
    created_at?: Date | string
    duration_minutes?: number | null
    num_seasons?: number | null
    num_episodes?: number | null
    bookmark?: bookmarkCreateNestedManyWithoutContentInput
    comment?: commentCreateNestedManyWithoutContentInput
    contentgenre?: contentgenreCreateNestedManyWithoutContentInput
    episode?: episodeCreateNestedManyWithoutContentInput
    rating?: ratingCreateNestedManyWithoutContentInput
    reportcontent?: reportcontentCreateNestedManyWithoutContentInput
    subtitle?: subtitleCreateNestedManyWithoutContentInput
    trendingcontent?: trendingcontentCreateNestedManyWithoutContentInput
    watchhistory?: watchhistoryCreateNestedManyWithoutContentInput
  }

  export type contentUncheckedCreateWithoutSeasonInput = {
    id?: number
    title: string
    slug: string
    title_english?: string | null
    title_japanese?: string | null
    description?: string | null
    type: $Enums.content_type
    release_year?: number | null
    season_name?: $Enums.content_season_name | null
    studios?: string | null
    actor?: string | null
    score?: number | null
    thumbnail_url?: string | null
    backdrop_url?: string | null
    video_url?: string | null
    created_at?: Date | string
    duration_minutes?: number | null
    num_seasons?: number | null
    num_episodes?: number | null
    bookmark?: bookmarkUncheckedCreateNestedManyWithoutContentInput
    comment?: commentUncheckedCreateNestedManyWithoutContentInput
    contentgenre?: contentgenreUncheckedCreateNestedManyWithoutContentInput
    episode?: episodeUncheckedCreateNestedManyWithoutContentInput
    rating?: ratingUncheckedCreateNestedManyWithoutContentInput
    reportcontent?: reportcontentUncheckedCreateNestedManyWithoutContentInput
    subtitle?: subtitleUncheckedCreateNestedManyWithoutContentInput
    trendingcontent?: trendingcontentUncheckedCreateNestedManyWithoutContentInput
    watchhistory?: watchhistoryUncheckedCreateNestedManyWithoutContentInput
  }

  export type contentCreateOrConnectWithoutSeasonInput = {
    where: contentWhereUniqueInput
    create: XOR<contentCreateWithoutSeasonInput, contentUncheckedCreateWithoutSeasonInput>
  }

  export type contentUpsertWithoutSeasonInput = {
    update: XOR<contentUpdateWithoutSeasonInput, contentUncheckedUpdateWithoutSeasonInput>
    create: XOR<contentCreateWithoutSeasonInput, contentUncheckedCreateWithoutSeasonInput>
    where?: contentWhereInput
  }

  export type contentUpdateToOneWithWhereWithoutSeasonInput = {
    where?: contentWhereInput
    data: XOR<contentUpdateWithoutSeasonInput, contentUncheckedUpdateWithoutSeasonInput>
  }

  export type contentUpdateWithoutSeasonInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title_english?: NullableStringFieldUpdateOperationsInput | string | null
    title_japanese?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enumcontent_typeFieldUpdateOperationsInput | $Enums.content_type
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    season_name?: NullableEnumcontent_season_nameFieldUpdateOperationsInput | $Enums.content_season_name | null
    studios?: NullableStringFieldUpdateOperationsInput | string | null
    actor?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    backdrop_url?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration_minutes?: NullableIntFieldUpdateOperationsInput | number | null
    num_seasons?: NullableIntFieldUpdateOperationsInput | number | null
    num_episodes?: NullableIntFieldUpdateOperationsInput | number | null
    bookmark?: bookmarkUpdateManyWithoutContentNestedInput
    comment?: commentUpdateManyWithoutContentNestedInput
    contentgenre?: contentgenreUpdateManyWithoutContentNestedInput
    episode?: episodeUpdateManyWithoutContentNestedInput
    rating?: ratingUpdateManyWithoutContentNestedInput
    reportcontent?: reportcontentUpdateManyWithoutContentNestedInput
    subtitle?: subtitleUpdateManyWithoutContentNestedInput
    trendingcontent?: trendingcontentUpdateManyWithoutContentNestedInput
    watchhistory?: watchhistoryUpdateManyWithoutContentNestedInput
  }

  export type contentUncheckedUpdateWithoutSeasonInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title_english?: NullableStringFieldUpdateOperationsInput | string | null
    title_japanese?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enumcontent_typeFieldUpdateOperationsInput | $Enums.content_type
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    season_name?: NullableEnumcontent_season_nameFieldUpdateOperationsInput | $Enums.content_season_name | null
    studios?: NullableStringFieldUpdateOperationsInput | string | null
    actor?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    backdrop_url?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration_minutes?: NullableIntFieldUpdateOperationsInput | number | null
    num_seasons?: NullableIntFieldUpdateOperationsInput | number | null
    num_episodes?: NullableIntFieldUpdateOperationsInput | number | null
    bookmark?: bookmarkUncheckedUpdateManyWithoutContentNestedInput
    comment?: commentUncheckedUpdateManyWithoutContentNestedInput
    contentgenre?: contentgenreUncheckedUpdateManyWithoutContentNestedInput
    episode?: episodeUncheckedUpdateManyWithoutContentNestedInput
    rating?: ratingUncheckedUpdateManyWithoutContentNestedInput
    reportcontent?: reportcontentUncheckedUpdateManyWithoutContentNestedInput
    subtitle?: subtitleUncheckedUpdateManyWithoutContentNestedInput
    trendingcontent?: trendingcontentUncheckedUpdateManyWithoutContentNestedInput
    watchhistory?: watchhistoryUncheckedUpdateManyWithoutContentNestedInput
  }

  export type contentCreateWithoutSubtitleInput = {
    title: string
    slug: string
    title_english?: string | null
    title_japanese?: string | null
    description?: string | null
    type: $Enums.content_type
    release_year?: number | null
    season_name?: $Enums.content_season_name | null
    studios?: string | null
    actor?: string | null
    score?: number | null
    thumbnail_url?: string | null
    backdrop_url?: string | null
    video_url?: string | null
    created_at?: Date | string
    duration_minutes?: number | null
    num_seasons?: number | null
    num_episodes?: number | null
    bookmark?: bookmarkCreateNestedManyWithoutContentInput
    comment?: commentCreateNestedManyWithoutContentInput
    contentgenre?: contentgenreCreateNestedManyWithoutContentInput
    episode?: episodeCreateNestedManyWithoutContentInput
    rating?: ratingCreateNestedManyWithoutContentInput
    reportcontent?: reportcontentCreateNestedManyWithoutContentInput
    season?: seasonCreateNestedManyWithoutContentInput
    trendingcontent?: trendingcontentCreateNestedManyWithoutContentInput
    watchhistory?: watchhistoryCreateNestedManyWithoutContentInput
  }

  export type contentUncheckedCreateWithoutSubtitleInput = {
    id?: number
    title: string
    slug: string
    title_english?: string | null
    title_japanese?: string | null
    description?: string | null
    type: $Enums.content_type
    release_year?: number | null
    season_name?: $Enums.content_season_name | null
    studios?: string | null
    actor?: string | null
    score?: number | null
    thumbnail_url?: string | null
    backdrop_url?: string | null
    video_url?: string | null
    created_at?: Date | string
    duration_minutes?: number | null
    num_seasons?: number | null
    num_episodes?: number | null
    bookmark?: bookmarkUncheckedCreateNestedManyWithoutContentInput
    comment?: commentUncheckedCreateNestedManyWithoutContentInput
    contentgenre?: contentgenreUncheckedCreateNestedManyWithoutContentInput
    episode?: episodeUncheckedCreateNestedManyWithoutContentInput
    rating?: ratingUncheckedCreateNestedManyWithoutContentInput
    reportcontent?: reportcontentUncheckedCreateNestedManyWithoutContentInput
    season?: seasonUncheckedCreateNestedManyWithoutContentInput
    trendingcontent?: trendingcontentUncheckedCreateNestedManyWithoutContentInput
    watchhistory?: watchhistoryUncheckedCreateNestedManyWithoutContentInput
  }

  export type contentCreateOrConnectWithoutSubtitleInput = {
    where: contentWhereUniqueInput
    create: XOR<contentCreateWithoutSubtitleInput, contentUncheckedCreateWithoutSubtitleInput>
  }

  export type episodeCreateWithoutSubtitleInput = {
    season: number
    episode_number: number
    title?: string | null
    created_at?: Date | string
    comment?: commentCreateNestedManyWithoutEpisodeInput
    content: contentCreateNestedOneWithoutEpisodeInput
    episodesource?: episodesourceCreateNestedManyWithoutEpisodeInput
    reportcontent?: reportcontentCreateNestedManyWithoutEpisodeInput
    watchhistory?: watchhistoryCreateNestedManyWithoutEpisodeInput
  }

  export type episodeUncheckedCreateWithoutSubtitleInput = {
    id?: number
    content_id: number
    season: number
    episode_number: number
    title?: string | null
    created_at?: Date | string
    comment?: commentUncheckedCreateNestedManyWithoutEpisodeInput
    episodesource?: episodesourceUncheckedCreateNestedManyWithoutEpisodeInput
    reportcontent?: reportcontentUncheckedCreateNestedManyWithoutEpisodeInput
    watchhistory?: watchhistoryUncheckedCreateNestedManyWithoutEpisodeInput
  }

  export type episodeCreateOrConnectWithoutSubtitleInput = {
    where: episodeWhereUniqueInput
    create: XOR<episodeCreateWithoutSubtitleInput, episodeUncheckedCreateWithoutSubtitleInput>
  }

  export type contentUpsertWithoutSubtitleInput = {
    update: XOR<contentUpdateWithoutSubtitleInput, contentUncheckedUpdateWithoutSubtitleInput>
    create: XOR<contentCreateWithoutSubtitleInput, contentUncheckedCreateWithoutSubtitleInput>
    where?: contentWhereInput
  }

  export type contentUpdateToOneWithWhereWithoutSubtitleInput = {
    where?: contentWhereInput
    data: XOR<contentUpdateWithoutSubtitleInput, contentUncheckedUpdateWithoutSubtitleInput>
  }

  export type contentUpdateWithoutSubtitleInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title_english?: NullableStringFieldUpdateOperationsInput | string | null
    title_japanese?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enumcontent_typeFieldUpdateOperationsInput | $Enums.content_type
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    season_name?: NullableEnumcontent_season_nameFieldUpdateOperationsInput | $Enums.content_season_name | null
    studios?: NullableStringFieldUpdateOperationsInput | string | null
    actor?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    backdrop_url?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration_minutes?: NullableIntFieldUpdateOperationsInput | number | null
    num_seasons?: NullableIntFieldUpdateOperationsInput | number | null
    num_episodes?: NullableIntFieldUpdateOperationsInput | number | null
    bookmark?: bookmarkUpdateManyWithoutContentNestedInput
    comment?: commentUpdateManyWithoutContentNestedInput
    contentgenre?: contentgenreUpdateManyWithoutContentNestedInput
    episode?: episodeUpdateManyWithoutContentNestedInput
    rating?: ratingUpdateManyWithoutContentNestedInput
    reportcontent?: reportcontentUpdateManyWithoutContentNestedInput
    season?: seasonUpdateManyWithoutContentNestedInput
    trendingcontent?: trendingcontentUpdateManyWithoutContentNestedInput
    watchhistory?: watchhistoryUpdateManyWithoutContentNestedInput
  }

  export type contentUncheckedUpdateWithoutSubtitleInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title_english?: NullableStringFieldUpdateOperationsInput | string | null
    title_japanese?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enumcontent_typeFieldUpdateOperationsInput | $Enums.content_type
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    season_name?: NullableEnumcontent_season_nameFieldUpdateOperationsInput | $Enums.content_season_name | null
    studios?: NullableStringFieldUpdateOperationsInput | string | null
    actor?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    backdrop_url?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration_minutes?: NullableIntFieldUpdateOperationsInput | number | null
    num_seasons?: NullableIntFieldUpdateOperationsInput | number | null
    num_episodes?: NullableIntFieldUpdateOperationsInput | number | null
    bookmark?: bookmarkUncheckedUpdateManyWithoutContentNestedInput
    comment?: commentUncheckedUpdateManyWithoutContentNestedInput
    contentgenre?: contentgenreUncheckedUpdateManyWithoutContentNestedInput
    episode?: episodeUncheckedUpdateManyWithoutContentNestedInput
    rating?: ratingUncheckedUpdateManyWithoutContentNestedInput
    reportcontent?: reportcontentUncheckedUpdateManyWithoutContentNestedInput
    season?: seasonUncheckedUpdateManyWithoutContentNestedInput
    trendingcontent?: trendingcontentUncheckedUpdateManyWithoutContentNestedInput
    watchhistory?: watchhistoryUncheckedUpdateManyWithoutContentNestedInput
  }

  export type episodeUpsertWithoutSubtitleInput = {
    update: XOR<episodeUpdateWithoutSubtitleInput, episodeUncheckedUpdateWithoutSubtitleInput>
    create: XOR<episodeCreateWithoutSubtitleInput, episodeUncheckedCreateWithoutSubtitleInput>
    where?: episodeWhereInput
  }

  export type episodeUpdateToOneWithWhereWithoutSubtitleInput = {
    where?: episodeWhereInput
    data: XOR<episodeUpdateWithoutSubtitleInput, episodeUncheckedUpdateWithoutSubtitleInput>
  }

  export type episodeUpdateWithoutSubtitleInput = {
    season?: IntFieldUpdateOperationsInput | number
    episode_number?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: commentUpdateManyWithoutEpisodeNestedInput
    content?: contentUpdateOneRequiredWithoutEpisodeNestedInput
    episodesource?: episodesourceUpdateManyWithoutEpisodeNestedInput
    reportcontent?: reportcontentUpdateManyWithoutEpisodeNestedInput
    watchhistory?: watchhistoryUpdateManyWithoutEpisodeNestedInput
  }

  export type episodeUncheckedUpdateWithoutSubtitleInput = {
    id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    season?: IntFieldUpdateOperationsInput | number
    episode_number?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: commentUncheckedUpdateManyWithoutEpisodeNestedInput
    episodesource?: episodesourceUncheckedUpdateManyWithoutEpisodeNestedInput
    reportcontent?: reportcontentUncheckedUpdateManyWithoutEpisodeNestedInput
    watchhistory?: watchhistoryUncheckedUpdateManyWithoutEpisodeNestedInput
  }

  export type contentCreateWithoutTrendingcontentInput = {
    title: string
    slug: string
    title_english?: string | null
    title_japanese?: string | null
    description?: string | null
    type: $Enums.content_type
    release_year?: number | null
    season_name?: $Enums.content_season_name | null
    studios?: string | null
    actor?: string | null
    score?: number | null
    thumbnail_url?: string | null
    backdrop_url?: string | null
    video_url?: string | null
    created_at?: Date | string
    duration_minutes?: number | null
    num_seasons?: number | null
    num_episodes?: number | null
    bookmark?: bookmarkCreateNestedManyWithoutContentInput
    comment?: commentCreateNestedManyWithoutContentInput
    contentgenre?: contentgenreCreateNestedManyWithoutContentInput
    episode?: episodeCreateNestedManyWithoutContentInput
    rating?: ratingCreateNestedManyWithoutContentInput
    reportcontent?: reportcontentCreateNestedManyWithoutContentInput
    season?: seasonCreateNestedManyWithoutContentInput
    subtitle?: subtitleCreateNestedManyWithoutContentInput
    watchhistory?: watchhistoryCreateNestedManyWithoutContentInput
  }

  export type contentUncheckedCreateWithoutTrendingcontentInput = {
    id?: number
    title: string
    slug: string
    title_english?: string | null
    title_japanese?: string | null
    description?: string | null
    type: $Enums.content_type
    release_year?: number | null
    season_name?: $Enums.content_season_name | null
    studios?: string | null
    actor?: string | null
    score?: number | null
    thumbnail_url?: string | null
    backdrop_url?: string | null
    video_url?: string | null
    created_at?: Date | string
    duration_minutes?: number | null
    num_seasons?: number | null
    num_episodes?: number | null
    bookmark?: bookmarkUncheckedCreateNestedManyWithoutContentInput
    comment?: commentUncheckedCreateNestedManyWithoutContentInput
    contentgenre?: contentgenreUncheckedCreateNestedManyWithoutContentInput
    episode?: episodeUncheckedCreateNestedManyWithoutContentInput
    rating?: ratingUncheckedCreateNestedManyWithoutContentInput
    reportcontent?: reportcontentUncheckedCreateNestedManyWithoutContentInput
    season?: seasonUncheckedCreateNestedManyWithoutContentInput
    subtitle?: subtitleUncheckedCreateNestedManyWithoutContentInput
    watchhistory?: watchhistoryUncheckedCreateNestedManyWithoutContentInput
  }

  export type contentCreateOrConnectWithoutTrendingcontentInput = {
    where: contentWhereUniqueInput
    create: XOR<contentCreateWithoutTrendingcontentInput, contentUncheckedCreateWithoutTrendingcontentInput>
  }

  export type contentUpsertWithoutTrendingcontentInput = {
    update: XOR<contentUpdateWithoutTrendingcontentInput, contentUncheckedUpdateWithoutTrendingcontentInput>
    create: XOR<contentCreateWithoutTrendingcontentInput, contentUncheckedCreateWithoutTrendingcontentInput>
    where?: contentWhereInput
  }

  export type contentUpdateToOneWithWhereWithoutTrendingcontentInput = {
    where?: contentWhereInput
    data: XOR<contentUpdateWithoutTrendingcontentInput, contentUncheckedUpdateWithoutTrendingcontentInput>
  }

  export type contentUpdateWithoutTrendingcontentInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title_english?: NullableStringFieldUpdateOperationsInput | string | null
    title_japanese?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enumcontent_typeFieldUpdateOperationsInput | $Enums.content_type
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    season_name?: NullableEnumcontent_season_nameFieldUpdateOperationsInput | $Enums.content_season_name | null
    studios?: NullableStringFieldUpdateOperationsInput | string | null
    actor?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    backdrop_url?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration_minutes?: NullableIntFieldUpdateOperationsInput | number | null
    num_seasons?: NullableIntFieldUpdateOperationsInput | number | null
    num_episodes?: NullableIntFieldUpdateOperationsInput | number | null
    bookmark?: bookmarkUpdateManyWithoutContentNestedInput
    comment?: commentUpdateManyWithoutContentNestedInput
    contentgenre?: contentgenreUpdateManyWithoutContentNestedInput
    episode?: episodeUpdateManyWithoutContentNestedInput
    rating?: ratingUpdateManyWithoutContentNestedInput
    reportcontent?: reportcontentUpdateManyWithoutContentNestedInput
    season?: seasonUpdateManyWithoutContentNestedInput
    subtitle?: subtitleUpdateManyWithoutContentNestedInput
    watchhistory?: watchhistoryUpdateManyWithoutContentNestedInput
  }

  export type contentUncheckedUpdateWithoutTrendingcontentInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title_english?: NullableStringFieldUpdateOperationsInput | string | null
    title_japanese?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enumcontent_typeFieldUpdateOperationsInput | $Enums.content_type
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    season_name?: NullableEnumcontent_season_nameFieldUpdateOperationsInput | $Enums.content_season_name | null
    studios?: NullableStringFieldUpdateOperationsInput | string | null
    actor?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    backdrop_url?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration_minutes?: NullableIntFieldUpdateOperationsInput | number | null
    num_seasons?: NullableIntFieldUpdateOperationsInput | number | null
    num_episodes?: NullableIntFieldUpdateOperationsInput | number | null
    bookmark?: bookmarkUncheckedUpdateManyWithoutContentNestedInput
    comment?: commentUncheckedUpdateManyWithoutContentNestedInput
    contentgenre?: contentgenreUncheckedUpdateManyWithoutContentNestedInput
    episode?: episodeUncheckedUpdateManyWithoutContentNestedInput
    rating?: ratingUncheckedUpdateManyWithoutContentNestedInput
    reportcontent?: reportcontentUncheckedUpdateManyWithoutContentNestedInput
    season?: seasonUncheckedUpdateManyWithoutContentNestedInput
    subtitle?: subtitleUncheckedUpdateManyWithoutContentNestedInput
    watchhistory?: watchhistoryUncheckedUpdateManyWithoutContentNestedInput
  }

  export type bookmarkCreateWithoutUserInput = {
    created_at?: Date | string
    content: contentCreateNestedOneWithoutBookmarkInput
  }

  export type bookmarkUncheckedCreateWithoutUserInput = {
    id?: number
    content_id: number
    created_at?: Date | string
  }

  export type bookmarkCreateOrConnectWithoutUserInput = {
    where: bookmarkWhereUniqueInput
    create: XOR<bookmarkCreateWithoutUserInput, bookmarkUncheckedCreateWithoutUserInput>
  }

  export type bookmarkCreateManyUserInputEnvelope = {
    data: bookmarkCreateManyUserInput | bookmarkCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type commentCreateWithoutUserInput = {
    comment: string
    created_at?: Date | string
    content: contentCreateNestedOneWithoutCommentInput
    episode: episodeCreateNestedOneWithoutCommentInput
  }

  export type commentUncheckedCreateWithoutUserInput = {
    id?: number
    content_id: number
    episode_id: number
    comment: string
    created_at?: Date | string
  }

  export type commentCreateOrConnectWithoutUserInput = {
    where: commentWhereUniqueInput
    create: XOR<commentCreateWithoutUserInput, commentUncheckedCreateWithoutUserInput>
  }

  export type commentCreateManyUserInputEnvelope = {
    data: commentCreateManyUserInput | commentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type notificationCreateWithoutUserInput = {
    type: $Enums.notification_type
    message: string
    is_read?: boolean
    created_at?: Date | string
  }

  export type notificationUncheckedCreateWithoutUserInput = {
    id?: number
    type: $Enums.notification_type
    message: string
    is_read?: boolean
    created_at?: Date | string
  }

  export type notificationCreateOrConnectWithoutUserInput = {
    where: notificationWhereUniqueInput
    create: XOR<notificationCreateWithoutUserInput, notificationUncheckedCreateWithoutUserInput>
  }

  export type notificationCreateManyUserInputEnvelope = {
    data: notificationCreateManyUserInput | notificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ratingCreateWithoutUserInput = {
    rating: number
    comment?: string | null
    created_at?: Date | string
    content: contentCreateNestedOneWithoutRatingInput
  }

  export type ratingUncheckedCreateWithoutUserInput = {
    id?: number
    content_id: number
    rating: number
    comment?: string | null
    created_at?: Date | string
  }

  export type ratingCreateOrConnectWithoutUserInput = {
    where: ratingWhereUniqueInput
    create: XOR<ratingCreateWithoutUserInput, ratingUncheckedCreateWithoutUserInput>
  }

  export type ratingCreateManyUserInputEnvelope = {
    data: ratingCreateManyUserInput | ratingCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type reportcontentCreateWithoutUserInput = {
    reason: string
    created_at?: Date | string
    content: contentCreateNestedOneWithoutReportcontentInput
    episode: episodeCreateNestedOneWithoutReportcontentInput
  }

  export type reportcontentUncheckedCreateWithoutUserInput = {
    id?: number
    content_id: number
    episode_id: number
    reason: string
    created_at?: Date | string
  }

  export type reportcontentCreateOrConnectWithoutUserInput = {
    where: reportcontentWhereUniqueInput
    create: XOR<reportcontentCreateWithoutUserInput, reportcontentUncheckedCreateWithoutUserInput>
  }

  export type reportcontentCreateManyUserInputEnvelope = {
    data: reportcontentCreateManyUserInput | reportcontentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type searchlogCreateWithoutUserInput = {
    keyword: string
    searched_at?: Date | string
  }

  export type searchlogUncheckedCreateWithoutUserInput = {
    id?: number
    keyword: string
    searched_at?: Date | string
  }

  export type searchlogCreateOrConnectWithoutUserInput = {
    where: searchlogWhereUniqueInput
    create: XOR<searchlogCreateWithoutUserInput, searchlogUncheckedCreateWithoutUserInput>
  }

  export type searchlogCreateManyUserInputEnvelope = {
    data: searchlogCreateManyUserInput | searchlogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type watchhistoryCreateWithoutUserInput = {
    last_watch_seconds: number
    updated_at?: Date | string
    content: contentCreateNestedOneWithoutWatchhistoryInput
    episode: episodeCreateNestedOneWithoutWatchhistoryInput
  }

  export type watchhistoryUncheckedCreateWithoutUserInput = {
    id?: number
    content_id: number
    episode_id: number
    last_watch_seconds: number
    updated_at?: Date | string
  }

  export type watchhistoryCreateOrConnectWithoutUserInput = {
    where: watchhistoryWhereUniqueInput
    create: XOR<watchhistoryCreateWithoutUserInput, watchhistoryUncheckedCreateWithoutUserInput>
  }

  export type watchhistoryCreateManyUserInputEnvelope = {
    data: watchhistoryCreateManyUserInput | watchhistoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type bookmarkUpsertWithWhereUniqueWithoutUserInput = {
    where: bookmarkWhereUniqueInput
    update: XOR<bookmarkUpdateWithoutUserInput, bookmarkUncheckedUpdateWithoutUserInput>
    create: XOR<bookmarkCreateWithoutUserInput, bookmarkUncheckedCreateWithoutUserInput>
  }

  export type bookmarkUpdateWithWhereUniqueWithoutUserInput = {
    where: bookmarkWhereUniqueInput
    data: XOR<bookmarkUpdateWithoutUserInput, bookmarkUncheckedUpdateWithoutUserInput>
  }

  export type bookmarkUpdateManyWithWhereWithoutUserInput = {
    where: bookmarkScalarWhereInput
    data: XOR<bookmarkUpdateManyMutationInput, bookmarkUncheckedUpdateManyWithoutUserInput>
  }

  export type commentUpsertWithWhereUniqueWithoutUserInput = {
    where: commentWhereUniqueInput
    update: XOR<commentUpdateWithoutUserInput, commentUncheckedUpdateWithoutUserInput>
    create: XOR<commentCreateWithoutUserInput, commentUncheckedCreateWithoutUserInput>
  }

  export type commentUpdateWithWhereUniqueWithoutUserInput = {
    where: commentWhereUniqueInput
    data: XOR<commentUpdateWithoutUserInput, commentUncheckedUpdateWithoutUserInput>
  }

  export type commentUpdateManyWithWhereWithoutUserInput = {
    where: commentScalarWhereInput
    data: XOR<commentUpdateManyMutationInput, commentUncheckedUpdateManyWithoutUserInput>
  }

  export type notificationUpsertWithWhereUniqueWithoutUserInput = {
    where: notificationWhereUniqueInput
    update: XOR<notificationUpdateWithoutUserInput, notificationUncheckedUpdateWithoutUserInput>
    create: XOR<notificationCreateWithoutUserInput, notificationUncheckedCreateWithoutUserInput>
  }

  export type notificationUpdateWithWhereUniqueWithoutUserInput = {
    where: notificationWhereUniqueInput
    data: XOR<notificationUpdateWithoutUserInput, notificationUncheckedUpdateWithoutUserInput>
  }

  export type notificationUpdateManyWithWhereWithoutUserInput = {
    where: notificationScalarWhereInput
    data: XOR<notificationUpdateManyMutationInput, notificationUncheckedUpdateManyWithoutUserInput>
  }

  export type notificationScalarWhereInput = {
    AND?: notificationScalarWhereInput | notificationScalarWhereInput[]
    OR?: notificationScalarWhereInput[]
    NOT?: notificationScalarWhereInput | notificationScalarWhereInput[]
    id?: IntFilter<"notification"> | number
    user_id?: IntFilter<"notification"> | number
    type?: Enumnotification_typeFilter<"notification"> | $Enums.notification_type
    message?: StringFilter<"notification"> | string
    is_read?: BoolFilter<"notification"> | boolean
    created_at?: DateTimeFilter<"notification"> | Date | string
  }

  export type ratingUpsertWithWhereUniqueWithoutUserInput = {
    where: ratingWhereUniqueInput
    update: XOR<ratingUpdateWithoutUserInput, ratingUncheckedUpdateWithoutUserInput>
    create: XOR<ratingCreateWithoutUserInput, ratingUncheckedCreateWithoutUserInput>
  }

  export type ratingUpdateWithWhereUniqueWithoutUserInput = {
    where: ratingWhereUniqueInput
    data: XOR<ratingUpdateWithoutUserInput, ratingUncheckedUpdateWithoutUserInput>
  }

  export type ratingUpdateManyWithWhereWithoutUserInput = {
    where: ratingScalarWhereInput
    data: XOR<ratingUpdateManyMutationInput, ratingUncheckedUpdateManyWithoutUserInput>
  }

  export type reportcontentUpsertWithWhereUniqueWithoutUserInput = {
    where: reportcontentWhereUniqueInput
    update: XOR<reportcontentUpdateWithoutUserInput, reportcontentUncheckedUpdateWithoutUserInput>
    create: XOR<reportcontentCreateWithoutUserInput, reportcontentUncheckedCreateWithoutUserInput>
  }

  export type reportcontentUpdateWithWhereUniqueWithoutUserInput = {
    where: reportcontentWhereUniqueInput
    data: XOR<reportcontentUpdateWithoutUserInput, reportcontentUncheckedUpdateWithoutUserInput>
  }

  export type reportcontentUpdateManyWithWhereWithoutUserInput = {
    where: reportcontentScalarWhereInput
    data: XOR<reportcontentUpdateManyMutationInput, reportcontentUncheckedUpdateManyWithoutUserInput>
  }

  export type searchlogUpsertWithWhereUniqueWithoutUserInput = {
    where: searchlogWhereUniqueInput
    update: XOR<searchlogUpdateWithoutUserInput, searchlogUncheckedUpdateWithoutUserInput>
    create: XOR<searchlogCreateWithoutUserInput, searchlogUncheckedCreateWithoutUserInput>
  }

  export type searchlogUpdateWithWhereUniqueWithoutUserInput = {
    where: searchlogWhereUniqueInput
    data: XOR<searchlogUpdateWithoutUserInput, searchlogUncheckedUpdateWithoutUserInput>
  }

  export type searchlogUpdateManyWithWhereWithoutUserInput = {
    where: searchlogScalarWhereInput
    data: XOR<searchlogUpdateManyMutationInput, searchlogUncheckedUpdateManyWithoutUserInput>
  }

  export type searchlogScalarWhereInput = {
    AND?: searchlogScalarWhereInput | searchlogScalarWhereInput[]
    OR?: searchlogScalarWhereInput[]
    NOT?: searchlogScalarWhereInput | searchlogScalarWhereInput[]
    id?: IntFilter<"searchlog"> | number
    user_id?: IntFilter<"searchlog"> | number
    keyword?: StringFilter<"searchlog"> | string
    searched_at?: DateTimeFilter<"searchlog"> | Date | string
  }

  export type watchhistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: watchhistoryWhereUniqueInput
    update: XOR<watchhistoryUpdateWithoutUserInput, watchhistoryUncheckedUpdateWithoutUserInput>
    create: XOR<watchhistoryCreateWithoutUserInput, watchhistoryUncheckedCreateWithoutUserInput>
  }

  export type watchhistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: watchhistoryWhereUniqueInput
    data: XOR<watchhistoryUpdateWithoutUserInput, watchhistoryUncheckedUpdateWithoutUserInput>
  }

  export type watchhistoryUpdateManyWithWhereWithoutUserInput = {
    where: watchhistoryScalarWhereInput
    data: XOR<watchhistoryUpdateManyMutationInput, watchhistoryUncheckedUpdateManyWithoutUserInput>
  }

  export type contentCreateWithoutWatchhistoryInput = {
    title: string
    slug: string
    title_english?: string | null
    title_japanese?: string | null
    description?: string | null
    type: $Enums.content_type
    release_year?: number | null
    season_name?: $Enums.content_season_name | null
    studios?: string | null
    actor?: string | null
    score?: number | null
    thumbnail_url?: string | null
    backdrop_url?: string | null
    video_url?: string | null
    created_at?: Date | string
    duration_minutes?: number | null
    num_seasons?: number | null
    num_episodes?: number | null
    bookmark?: bookmarkCreateNestedManyWithoutContentInput
    comment?: commentCreateNestedManyWithoutContentInput
    contentgenre?: contentgenreCreateNestedManyWithoutContentInput
    episode?: episodeCreateNestedManyWithoutContentInput
    rating?: ratingCreateNestedManyWithoutContentInput
    reportcontent?: reportcontentCreateNestedManyWithoutContentInput
    season?: seasonCreateNestedManyWithoutContentInput
    subtitle?: subtitleCreateNestedManyWithoutContentInput
    trendingcontent?: trendingcontentCreateNestedManyWithoutContentInput
  }

  export type contentUncheckedCreateWithoutWatchhistoryInput = {
    id?: number
    title: string
    slug: string
    title_english?: string | null
    title_japanese?: string | null
    description?: string | null
    type: $Enums.content_type
    release_year?: number | null
    season_name?: $Enums.content_season_name | null
    studios?: string | null
    actor?: string | null
    score?: number | null
    thumbnail_url?: string | null
    backdrop_url?: string | null
    video_url?: string | null
    created_at?: Date | string
    duration_minutes?: number | null
    num_seasons?: number | null
    num_episodes?: number | null
    bookmark?: bookmarkUncheckedCreateNestedManyWithoutContentInput
    comment?: commentUncheckedCreateNestedManyWithoutContentInput
    contentgenre?: contentgenreUncheckedCreateNestedManyWithoutContentInput
    episode?: episodeUncheckedCreateNestedManyWithoutContentInput
    rating?: ratingUncheckedCreateNestedManyWithoutContentInput
    reportcontent?: reportcontentUncheckedCreateNestedManyWithoutContentInput
    season?: seasonUncheckedCreateNestedManyWithoutContentInput
    subtitle?: subtitleUncheckedCreateNestedManyWithoutContentInput
    trendingcontent?: trendingcontentUncheckedCreateNestedManyWithoutContentInput
  }

  export type contentCreateOrConnectWithoutWatchhistoryInput = {
    where: contentWhereUniqueInput
    create: XOR<contentCreateWithoutWatchhistoryInput, contentUncheckedCreateWithoutWatchhistoryInput>
  }

  export type episodeCreateWithoutWatchhistoryInput = {
    season: number
    episode_number: number
    title?: string | null
    created_at?: Date | string
    comment?: commentCreateNestedManyWithoutEpisodeInput
    content: contentCreateNestedOneWithoutEpisodeInput
    episodesource?: episodesourceCreateNestedManyWithoutEpisodeInput
    reportcontent?: reportcontentCreateNestedManyWithoutEpisodeInput
    subtitle?: subtitleCreateNestedManyWithoutEpisodeInput
  }

  export type episodeUncheckedCreateWithoutWatchhistoryInput = {
    id?: number
    content_id: number
    season: number
    episode_number: number
    title?: string | null
    created_at?: Date | string
    comment?: commentUncheckedCreateNestedManyWithoutEpisodeInput
    episodesource?: episodesourceUncheckedCreateNestedManyWithoutEpisodeInput
    reportcontent?: reportcontentUncheckedCreateNestedManyWithoutEpisodeInput
    subtitle?: subtitleUncheckedCreateNestedManyWithoutEpisodeInput
  }

  export type episodeCreateOrConnectWithoutWatchhistoryInput = {
    where: episodeWhereUniqueInput
    create: XOR<episodeCreateWithoutWatchhistoryInput, episodeUncheckedCreateWithoutWatchhistoryInput>
  }

  export type userCreateWithoutWatchhistoryInput = {
    email: string
    password: string
    role?: $Enums.user_role
    created_at?: Date | string
    bookmark?: bookmarkCreateNestedManyWithoutUserInput
    comment?: commentCreateNestedManyWithoutUserInput
    notification?: notificationCreateNestedManyWithoutUserInput
    rating?: ratingCreateNestedManyWithoutUserInput
    reportcontent?: reportcontentCreateNestedManyWithoutUserInput
    searchlog?: searchlogCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutWatchhistoryInput = {
    id?: number
    email: string
    password: string
    role?: $Enums.user_role
    created_at?: Date | string
    bookmark?: bookmarkUncheckedCreateNestedManyWithoutUserInput
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
    notification?: notificationUncheckedCreateNestedManyWithoutUserInput
    rating?: ratingUncheckedCreateNestedManyWithoutUserInput
    reportcontent?: reportcontentUncheckedCreateNestedManyWithoutUserInput
    searchlog?: searchlogUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutWatchhistoryInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutWatchhistoryInput, userUncheckedCreateWithoutWatchhistoryInput>
  }

  export type contentUpsertWithoutWatchhistoryInput = {
    update: XOR<contentUpdateWithoutWatchhistoryInput, contentUncheckedUpdateWithoutWatchhistoryInput>
    create: XOR<contentCreateWithoutWatchhistoryInput, contentUncheckedCreateWithoutWatchhistoryInput>
    where?: contentWhereInput
  }

  export type contentUpdateToOneWithWhereWithoutWatchhistoryInput = {
    where?: contentWhereInput
    data: XOR<contentUpdateWithoutWatchhistoryInput, contentUncheckedUpdateWithoutWatchhistoryInput>
  }

  export type contentUpdateWithoutWatchhistoryInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title_english?: NullableStringFieldUpdateOperationsInput | string | null
    title_japanese?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enumcontent_typeFieldUpdateOperationsInput | $Enums.content_type
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    season_name?: NullableEnumcontent_season_nameFieldUpdateOperationsInput | $Enums.content_season_name | null
    studios?: NullableStringFieldUpdateOperationsInput | string | null
    actor?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    backdrop_url?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration_minutes?: NullableIntFieldUpdateOperationsInput | number | null
    num_seasons?: NullableIntFieldUpdateOperationsInput | number | null
    num_episodes?: NullableIntFieldUpdateOperationsInput | number | null
    bookmark?: bookmarkUpdateManyWithoutContentNestedInput
    comment?: commentUpdateManyWithoutContentNestedInput
    contentgenre?: contentgenreUpdateManyWithoutContentNestedInput
    episode?: episodeUpdateManyWithoutContentNestedInput
    rating?: ratingUpdateManyWithoutContentNestedInput
    reportcontent?: reportcontentUpdateManyWithoutContentNestedInput
    season?: seasonUpdateManyWithoutContentNestedInput
    subtitle?: subtitleUpdateManyWithoutContentNestedInput
    trendingcontent?: trendingcontentUpdateManyWithoutContentNestedInput
  }

  export type contentUncheckedUpdateWithoutWatchhistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title_english?: NullableStringFieldUpdateOperationsInput | string | null
    title_japanese?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enumcontent_typeFieldUpdateOperationsInput | $Enums.content_type
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    season_name?: NullableEnumcontent_season_nameFieldUpdateOperationsInput | $Enums.content_season_name | null
    studios?: NullableStringFieldUpdateOperationsInput | string | null
    actor?: NullableStringFieldUpdateOperationsInput | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    backdrop_url?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration_minutes?: NullableIntFieldUpdateOperationsInput | number | null
    num_seasons?: NullableIntFieldUpdateOperationsInput | number | null
    num_episodes?: NullableIntFieldUpdateOperationsInput | number | null
    bookmark?: bookmarkUncheckedUpdateManyWithoutContentNestedInput
    comment?: commentUncheckedUpdateManyWithoutContentNestedInput
    contentgenre?: contentgenreUncheckedUpdateManyWithoutContentNestedInput
    episode?: episodeUncheckedUpdateManyWithoutContentNestedInput
    rating?: ratingUncheckedUpdateManyWithoutContentNestedInput
    reportcontent?: reportcontentUncheckedUpdateManyWithoutContentNestedInput
    season?: seasonUncheckedUpdateManyWithoutContentNestedInput
    subtitle?: subtitleUncheckedUpdateManyWithoutContentNestedInput
    trendingcontent?: trendingcontentUncheckedUpdateManyWithoutContentNestedInput
  }

  export type episodeUpsertWithoutWatchhistoryInput = {
    update: XOR<episodeUpdateWithoutWatchhistoryInput, episodeUncheckedUpdateWithoutWatchhistoryInput>
    create: XOR<episodeCreateWithoutWatchhistoryInput, episodeUncheckedCreateWithoutWatchhistoryInput>
    where?: episodeWhereInput
  }

  export type episodeUpdateToOneWithWhereWithoutWatchhistoryInput = {
    where?: episodeWhereInput
    data: XOR<episodeUpdateWithoutWatchhistoryInput, episodeUncheckedUpdateWithoutWatchhistoryInput>
  }

  export type episodeUpdateWithoutWatchhistoryInput = {
    season?: IntFieldUpdateOperationsInput | number
    episode_number?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: commentUpdateManyWithoutEpisodeNestedInput
    content?: contentUpdateOneRequiredWithoutEpisodeNestedInput
    episodesource?: episodesourceUpdateManyWithoutEpisodeNestedInput
    reportcontent?: reportcontentUpdateManyWithoutEpisodeNestedInput
    subtitle?: subtitleUpdateManyWithoutEpisodeNestedInput
  }

  export type episodeUncheckedUpdateWithoutWatchhistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    season?: IntFieldUpdateOperationsInput | number
    episode_number?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: commentUncheckedUpdateManyWithoutEpisodeNestedInput
    episodesource?: episodesourceUncheckedUpdateManyWithoutEpisodeNestedInput
    reportcontent?: reportcontentUncheckedUpdateManyWithoutEpisodeNestedInput
    subtitle?: subtitleUncheckedUpdateManyWithoutEpisodeNestedInput
  }

  export type userUpsertWithoutWatchhistoryInput = {
    update: XOR<userUpdateWithoutWatchhistoryInput, userUncheckedUpdateWithoutWatchhistoryInput>
    create: XOR<userCreateWithoutWatchhistoryInput, userUncheckedCreateWithoutWatchhistoryInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutWatchhistoryInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutWatchhistoryInput, userUncheckedUpdateWithoutWatchhistoryInput>
  }

  export type userUpdateWithoutWatchhistoryInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | $Enums.user_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    bookmark?: bookmarkUpdateManyWithoutUserNestedInput
    comment?: commentUpdateManyWithoutUserNestedInput
    notification?: notificationUpdateManyWithoutUserNestedInput
    rating?: ratingUpdateManyWithoutUserNestedInput
    reportcontent?: reportcontentUpdateManyWithoutUserNestedInput
    searchlog?: searchlogUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutWatchhistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | $Enums.user_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    bookmark?: bookmarkUncheckedUpdateManyWithoutUserNestedInput
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
    notification?: notificationUncheckedUpdateManyWithoutUserNestedInput
    rating?: ratingUncheckedUpdateManyWithoutUserNestedInput
    reportcontent?: reportcontentUncheckedUpdateManyWithoutUserNestedInput
    searchlog?: searchlogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type episodeCreateWithoutEpisodesourceInput = {
    season: number
    episode_number: number
    title?: string | null
    created_at?: Date | string
    comment?: commentCreateNestedManyWithoutEpisodeInput
    content: contentCreateNestedOneWithoutEpisodeInput
    reportcontent?: reportcontentCreateNestedManyWithoutEpisodeInput
    subtitle?: subtitleCreateNestedManyWithoutEpisodeInput
    watchhistory?: watchhistoryCreateNestedManyWithoutEpisodeInput
  }

  export type episodeUncheckedCreateWithoutEpisodesourceInput = {
    id?: number
    content_id: number
    season: number
    episode_number: number
    title?: string | null
    created_at?: Date | string
    comment?: commentUncheckedCreateNestedManyWithoutEpisodeInput
    reportcontent?: reportcontentUncheckedCreateNestedManyWithoutEpisodeInput
    subtitle?: subtitleUncheckedCreateNestedManyWithoutEpisodeInput
    watchhistory?: watchhistoryUncheckedCreateNestedManyWithoutEpisodeInput
  }

  export type episodeCreateOrConnectWithoutEpisodesourceInput = {
    where: episodeWhereUniqueInput
    create: XOR<episodeCreateWithoutEpisodesourceInput, episodeUncheckedCreateWithoutEpisodesourceInput>
  }

  export type episodesourcequalityCreateWithoutEpisodesourceInput = {
    resolution: string
    url: string
    created_at?: Date | string
  }

  export type episodesourcequalityUncheckedCreateWithoutEpisodesourceInput = {
    id?: number
    resolution: string
    url: string
    created_at?: Date | string
  }

  export type episodesourcequalityCreateOrConnectWithoutEpisodesourceInput = {
    where: episodesourcequalityWhereUniqueInput
    create: XOR<episodesourcequalityCreateWithoutEpisodesourceInput, episodesourcequalityUncheckedCreateWithoutEpisodesourceInput>
  }

  export type episodesourcequalityCreateManyEpisodesourceInputEnvelope = {
    data: episodesourcequalityCreateManyEpisodesourceInput | episodesourcequalityCreateManyEpisodesourceInput[]
    skipDuplicates?: boolean
  }

  export type episodeUpsertWithoutEpisodesourceInput = {
    update: XOR<episodeUpdateWithoutEpisodesourceInput, episodeUncheckedUpdateWithoutEpisodesourceInput>
    create: XOR<episodeCreateWithoutEpisodesourceInput, episodeUncheckedCreateWithoutEpisodesourceInput>
    where?: episodeWhereInput
  }

  export type episodeUpdateToOneWithWhereWithoutEpisodesourceInput = {
    where?: episodeWhereInput
    data: XOR<episodeUpdateWithoutEpisodesourceInput, episodeUncheckedUpdateWithoutEpisodesourceInput>
  }

  export type episodeUpdateWithoutEpisodesourceInput = {
    season?: IntFieldUpdateOperationsInput | number
    episode_number?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: commentUpdateManyWithoutEpisodeNestedInput
    content?: contentUpdateOneRequiredWithoutEpisodeNestedInput
    reportcontent?: reportcontentUpdateManyWithoutEpisodeNestedInput
    subtitle?: subtitleUpdateManyWithoutEpisodeNestedInput
    watchhistory?: watchhistoryUpdateManyWithoutEpisodeNestedInput
  }

  export type episodeUncheckedUpdateWithoutEpisodesourceInput = {
    id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    season?: IntFieldUpdateOperationsInput | number
    episode_number?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: commentUncheckedUpdateManyWithoutEpisodeNestedInput
    reportcontent?: reportcontentUncheckedUpdateManyWithoutEpisodeNestedInput
    subtitle?: subtitleUncheckedUpdateManyWithoutEpisodeNestedInput
    watchhistory?: watchhistoryUncheckedUpdateManyWithoutEpisodeNestedInput
  }

  export type episodesourcequalityUpsertWithWhereUniqueWithoutEpisodesourceInput = {
    where: episodesourcequalityWhereUniqueInput
    update: XOR<episodesourcequalityUpdateWithoutEpisodesourceInput, episodesourcequalityUncheckedUpdateWithoutEpisodesourceInput>
    create: XOR<episodesourcequalityCreateWithoutEpisodesourceInput, episodesourcequalityUncheckedCreateWithoutEpisodesourceInput>
  }

  export type episodesourcequalityUpdateWithWhereUniqueWithoutEpisodesourceInput = {
    where: episodesourcequalityWhereUniqueInput
    data: XOR<episodesourcequalityUpdateWithoutEpisodesourceInput, episodesourcequalityUncheckedUpdateWithoutEpisodesourceInput>
  }

  export type episodesourcequalityUpdateManyWithWhereWithoutEpisodesourceInput = {
    where: episodesourcequalityScalarWhereInput
    data: XOR<episodesourcequalityUpdateManyMutationInput, episodesourcequalityUncheckedUpdateManyWithoutEpisodesourceInput>
  }

  export type episodesourcequalityScalarWhereInput = {
    AND?: episodesourcequalityScalarWhereInput | episodesourcequalityScalarWhereInput[]
    OR?: episodesourcequalityScalarWhereInput[]
    NOT?: episodesourcequalityScalarWhereInput | episodesourcequalityScalarWhereInput[]
    id?: IntFilter<"episodesourcequality"> | number
    episodesource_id?: IntFilter<"episodesourcequality"> | number
    resolution?: StringFilter<"episodesourcequality"> | string
    url?: StringFilter<"episodesourcequality"> | string
    created_at?: DateTimeFilter<"episodesourcequality"> | Date | string
  }

  export type episodesourceCreateWithoutQualitiesInput = {
    provider: string
    priority?: number
    created_at?: Date | string
    episode: episodeCreateNestedOneWithoutEpisodesourceInput
  }

  export type episodesourceUncheckedCreateWithoutQualitiesInput = {
    id?: number
    episode_id: number
    provider: string
    priority?: number
    created_at?: Date | string
  }

  export type episodesourceCreateOrConnectWithoutQualitiesInput = {
    where: episodesourceWhereUniqueInput
    create: XOR<episodesourceCreateWithoutQualitiesInput, episodesourceUncheckedCreateWithoutQualitiesInput>
  }

  export type episodesourceUpsertWithoutQualitiesInput = {
    update: XOR<episodesourceUpdateWithoutQualitiesInput, episodesourceUncheckedUpdateWithoutQualitiesInput>
    create: XOR<episodesourceCreateWithoutQualitiesInput, episodesourceUncheckedCreateWithoutQualitiesInput>
    where?: episodesourceWhereInput
  }

  export type episodesourceUpdateToOneWithWhereWithoutQualitiesInput = {
    where?: episodesourceWhereInput
    data: XOR<episodesourceUpdateWithoutQualitiesInput, episodesourceUncheckedUpdateWithoutQualitiesInput>
  }

  export type episodesourceUpdateWithoutQualitiesInput = {
    provider?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    episode?: episodeUpdateOneRequiredWithoutEpisodesourceNestedInput
  }

  export type episodesourceUncheckedUpdateWithoutQualitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    episode_id?: IntFieldUpdateOperationsInput | number
    provider?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type bookmarkCreateManyContentInput = {
    id?: number
    user_id: number
    created_at?: Date | string
  }

  export type commentCreateManyContentInput = {
    id?: number
    user_id: number
    episode_id: number
    comment: string
    created_at?: Date | string
  }

  export type contentgenreCreateManyContentInput = {
    genre_id: number
  }

  export type episodeCreateManyContentInput = {
    id?: number
    season: number
    episode_number: number
    title?: string | null
    created_at?: Date | string
  }

  export type ratingCreateManyContentInput = {
    id?: number
    user_id: number
    rating: number
    comment?: string | null
    created_at?: Date | string
  }

  export type reportcontentCreateManyContentInput = {
    id?: number
    user_id: number
    episode_id: number
    reason: string
    created_at?: Date | string
  }

  export type seasonCreateManyContentInput = {
    id?: number
    season_number: number
    title: string
    description?: string | null
    thumbnail_url?: string | null
    created_at?: Date | string
  }

  export type subtitleCreateManyContentInput = {
    id?: number
    episode_id: number
    language: string
    file_url: string
    created_at?: Date | string
  }

  export type trendingcontentCreateManyContentInput = {
    id?: number
    week_start: Date | string
    view_count: number
    created_at?: Date | string
  }

  export type watchhistoryCreateManyContentInput = {
    id?: number
    user_id: number
    episode_id: number
    last_watch_seconds: number
    updated_at?: Date | string
  }

  export type bookmarkUpdateWithoutContentInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutBookmarkNestedInput
  }

  export type bookmarkUncheckedUpdateWithoutContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type bookmarkUncheckedUpdateManyWithoutContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type commentUpdateWithoutContentInput = {
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    episode?: episodeUpdateOneRequiredWithoutCommentNestedInput
    user?: userUpdateOneRequiredWithoutCommentNestedInput
  }

  export type commentUncheckedUpdateWithoutContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    episode_id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type commentUncheckedUpdateManyWithoutContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    episode_id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type contentgenreUpdateWithoutContentInput = {
    genre?: genreUpdateOneRequiredWithoutContentgenreNestedInput
  }

  export type contentgenreUncheckedUpdateWithoutContentInput = {
    genre_id?: IntFieldUpdateOperationsInput | number
  }

  export type contentgenreUncheckedUpdateManyWithoutContentInput = {
    genre_id?: IntFieldUpdateOperationsInput | number
  }

  export type episodeUpdateWithoutContentInput = {
    season?: IntFieldUpdateOperationsInput | number
    episode_number?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: commentUpdateManyWithoutEpisodeNestedInput
    episodesource?: episodesourceUpdateManyWithoutEpisodeNestedInput
    reportcontent?: reportcontentUpdateManyWithoutEpisodeNestedInput
    subtitle?: subtitleUpdateManyWithoutEpisodeNestedInput
    watchhistory?: watchhistoryUpdateManyWithoutEpisodeNestedInput
  }

  export type episodeUncheckedUpdateWithoutContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    season?: IntFieldUpdateOperationsInput | number
    episode_number?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: commentUncheckedUpdateManyWithoutEpisodeNestedInput
    episodesource?: episodesourceUncheckedUpdateManyWithoutEpisodeNestedInput
    reportcontent?: reportcontentUncheckedUpdateManyWithoutEpisodeNestedInput
    subtitle?: subtitleUncheckedUpdateManyWithoutEpisodeNestedInput
    watchhistory?: watchhistoryUncheckedUpdateManyWithoutEpisodeNestedInput
  }

  export type episodeUncheckedUpdateManyWithoutContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    season?: IntFieldUpdateOperationsInput | number
    episode_number?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ratingUpdateWithoutContentInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutRatingNestedInput
  }

  export type ratingUncheckedUpdateWithoutContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ratingUncheckedUpdateManyWithoutContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reportcontentUpdateWithoutContentInput = {
    reason?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    episode?: episodeUpdateOneRequiredWithoutReportcontentNestedInput
    user?: userUpdateOneRequiredWithoutReportcontentNestedInput
  }

  export type reportcontentUncheckedUpdateWithoutContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    episode_id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reportcontentUncheckedUpdateManyWithoutContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    episode_id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type seasonUpdateWithoutContentInput = {
    season_number?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type seasonUncheckedUpdateWithoutContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    season_number?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type seasonUncheckedUpdateManyWithoutContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    season_number?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type subtitleUpdateWithoutContentInput = {
    language?: StringFieldUpdateOperationsInput | string
    file_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    episode?: episodeUpdateOneRequiredWithoutSubtitleNestedInput
  }

  export type subtitleUncheckedUpdateWithoutContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    episode_id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    file_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type subtitleUncheckedUpdateManyWithoutContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    episode_id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    file_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type trendingcontentUpdateWithoutContentInput = {
    week_start?: DateTimeFieldUpdateOperationsInput | Date | string
    view_count?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type trendingcontentUncheckedUpdateWithoutContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    week_start?: DateTimeFieldUpdateOperationsInput | Date | string
    view_count?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type trendingcontentUncheckedUpdateManyWithoutContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    week_start?: DateTimeFieldUpdateOperationsInput | Date | string
    view_count?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type watchhistoryUpdateWithoutContentInput = {
    last_watch_seconds?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    episode?: episodeUpdateOneRequiredWithoutWatchhistoryNestedInput
    user?: userUpdateOneRequiredWithoutWatchhistoryNestedInput
  }

  export type watchhistoryUncheckedUpdateWithoutContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    episode_id?: IntFieldUpdateOperationsInput | number
    last_watch_seconds?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type watchhistoryUncheckedUpdateManyWithoutContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    episode_id?: IntFieldUpdateOperationsInput | number
    last_watch_seconds?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type commentCreateManyEpisodeInput = {
    id?: number
    user_id: number
    content_id: number
    comment: string
    created_at?: Date | string
  }

  export type episodesourceCreateManyEpisodeInput = {
    id?: number
    provider: string
    priority?: number
    created_at?: Date | string
  }

  export type reportcontentCreateManyEpisodeInput = {
    id?: number
    user_id: number
    content_id: number
    reason: string
    created_at?: Date | string
  }

  export type subtitleCreateManyEpisodeInput = {
    id?: number
    content_id: number
    language: string
    file_url: string
    created_at?: Date | string
  }

  export type watchhistoryCreateManyEpisodeInput = {
    id?: number
    user_id: number
    content_id: number
    last_watch_seconds: number
    updated_at?: Date | string
  }

  export type commentUpdateWithoutEpisodeInput = {
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: contentUpdateOneRequiredWithoutCommentNestedInput
    user?: userUpdateOneRequiredWithoutCommentNestedInput
  }

  export type commentUncheckedUpdateWithoutEpisodeInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type commentUncheckedUpdateManyWithoutEpisodeInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type episodesourceUpdateWithoutEpisodeInput = {
    provider?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    qualities?: episodesourcequalityUpdateManyWithoutEpisodesourceNestedInput
  }

  export type episodesourceUncheckedUpdateWithoutEpisodeInput = {
    id?: IntFieldUpdateOperationsInput | number
    provider?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    qualities?: episodesourcequalityUncheckedUpdateManyWithoutEpisodesourceNestedInput
  }

  export type episodesourceUncheckedUpdateManyWithoutEpisodeInput = {
    id?: IntFieldUpdateOperationsInput | number
    provider?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reportcontentUpdateWithoutEpisodeInput = {
    reason?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: contentUpdateOneRequiredWithoutReportcontentNestedInput
    user?: userUpdateOneRequiredWithoutReportcontentNestedInput
  }

  export type reportcontentUncheckedUpdateWithoutEpisodeInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reportcontentUncheckedUpdateManyWithoutEpisodeInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type subtitleUpdateWithoutEpisodeInput = {
    language?: StringFieldUpdateOperationsInput | string
    file_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: contentUpdateOneRequiredWithoutSubtitleNestedInput
  }

  export type subtitleUncheckedUpdateWithoutEpisodeInput = {
    id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    file_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type subtitleUncheckedUpdateManyWithoutEpisodeInput = {
    id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    file_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type watchhistoryUpdateWithoutEpisodeInput = {
    last_watch_seconds?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: contentUpdateOneRequiredWithoutWatchhistoryNestedInput
    user?: userUpdateOneRequiredWithoutWatchhistoryNestedInput
  }

  export type watchhistoryUncheckedUpdateWithoutEpisodeInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    last_watch_seconds?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type watchhistoryUncheckedUpdateManyWithoutEpisodeInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    last_watch_seconds?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type contentgenreCreateManyGenreInput = {
    content_id: number
  }

  export type contentgenreUpdateWithoutGenreInput = {
    content?: contentUpdateOneRequiredWithoutContentgenreNestedInput
  }

  export type contentgenreUncheckedUpdateWithoutGenreInput = {
    content_id?: IntFieldUpdateOperationsInput | number
  }

  export type contentgenreUncheckedUpdateManyWithoutGenreInput = {
    content_id?: IntFieldUpdateOperationsInput | number
  }

  export type bookmarkCreateManyUserInput = {
    id?: number
    content_id: number
    created_at?: Date | string
  }

  export type commentCreateManyUserInput = {
    id?: number
    content_id: number
    episode_id: number
    comment: string
    created_at?: Date | string
  }

  export type notificationCreateManyUserInput = {
    id?: number
    type: $Enums.notification_type
    message: string
    is_read?: boolean
    created_at?: Date | string
  }

  export type ratingCreateManyUserInput = {
    id?: number
    content_id: number
    rating: number
    comment?: string | null
    created_at?: Date | string
  }

  export type reportcontentCreateManyUserInput = {
    id?: number
    content_id: number
    episode_id: number
    reason: string
    created_at?: Date | string
  }

  export type searchlogCreateManyUserInput = {
    id?: number
    keyword: string
    searched_at?: Date | string
  }

  export type watchhistoryCreateManyUserInput = {
    id?: number
    content_id: number
    episode_id: number
    last_watch_seconds: number
    updated_at?: Date | string
  }

  export type bookmarkUpdateWithoutUserInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: contentUpdateOneRequiredWithoutBookmarkNestedInput
  }

  export type bookmarkUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type bookmarkUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type commentUpdateWithoutUserInput = {
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: contentUpdateOneRequiredWithoutCommentNestedInput
    episode?: episodeUpdateOneRequiredWithoutCommentNestedInput
  }

  export type commentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    episode_id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type commentUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    episode_id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type notificationUpdateWithoutUserInput = {
    type?: Enumnotification_typeFieldUpdateOperationsInput | $Enums.notification_type
    message?: StringFieldUpdateOperationsInput | string
    is_read?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type notificationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: Enumnotification_typeFieldUpdateOperationsInput | $Enums.notification_type
    message?: StringFieldUpdateOperationsInput | string
    is_read?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type notificationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: Enumnotification_typeFieldUpdateOperationsInput | $Enums.notification_type
    message?: StringFieldUpdateOperationsInput | string
    is_read?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ratingUpdateWithoutUserInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: contentUpdateOneRequiredWithoutRatingNestedInput
  }

  export type ratingUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ratingUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reportcontentUpdateWithoutUserInput = {
    reason?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: contentUpdateOneRequiredWithoutReportcontentNestedInput
    episode?: episodeUpdateOneRequiredWithoutReportcontentNestedInput
  }

  export type reportcontentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    episode_id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reportcontentUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    episode_id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type searchlogUpdateWithoutUserInput = {
    keyword?: StringFieldUpdateOperationsInput | string
    searched_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type searchlogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    keyword?: StringFieldUpdateOperationsInput | string
    searched_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type searchlogUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    keyword?: StringFieldUpdateOperationsInput | string
    searched_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type watchhistoryUpdateWithoutUserInput = {
    last_watch_seconds?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: contentUpdateOneRequiredWithoutWatchhistoryNestedInput
    episode?: episodeUpdateOneRequiredWithoutWatchhistoryNestedInput
  }

  export type watchhistoryUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    episode_id?: IntFieldUpdateOperationsInput | number
    last_watch_seconds?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type watchhistoryUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    content_id?: IntFieldUpdateOperationsInput | number
    episode_id?: IntFieldUpdateOperationsInput | number
    last_watch_seconds?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type episodesourcequalityCreateManyEpisodesourceInput = {
    id?: number
    resolution: string
    url: string
    created_at?: Date | string
  }

  export type episodesourcequalityUpdateWithoutEpisodesourceInput = {
    resolution?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type episodesourcequalityUncheckedUpdateWithoutEpisodesourceInput = {
    id?: IntFieldUpdateOperationsInput | number
    resolution?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type episodesourcequalityUncheckedUpdateManyWithoutEpisodesourceInput = {
    id?: IntFieldUpdateOperationsInput | number
    resolution?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}