
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.BookmarkScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  content_id: 'content_id',
  created_at: 'created_at'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  content_id: 'content_id',
  episode_id: 'episode_id',
  comment: 'comment',
  created_at: 'created_at'
};

exports.Prisma.ContentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  title_english: 'title_english',
  title_japanese: 'title_japanese',
  description: 'description',
  type: 'type',
  release_year: 'release_year',
  season_name: 'season_name',
  studios: 'studios',
  actor: 'actor',
  score: 'score',
  thumbnail_url: 'thumbnail_url',
  backdrop_url: 'backdrop_url',
  video_url: 'video_url',
  created_at: 'created_at',
  duration_minutes: 'duration_minutes',
  num_seasons: 'num_seasons',
  num_episodes: 'num_episodes'
};

exports.Prisma.ContentgenreScalarFieldEnum = {
  content_id: 'content_id',
  genre_id: 'genre_id'
};

exports.Prisma.EpisodeScalarFieldEnum = {
  id: 'id',
  content_id: 'content_id',
  season: 'season',
  episode_number: 'episode_number',
  title: 'title',
  created_at: 'created_at'
};

exports.Prisma.GenreScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  type: 'type',
  message: 'message',
  is_read: 'is_read',
  created_at: 'created_at'
};

exports.Prisma.RatingScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  content_id: 'content_id',
  rating: 'rating',
  comment: 'comment',
  created_at: 'created_at'
};

exports.Prisma.ReportcontentScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  content_id: 'content_id',
  episode_id: 'episode_id',
  reason: 'reason',
  created_at: 'created_at'
};

exports.Prisma.SearchlogScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  keyword: 'keyword',
  searched_at: 'searched_at'
};

exports.Prisma.SeasonScalarFieldEnum = {
  id: 'id',
  content_id: 'content_id',
  season_number: 'season_number',
  title: 'title',
  description: 'description',
  thumbnail_url: 'thumbnail_url',
  created_at: 'created_at'
};

exports.Prisma.SubtitleScalarFieldEnum = {
  id: 'id',
  content_id: 'content_id',
  episode_id: 'episode_id',
  language: 'language',
  file_url: 'file_url',
  created_at: 'created_at'
};

exports.Prisma.TrendingcontentScalarFieldEnum = {
  id: 'id',
  content_id: 'content_id',
  week_start: 'week_start',
  view_count: 'view_count',
  created_at: 'created_at'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  role: 'role',
  created_at: 'created_at'
};

exports.Prisma.WatchhistoryScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  content_id: 'content_id',
  episode_id: 'episode_id',
  last_watch_seconds: 'last_watch_seconds',
  updated_at: 'updated_at'
};

exports.Prisma.EpisodesourceScalarFieldEnum = {
  id: 'id',
  episode_id: 'episode_id',
  provider: 'provider',
  priority: 'priority',
  created_at: 'created_at'
};

exports.Prisma.EpisodesourcequalityScalarFieldEnum = {
  id: 'id',
  episodesource_id: 'episodesource_id',
  resolution: 'resolution',
  url: 'url',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.commentOrderByRelevanceFieldEnum = {
  comment: 'comment'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.contentOrderByRelevanceFieldEnum = {
  title: 'title',
  slug: 'slug',
  title_english: 'title_english',
  title_japanese: 'title_japanese',
  description: 'description',
  studios: 'studios',
  actor: 'actor',
  thumbnail_url: 'thumbnail_url',
  backdrop_url: 'backdrop_url',
  video_url: 'video_url'
};

exports.Prisma.episodeOrderByRelevanceFieldEnum = {
  title: 'title'
};

exports.Prisma.genreOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.notificationOrderByRelevanceFieldEnum = {
  message: 'message'
};

exports.Prisma.ratingOrderByRelevanceFieldEnum = {
  comment: 'comment'
};

exports.Prisma.reportcontentOrderByRelevanceFieldEnum = {
  reason: 'reason'
};

exports.Prisma.searchlogOrderByRelevanceFieldEnum = {
  keyword: 'keyword'
};

exports.Prisma.seasonOrderByRelevanceFieldEnum = {
  title: 'title',
  description: 'description',
  thumbnail_url: 'thumbnail_url'
};

exports.Prisma.subtitleOrderByRelevanceFieldEnum = {
  language: 'language',
  file_url: 'file_url'
};

exports.Prisma.userOrderByRelevanceFieldEnum = {
  email: 'email',
  password: 'password'
};

exports.Prisma.episodesourceOrderByRelevanceFieldEnum = {
  provider: 'provider'
};

exports.Prisma.episodesourcequalityOrderByRelevanceFieldEnum = {
  resolution: 'resolution',
  url: 'url'
};
exports.content_type = exports.$Enums.content_type = {
  movie: 'movie',
  series: 'series',
  anime: 'anime'
};

exports.content_season_name = exports.$Enums.content_season_name = {
  spring: 'spring',
  summer: 'summer',
  fall: 'fall',
  winter: 'winter'
};

exports.notification_type = exports.$Enums.notification_type = {
  new_episode: 'new_episode',
  recommendation: 'recommendation',
  general: 'general'
};

exports.user_role = exports.$Enums.user_role = {
  member: 'member',
  admin: 'admin'
};

exports.Prisma.ModelName = {
  bookmark: 'bookmark',
  comment: 'comment',
  content: 'content',
  contentgenre: 'contentgenre',
  episode: 'episode',
  genre: 'genre',
  notification: 'notification',
  rating: 'rating',
  reportcontent: 'reportcontent',
  searchlog: 'searchlog',
  season: 'season',
  subtitle: 'subtitle',
  trendingcontent: 'trendingcontent',
  user: 'user',
  watchhistory: 'watchhistory',
  episodesource: 'episodesource',
  episodesourcequality: 'episodesourcequality'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
